98967d8a7f46e5e8213955e3448539b4
'use strict';var invariant=require('fbjs/lib/invariant');var TRACE_TAG_REACT_APPS=1<<17;var TRACE_TAG_JSC_CALLS=1<<27;var _enabled=false;var _asyncCookie=0;var _markStack=[];var _markStackIndex=-1;var _canInstallReactHook=false;var _useFiber=false;var REACT_MARKER='\u269B';var userTimingPolyfill=__DEV__?{mark:function mark(markName){if(_enabled){_markStackIndex++;_markStack[_markStackIndex]=markName;var systraceLabel=markName;if(markName[0]===REACT_MARKER){var indexOfId=markName.lastIndexOf(' (#');var cutoffIndex=indexOfId!==-1?indexOfId:markName.length;systraceLabel=markName.slice(2,cutoffIndex);}Systrace.beginEvent(systraceLabel);}},measure:function measure(measureName,startMark,endMark){if(_enabled){invariant(typeof measureName==='string'&&typeof startMark==='string'&&typeof endMark==='undefined','Only performance.measure(string, string) overload is supported.');var topMark=_markStack[_markStackIndex];invariant(startMark===topMark,'There was a mismatching performance.measure() call. '+'Expected "%s" but got "%s."',topMark,startMark);_markStackIndex--;Systrace.endEvent();}},clearMarks:function clearMarks(markName){if(_enabled){if(_markStackIndex===-1){return;}if(markName===_markStack[_markStackIndex]){if(userTimingPolyfill!=null){userTimingPolyfill.measure(markName,markName);}}}},clearMeasures:function clearMeasures(){}}:null;var reactDebugToolHook=__DEV__?{onBeforeMountComponent:function onBeforeMountComponent(debugID){var ReactComponentTreeHook=require('ReactGlobalSharedState').ReactComponentTreeHook;var displayName=ReactComponentTreeHook.getDisplayName(debugID);Systrace.beginEvent('ReactReconciler.mountComponent('+displayName+')');},onMountComponent:function onMountComponent(debugID){Systrace.endEvent();},onBeforeUpdateComponent:function onBeforeUpdateComponent(debugID){var ReactComponentTreeHook=require('ReactGlobalSharedState').ReactComponentTreeHook;var displayName=ReactComponentTreeHook.getDisplayName(debugID);Systrace.beginEvent('ReactReconciler.updateComponent('+displayName+')');},onUpdateComponent:function onUpdateComponent(debugID){Systrace.endEvent();},onBeforeUnmountComponent:function onBeforeUnmountComponent(debugID){var ReactComponentTreeHook=require('ReactGlobalSharedState').ReactComponentTreeHook;var displayName=ReactComponentTreeHook.getDisplayName(debugID);Systrace.beginEvent('ReactReconciler.unmountComponent('+displayName+')');},onUnmountComponent:function onUnmountComponent(debugID){Systrace.endEvent();},onBeginLifeCycleTimer:function onBeginLifeCycleTimer(debugID,timerType){var ReactComponentTreeHook=require('ReactGlobalSharedState').ReactComponentTreeHook;var displayName=ReactComponentTreeHook.getDisplayName(debugID);Systrace.beginEvent(displayName+'.'+timerType+'()');},onEndLifeCycleTimer:function onEndLifeCycleTimer(debugID,timerType){Systrace.endEvent();}}:null;var Systrace={installReactHook:function installReactHook(useFiber){if(_enabled){if(__DEV__){if(useFiber){global.performance=userTimingPolyfill;}else{require('ReactDebugTool').addHook(reactDebugToolHook);}}}_useFiber=useFiber;_canInstallReactHook=true;},setEnabled:function setEnabled(enabled){if(_enabled!==enabled){if(__DEV__){if(enabled){global.nativeTraceBeginLegacy&&global.nativeTraceBeginLegacy(TRACE_TAG_JSC_CALLS);}else{global.nativeTraceEndLegacy&&global.nativeTraceEndLegacy(TRACE_TAG_JSC_CALLS);}if(_canInstallReactHook){if(_useFiber){global.performance=enabled?userTimingPolyfill:undefined;}else{var ReactDebugTool=require('ReactDebugTool');if(enabled){ReactDebugTool.addHook(reactDebugToolHook);}else{ReactDebugTool.removeHook(reactDebugToolHook);}}}}_enabled=enabled;}},isEnabled:function isEnabled(){return _enabled;},beginEvent:function beginEvent(profileName,args){if(_enabled){profileName=typeof profileName==='function'?profileName():profileName;global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS,profileName,args);}},endEvent:function endEvent(){if(_enabled){global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);}},beginAsyncEvent:function beginAsyncEvent(profileName){var cookie=_asyncCookie;if(_enabled){_asyncCookie++;profileName=typeof profileName==='function'?profileName():profileName;global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS,profileName,cookie,0);}return cookie;},endAsyncEvent:function endAsyncEvent(profileName,cookie){if(_enabled){profileName=typeof profileName==='function'?profileName():profileName;global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS,profileName,cookie,0);}},counterEvent:function counterEvent(profileName,value){if(_enabled){profileName=typeof profileName==='function'?profileName():profileName;global.nativeTraceCounter&&global.nativeTraceCounter(TRACE_TAG_REACT_APPS,profileName,value);}},attachToRelayProfiler:function attachToRelayProfiler(relayProfiler){relayProfiler.attachProfileHandler('*',function(name){var cookie=Systrace.beginAsyncEvent(name);return function(){Systrace.endAsyncEvent(name,cookie);};});relayProfiler.attachAggregateHandler('*',function(name,callback){Systrace.beginEvent(name);callback();Systrace.endEvent();});},swizzleJSON:function swizzleJSON(){Systrace.measureMethods(JSON,'JSON',['parse','stringify']);},measureMethods:function measureMethods(object,objectName,methodNames){if(!__DEV__){return;}methodNames.forEach(function(methodName){object[methodName]=Systrace.measure(objectName,methodName,object[methodName]);});},measure:function measure(objName,fnName,func){if(!__DEV__){return func;}var profileName=objName+'.'+fnName;return function(){if(!_enabled){return func.apply(this,arguments);}Systrace.beginEvent(profileName);var ret=func.apply(this,arguments);Systrace.endEvent();return ret;};}};if(__DEV__){require.Systrace=Systrace;}module.exports=Systrace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,