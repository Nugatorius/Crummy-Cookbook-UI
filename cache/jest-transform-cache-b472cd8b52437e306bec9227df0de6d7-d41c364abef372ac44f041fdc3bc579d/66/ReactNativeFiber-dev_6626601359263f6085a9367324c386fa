7d2e8b3c37e48c17b9b30e7a6976fbd5
"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};__DEV__&&function(){var invariant=require("fbjs/lib/invariant"),require$$0=require("fbjs/lib/warning"),ExceptionsManager=require("ExceptionsManager"),emptyObject=require("fbjs/lib/emptyObject"),react=require("react"),checkPropTypes=require("prop-types/checkPropTypes"),shallowEqual=require("fbjs/lib/shallowEqual"),deepDiffer=require("deepDiffer"),flattenStyle=require("flattenStyle"),TextInputState=require("TextInputState"),UIManager=require("UIManager"),deepFreezeAndThrowOnMutationInDev=require("deepFreezeAndThrowOnMutationInDev");require("InitializeCore");var RCTEventEmitter=require("RCTEventEmitter"),emptyFunction=require("fbjs/lib/emptyFunction"),defaultShowDialog=function defaultShowDialog(capturedError){return!0;},showDialog=defaultShowDialog;function logCapturedError(capturedError){if(!1!==showDialog(capturedError)){var componentName=(capturedError.error,capturedError.componentName),componentStack=capturedError.componentStack,errorBoundaryName=capturedError.errorBoundaryName,errorBoundaryFound=capturedError.errorBoundaryFound,willRetry=capturedError.willRetry,componentNameMessage=componentName?"The above error occurred in the <"+componentName+"> component:":"The above error occurred in one of your React components:",errorBoundaryMessage=void 0;errorBoundaryMessage=errorBoundaryFound&&errorBoundaryName?willRetry?"React will try to recreate this component tree from scratch "+"using the error boundary you provided, "+errorBoundaryName+".":"This error was initially handled by the error boundary "+errorBoundaryName+".\n"+"Recreating the tree from scratch failed so React will unmount the tree.":"Consider adding an error boundary to your tree to customize error handling behavior.\n"+"You can learn more about error boundaries at https://fb.me/react-error-boundaries.";var combinedMessage=""+componentNameMessage+componentStack+"\n\n"+errorBoundaryMessage;console.error(combinedMessage);}}var injection={injectDialog:function injectDialog(fn){invariant(showDialog===defaultShowDialog,"The custom dialog was already injected."),invariant("function"==typeof fn,"Injected showDialog() must be a function."),showDialog=fn;}},logCapturedError_1=logCapturedError,ReactFiberErrorLogger={injection:injection,logCapturedError:logCapturedError_1},ReactErrorUtils={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function injectErrorUtils(injectedErrorUtils){invariant("function"==typeof injectedErrorUtils.invokeGuardedCallback,"Injected invokeGuardedCallback() must be a function."),_invokeGuardedCallback=injectedErrorUtils.invokeGuardedCallback;}},invokeGuardedCallback:function invokeGuardedCallback(name,func,context,a,b,c,d,e,f){_invokeGuardedCallback.apply(ReactErrorUtils,arguments);},invokeGuardedCallbackAndCatchFirstError:function invokeGuardedCallbackAndCatchFirstError(name,func,context,a,b,c,d,e,f){if(ReactErrorUtils.invokeGuardedCallback.apply(this,arguments),ReactErrorUtils.hasCaughtError()){var error=ReactErrorUtils.clearCaughtError();ReactErrorUtils._hasRethrowError||(ReactErrorUtils._hasRethrowError=!0,ReactErrorUtils._rethrowError=error);}},rethrowCaughtError:function rethrowCaughtError(){return _rethrowCaughtError.apply(ReactErrorUtils,arguments);},hasCaughtError:function hasCaughtError(){return ReactErrorUtils._hasCaughtError;},clearCaughtError:function clearCaughtError(){if(ReactErrorUtils._hasCaughtError){var error=ReactErrorUtils._caughtError;return ReactErrorUtils._caughtError=null,ReactErrorUtils._hasCaughtError=!1,error;}invariant(!1,"clearCaughtError was called but no error was captured. This error "+"is likely caused by a bug in React. Please file an issue.");}},_invokeGuardedCallback=function _invokeGuardedCallback(name,func,context,a,b,c,d,e,f){ReactErrorUtils._hasCaughtError=!1,ReactErrorUtils._caughtError=null;var funcArgs=Array.prototype.slice.call(arguments,3);try{func.apply(context,funcArgs);}catch(error){ReactErrorUtils._caughtError=error,ReactErrorUtils._hasCaughtError=!0;}};if("undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var fakeNode=document.createElement("react");_invokeGuardedCallback=function _invokeGuardedCallback(name,func,context,a,b,c,d,e,f){var didError=!0,funcArgs=Array.prototype.slice.call(arguments,3);function callCallback(){fakeNode.removeEventListener(evtType,callCallback,!1),func.apply(context,funcArgs),didError=!1;}var error=void 0,didSetError=!1,isCrossOriginError=!1;function onError(event){error=event.error,didSetError=!0,null===error&&0===event.colno&&0===event.lineno&&(isCrossOriginError=!0);}var evtType="react-"+(name||"invokeguardedcallback");window.addEventListener("error",onError),fakeNode.addEventListener(evtType,callCallback,!1);var evt=document.createEvent("Event");evt.initEvent(evtType,!1,!1),fakeNode.dispatchEvent(evt),didError?(didSetError?isCrossOriginError&&(error=new Error("A cross-origin error was thrown. React doesn't have access to "+"the actual error object in development. "+"See https://fb.me/react-crossorigin-error for more information.")):error=new Error("An error was thrown inside one of your components, but React "+"doesn't know what it was. This is likely due to browser "+'flakiness. React does its best to preserve the "Pause on '+'exceptions" behavior of the DevTools, which requires some '+"DEV-mode only tricks. It's possible that these don't work in "+"your browser. Try triggering the error in production mode, "+"or switching to a modern browser. If you suspect that this is "+"actually an issue with React, please file an issue."),ReactErrorUtils._hasCaughtError=!0,ReactErrorUtils._caughtError=error):(ReactErrorUtils._hasCaughtError=!1,ReactErrorUtils._caughtError=null),window.removeEventListener("error",onError);};}var ComponentTree,_rethrowCaughtError=function _rethrowCaughtError(){if(ReactErrorUtils._hasRethrowError){var error=ReactErrorUtils._rethrowError;throw ReactErrorUtils._rethrowError=null,ReactErrorUtils._hasRethrowError=!1,error;}},ReactErrorUtils_1=ReactErrorUtils,warning=require$$0,injection$1={injectComponentTree:function injectComponentTree(Injected){ComponentTree=Injected,warning(Injected&&Injected.getNodeFromInstance&&Injected.getInstanceFromNode,"EventPluginUtils.injection.injectComponentTree(...): Injected "+"module is missing getNodeFromInstance or getInstanceFromNode.");}};function isEndish(topLevelType){return"topMouseUp"===topLevelType||"topTouchEnd"===topLevelType||"topTouchCancel"===topLevelType;}function isMoveish(topLevelType){return"topMouseMove"===topLevelType||"topTouchMove"===topLevelType;}function isStartish(topLevelType){return"topMouseDown"===topLevelType||"topTouchStart"===topLevelType;}var validateEventDispatches;validateEventDispatches=function validateEventDispatches(event){var dispatchListeners=event._dispatchListeners,dispatchInstances=event._dispatchInstances,listenersIsArr=Array.isArray(dispatchListeners),listenersLen=listenersIsArr?dispatchListeners.length:dispatchListeners?1:0,instancesIsArr=Array.isArray(dispatchInstances),instancesLen=instancesIsArr?dispatchInstances.length:dispatchInstances?1:0;warning(instancesIsArr===listenersIsArr&&instancesLen===listenersLen,"EventPluginUtils: Invalid `event`.");};function executeDispatch(event,simulated,listener,inst){var type=event.type||"unknown-event";event.currentTarget=EventPluginUtils.getNodeFromInstance(inst),ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type,listener,void 0,event),event.currentTarget=null;}function executeDispatchesInOrder(event,simulated){var dispatchListeners=event._dispatchListeners,dispatchInstances=event._dispatchInstances;if(validateEventDispatches(event),Array.isArray(dispatchListeners))for(var i=0;i<dispatchListeners.length&&!event.isPropagationStopped();i++){executeDispatch(event,simulated,dispatchListeners[i],dispatchInstances[i]);}else dispatchListeners&&executeDispatch(event,simulated,dispatchListeners,dispatchInstances);event._dispatchListeners=null,event._dispatchInstances=null;}function executeDispatchesInOrderStopAtTrueImpl(event){var dispatchListeners=event._dispatchListeners,dispatchInstances=event._dispatchInstances;if(validateEventDispatches(event),Array.isArray(dispatchListeners)){for(var i=0;i<dispatchListeners.length&&!event.isPropagationStopped();i++){if(dispatchListeners[i](event,dispatchInstances[i]))return dispatchInstances[i];}}else if(dispatchListeners&&dispatchListeners(event,dispatchInstances))return dispatchInstances;return null;}function executeDispatchesInOrderStopAtTrue(event){var ret=executeDispatchesInOrderStopAtTrueImpl(event);return event._dispatchInstances=null,event._dispatchListeners=null,ret;}function executeDirectDispatch(event){validateEventDispatches(event);var dispatchListener=event._dispatchListeners,dispatchInstance=event._dispatchInstances;invariant(!Array.isArray(dispatchListener),"executeDirectDispatch(...): Invalid `event`."),event.currentTarget=dispatchListener?EventPluginUtils.getNodeFromInstance(dispatchInstance):null;var res=dispatchListener?dispatchListener(event):null;return event.currentTarget=null,event._dispatchListeners=null,event._dispatchInstances=null,res;}function hasDispatches(event){return!!event._dispatchListeners;}var EventPluginUtils={isEndish:isEndish,isMoveish:isMoveish,isStartish:isStartish,executeDirectDispatch:executeDirectDispatch,executeDispatchesInOrder:executeDispatchesInOrder,executeDispatchesInOrderStopAtTrue:executeDispatchesInOrderStopAtTrue,hasDispatches:hasDispatches,getFiberCurrentPropsFromNode:function getFiberCurrentPropsFromNode(node){return ComponentTree.getFiberCurrentPropsFromNode(node);},getInstanceFromNode:function getInstanceFromNode(node){return ComponentTree.getInstanceFromNode(node);},getNodeFromInstance:function getNodeFromInstance(node){return ComponentTree.getNodeFromInstance(node);},injection:injection$1},EventPluginUtils_1=EventPluginUtils,fiberHostComponent=null,ReactControlledComponentInjection={injectFiberControlledHostComponent:function injectFiberControlledHostComponent(hostComponentImpl){fiberHostComponent=hostComponentImpl;}},restoreTarget=null,restoreQueue=null;function restoreStateOfTarget(target){var internalInstance=EventPluginUtils_1.getInstanceFromNode(target);if(internalInstance){invariant(fiberHostComponent&&"function"==typeof fiberHostComponent.restoreControlledState,"Fiber needs to be injected to handle a fiber target for controlled "+"events. This error is likely caused by a bug in React. Please file an issue.");var props=EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);fiberHostComponent.restoreControlledState(internalInstance.stateNode,internalInstance.type,props);}}var ReactControlledComponent={injection:ReactControlledComponentInjection,enqueueStateRestore:function enqueueStateRestore(target){restoreTarget?restoreQueue?restoreQueue.push(target):restoreQueue=[target]:restoreTarget=target;},restoreStateIfNeeded:function restoreStateIfNeeded(){if(restoreTarget){var target=restoreTarget,queuedTargets=restoreQueue;if(restoreTarget=null,restoreQueue=null,restoreStateOfTarget(target),queuedTargets)for(var i=0;i<queuedTargets.length;i++){restoreStateOfTarget(queuedTargets[i]);}}}},ReactControlledComponent_1=ReactControlledComponent,fiberBatchedUpdates=function fiberBatchedUpdates(fn,bookkeeping){return fn(bookkeeping);};function batchedUpdates(fn,bookkeeping){return fiberBatchedUpdates(fn,bookkeeping);}var isNestingBatched=!1;function batchedUpdatesWithControlledComponents(fn,bookkeeping){if(isNestingBatched)return batchedUpdates(fn,bookkeeping);isNestingBatched=!0;try{return batchedUpdates(fn,bookkeeping);}finally{isNestingBatched=!1,ReactControlledComponent_1.restoreStateIfNeeded();}}var ReactGenericBatchingInjection={injectFiberBatchedUpdates:function injectFiberBatchedUpdates(_batchedUpdates){fiberBatchedUpdates=_batchedUpdates;}},ReactGenericBatching={batchedUpdates:batchedUpdatesWithControlledComponents,injection:ReactGenericBatchingInjection},ReactGenericBatching_1=ReactGenericBatching;function ReactNativeFiberErrorDialog(capturedError){var componentStack=capturedError.componentStack,error=capturedError.error,errorToHandle=void 0;if(error instanceof Error){var message=error.message,name=error.name,summary=message?name+": "+message:name;errorToHandle=error;try{errorToHandle.message=summary+"\n\nThis error is located at:"+componentStack;}catch(e){}}else errorToHandle="string"==typeof error?new Error(error+"\n\nThis error is located at:"+componentStack):new Error("Unspecified error at:"+componentStack);return ExceptionsManager.handleException(errorToHandle,!1),!1;}var showDialog$1=ReactNativeFiberErrorDialog,ReactNativeFiberErrorDialog_1={showDialog:showDialog$1},REACT_PORTAL_TYPE="function"==typeof Symbol&&(typeof Symbol==="function"?Symbol.for:"@@for")&&(typeof Symbol==="function"?Symbol.for:"@@for")("react.portal")||60106,createPortal=function createPortal(children,containerInfo,implementation){var key=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:REACT_PORTAL_TYPE,key:null==key?null:""+key,children:children,containerInfo:containerInfo,implementation:implementation};},isPortal=function isPortal(object){return"object"==typeof object&&null!==object&&object.$$typeof===REACT_PORTAL_TYPE;},REACT_PORTAL_TYPE_1=REACT_PORTAL_TYPE,ReactPortal={createPortal:createPortal,isPortal:isPortal,REACT_PORTAL_TYPE:REACT_PORTAL_TYPE_1},instanceCache={},instanceProps={};function precacheFiberNode(hostInst,tag){instanceCache[tag]=hostInst;}function uncacheFiberNode(tag){delete instanceCache[tag],delete instanceProps[tag];}function getInstanceFromTag(tag){return instanceCache[tag]||null;}function getTagFromInstance(inst){var tag=inst.stateNode._nativeTag;return invariant(tag,"All native instances should have a tag."),tag;}function getFiberCurrentPropsFromNode(stateNode){return instanceProps[stateNode._nativeTag]||null;}function updateFiberProps(tag,props){instanceProps[tag]=props;}var ReactNativeComponentTree={getClosestInstanceFromNode:getInstanceFromTag,getInstanceFromNode:getInstanceFromTag,getNodeFromInstance:getTagFromInstance,precacheFiberNode:precacheFiberNode,uncacheFiberNode:uncacheFiberNode,getFiberCurrentPropsFromNode:getFiberCurrentPropsFromNode,updateFiberProps:updateFiberProps},ReactNativeComponentTree_1=ReactNativeComponentTree,commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},ReactFeatureFlags={enableAsyncSubtreeAPI:!0},ReactFeatureFlags_1=ReactFeatureFlags,ReactTypeOfSideEffect={NoEffect:0,PerformedWork:1,Placement:2,Update:4,PlacementAndUpdate:6,Deletion:8,ContentReset:16,Callback:32,Err:64,Ref:128},ReactPriorityLevel={NoWork:0,SynchronousPriority:1,TaskPriority:2,HighPriority:3,LowPriority:4,OffscreenPriority:5},ReactTypeOfWork={IndeterminateComponent:0,FunctionalComponent:1,ClassComponent:2,HostRoot:3,HostPortal:4,HostComponent:5,HostText:6,CoroutineComponent:7,CoroutineHandlerPhase:8,YieldComponent:9,Fragment:10},CallbackEffect=ReactTypeOfSideEffect.Callback,NoWork=ReactPriorityLevel.NoWork,SynchronousPriority=ReactPriorityLevel.SynchronousPriority,TaskPriority=ReactPriorityLevel.TaskPriority,ClassComponent=ReactTypeOfWork.ClassComponent,HostRoot=ReactTypeOfWork.HostRoot,warning$2=require$$0,_queue1=void 0,_queue2=void 0;function comparePriority(a,b){return a!==TaskPriority&&a!==SynchronousPriority||b!==TaskPriority&&b!==SynchronousPriority?a===NoWork&&b!==NoWork?-255:a!==NoWork&&b===NoWork?255:a-b:0;}function createUpdateQueue(){var queue={first:null,last:null,hasForceUpdate:!1,callbackList:null};return queue.isProcessing=!1,queue;}function cloneUpdate(update){return{priorityLevel:update.priorityLevel,partialState:update.partialState,callback:update.callback,isReplace:update.isReplace,isForced:update.isForced,isTopLevelUnmount:update.isTopLevelUnmount,next:null};}function insertUpdateIntoQueue(queue,update,insertAfter,insertBefore){null!==insertAfter?insertAfter.next=update:(update.next=queue.first,queue.first=update),null!==insertBefore?update.next=insertBefore:queue.last=update;}function findInsertionPosition(queue,update){var priorityLevel=update.priorityLevel,insertAfter=null,insertBefore=null;if(null!==queue.last&&comparePriority(queue.last.priorityLevel,priorityLevel)<=0)insertAfter=queue.last;else for(insertBefore=queue.first;null!==insertBefore&&comparePriority(insertBefore.priorityLevel,priorityLevel)<=0;){insertAfter=insertBefore,insertBefore=insertBefore.next;}return insertAfter;}function ensureUpdateQueues(fiber){var alternateFiber=fiber.alternate,queue1=fiber.updateQueue;null===queue1&&(queue1=fiber.updateQueue=createUpdateQueue());var queue2=void 0;null!==alternateFiber?null===(queue2=alternateFiber.updateQueue)&&(queue2=alternateFiber.updateQueue=createUpdateQueue()):queue2=null,_queue1=queue1,_queue2=queue2!==queue1?queue2:null;}function insertUpdate(fiber,update){ensureUpdateQueues(fiber);var queue1=_queue1,queue2=_queue2;(queue1.isProcessing||null!==queue2&&queue2.isProcessing)&&warning$2(!1,"An update (setState, replaceState, or forceUpdate) was scheduled "+"from inside an update function. Update functions should be pure, "+"with zero side-effects. Consider using componentDidUpdate or a "+"callback.");var insertAfter1=findInsertionPosition(queue1,update),insertBefore1=null!==insertAfter1?insertAfter1.next:queue1.first;if(null===queue2)return insertUpdateIntoQueue(queue1,update,insertAfter1,insertBefore1),null;var insertAfter2=findInsertionPosition(queue2,update),insertBefore2=null!==insertAfter2?insertAfter2.next:queue2.first;if(insertUpdateIntoQueue(queue1,update,insertAfter1,insertBefore1),insertBefore1===insertBefore2&&null!==insertBefore1||insertAfter1===insertAfter2&&null!==insertAfter1)return null===insertAfter2&&(queue2.first=update),null===insertBefore2&&(queue2.last=null),null;var update2=cloneUpdate(update);return insertUpdateIntoQueue(queue2,update2,insertAfter2,insertBefore2),update2;}function addUpdate(fiber,partialState,callback,priorityLevel){insertUpdate(fiber,{priorityLevel:priorityLevel,partialState:partialState,callback:callback,isReplace:!1,isForced:!1,isTopLevelUnmount:!1,next:null});}var addUpdate_1=addUpdate;function addReplaceUpdate(fiber,state,callback,priorityLevel){insertUpdate(fiber,{priorityLevel:priorityLevel,partialState:state,callback:callback,isReplace:!0,isForced:!1,isTopLevelUnmount:!1,next:null});}var addReplaceUpdate_1=addReplaceUpdate;function addForceUpdate(fiber,callback,priorityLevel){insertUpdate(fiber,{priorityLevel:priorityLevel,partialState:null,callback:callback,isReplace:!1,isForced:!0,isTopLevelUnmount:!1,next:null});}var addForceUpdate_1=addForceUpdate;function getUpdatePriority(fiber){var updateQueue=fiber.updateQueue;return null===updateQueue?NoWork:fiber.tag!==ClassComponent&&fiber.tag!==HostRoot?NoWork:null!==updateQueue.first?updateQueue.first.priorityLevel:NoWork;}var getUpdatePriority_1=getUpdatePriority;function addTopLevelUpdate$1(fiber,partialState,callback,priorityLevel){var isTopLevelUnmount=null===partialState.element,update={priorityLevel:priorityLevel,partialState:partialState,callback:callback,isReplace:!1,isForced:!1,isTopLevelUnmount:isTopLevelUnmount,next:null},update2=insertUpdate(fiber,update);if(isTopLevelUnmount){var queue1=_queue1,queue2=_queue2;null!==queue1&&null!==update.next&&(update.next=null,queue1.last=update),null!==queue2&&null!==update2&&null!==update2.next&&(update2.next=null,queue2.last=update);}}var addTopLevelUpdate_1=addTopLevelUpdate$1;function getStateFromUpdate(update,instance,prevState,props){var partialState=update.partialState;if("function"==typeof partialState){return partialState.call(instance,prevState,props);}return partialState;}function beginUpdateQueue(current,workInProgress,queue,instance,prevState,props,priorityLevel){if(null!==current&&current.updateQueue===queue){var currentQueue=queue;queue=workInProgress.updateQueue={first:currentQueue.first,last:currentQueue.last,callbackList:null,hasForceUpdate:!1};}queue.isProcessing=!0;for(var callbackList=queue.callbackList,hasForceUpdate=queue.hasForceUpdate,state=prevState,dontMutatePrevState=!0,update=queue.first;null!==update&&comparePriority(update.priorityLevel,priorityLevel)<=0;){queue.first=update.next,null===queue.first&&(queue.last=null);var _partialState=void 0;update.isReplace?(state=getStateFromUpdate(update,instance,state,props),dontMutatePrevState=!0):(_partialState=getStateFromUpdate(update,instance,state,props))&&(state=dontMutatePrevState?_extends({},state,_partialState):_extends(state,_partialState),dontMutatePrevState=!1),update.isForced&&(hasForceUpdate=!0),null===update.callback||update.isTopLevelUnmount&&null!==update.next||(callbackList=null!==callbackList?callbackList:[],callbackList.push(update.callback),workInProgress.effectTag|=CallbackEffect),update=update.next;}return queue.callbackList=callbackList,queue.hasForceUpdate=hasForceUpdate,null!==queue.first||null!==callbackList||hasForceUpdate||(workInProgress.updateQueue=null),queue.isProcessing=!1,state;}var beginUpdateQueue_1=beginUpdateQueue;function commitCallbacks(finishedWork,queue,context){var callbackList=queue.callbackList;if(null!==callbackList){queue.callbackList=null;for(var i=0;i<callbackList.length;i++){var _callback=callbackList[i];invariant("function"==typeof _callback,"Invalid argument passed as callback. Expected a function. Instead "+"received: %s",_callback),_callback.call(context);}}}var commitCallbacks_1=commitCallbacks,ReactFiberUpdateQueue={addUpdate:addUpdate_1,addReplaceUpdate:addReplaceUpdate_1,addForceUpdate:addForceUpdate_1,getUpdatePriority:getUpdatePriority_1,addTopLevelUpdate:addTopLevelUpdate_1,beginUpdateQueue:beginUpdateQueue_1,commitCallbacks:commitCallbacks_1};function getComponentName$1(fiber){var type=fiber.type;return"string"==typeof type?type:"function"==typeof type?type.displayName||type.name:null;}var getComponentName_1=getComponentName$1,ReactInstanceMap={remove:function remove(key){key._reactInternalFiber=void 0;},get:function get(key){return key._reactInternalFiber;},has:function has(key){return void 0!==key._reactInternalFiber;},set:function set(key,value){key._reactInternalFiber=value;}},ReactInstanceMap_1=ReactInstanceMap,ReactInternals=react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ReactGlobalSharedState={ReactCurrentOwner:ReactInternals.ReactCurrentOwner};_extends(ReactGlobalSharedState,{ReactDebugCurrentFrame:ReactInternals.ReactDebugCurrentFrame});var ReactGlobalSharedState_1=ReactGlobalSharedState,ReactCurrentOwner=ReactGlobalSharedState_1.ReactCurrentOwner,warning$4=require$$0,ClassComponent$2=ReactTypeOfWork.ClassComponent,HostComponent$1=ReactTypeOfWork.HostComponent,HostRoot$2=ReactTypeOfWork.HostRoot,HostPortal=ReactTypeOfWork.HostPortal,HostText=ReactTypeOfWork.HostText,NoEffect=ReactTypeOfSideEffect.NoEffect,Placement=ReactTypeOfSideEffect.Placement,MOUNTING=1,MOUNTED=2,UNMOUNTED=3;function isFiberMountedImpl(fiber){var node=fiber;if(fiber.alternate)for(;node.return;){node=node.return;}else{if((node.effectTag&Placement)!==NoEffect)return MOUNTING;for(;node.return;){if(node=node.return,(node.effectTag&Placement)!==NoEffect)return MOUNTING;}}return node.tag===HostRoot$2?MOUNTED:UNMOUNTED;}var isFiberMounted$1=function isFiberMounted$1(fiber){return isFiberMountedImpl(fiber)===MOUNTED;},isMounted=function isMounted(component){var owner=ReactCurrentOwner.current;if(null!==owner&&owner.tag===ClassComponent$2){var ownerFiber=owner,instance=ownerFiber.stateNode;warning$4(instance._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. "+"render() should be a pure function of props and state. It should "+"never access something that requires stale data from the previous "+"render, such as refs. Move this logic to componentDidMount and "+"componentDidUpdate instead.",getComponentName_1(ownerFiber)||"A component"),instance._warnedAboutRefsInRender=!0;}var fiber=ReactInstanceMap_1.get(component);return!!fiber&&isFiberMountedImpl(fiber)===MOUNTED;};function assertIsMounted(fiber){invariant(isFiberMountedImpl(fiber)===MOUNTED,"Unable to find node on an unmounted component.");}function findCurrentFiberUsingSlowPath(fiber){var alternate=fiber.alternate;if(!alternate){var state=isFiberMountedImpl(fiber);return invariant(state!==UNMOUNTED,"Unable to find node on an unmounted component."),state===MOUNTING?null:fiber;}for(var a=fiber,b=alternate;!0;){var parentA=a.return,parentB=parentA?parentA.alternate:null;if(!parentA||!parentB)break;if(parentA.child===parentB.child){for(var child=parentA.child;child;){if(child===a)return assertIsMounted(parentA),fiber;if(child===b)return assertIsMounted(parentA),alternate;child=child.sibling;}invariant(!1,"Unable to find node on an unmounted component.");}if(a.return!==b.return)a=parentA,b=parentB;else{for(var didFindChild=!1,_child=parentA.child;_child;){if(_child===a){didFindChild=!0,a=parentA,b=parentB;break;}if(_child===b){didFindChild=!0,b=parentA,a=parentB;break;}_child=_child.sibling;}if(!didFindChild){for(_child=parentB.child;_child;){if(_child===a){didFindChild=!0,a=parentB,b=parentA;break;}if(_child===b){didFindChild=!0,b=parentB,a=parentA;break;}_child=_child.sibling;}invariant(didFindChild,"Child was not found in either parent set. This indicates a bug "+"in React related to the return pointer. Please file an issue.");}}invariant(a.alternate===b,"Return fibers should always be each others' alternates. "+"This error is likely caused by a bug in React. Please file an issue.");}return invariant(a.tag===HostRoot$2,"Unable to find node on an unmounted component."),a.stateNode.current===a?fiber:alternate;}var findCurrentFiberUsingSlowPath_1=findCurrentFiberUsingSlowPath,findCurrentHostFiber$1=function findCurrentHostFiber$1(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent)return null;for(var node=currentParent;!0;){if(node.tag===HostComponent$1||node.tag===HostText)return node;if(node.child)node.child.return=node,node=node.child;else{if(node===currentParent)return null;for(;!node.sibling;){if(!node.return||node.return===currentParent)return null;node=node.return;}node.sibling.return=node.return,node=node.sibling;}}return null;},findCurrentHostFiberWithNoPortals$1=function findCurrentHostFiberWithNoPortals$1(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent)return null;for(var node=currentParent;!0;){if(node.tag===HostComponent$1||node.tag===HostText)return node;if(node.child&&node.tag!==HostPortal)node.child.return=node,node=node.child;else{if(node===currentParent)return null;for(;!node.sibling;){if(!node.return||node.return===currentParent)return null;node=node.return;}node.sibling.return=node.return,node=node.sibling;}}return null;},ReactFiberTreeReflection={isFiberMounted:isFiberMounted$1,isMounted:isMounted,findCurrentFiberUsingSlowPath:findCurrentFiberUsingSlowPath_1,findCurrentHostFiber:findCurrentHostFiber$1,findCurrentHostFiberWithNoPortals:findCurrentHostFiberWithNoPortals$1},warning$5=require$$0,valueStack=[],fiberStack=[],index=-1,createCursor$1=function createCursor$1(defaultValue){return{current:defaultValue};},isEmpty=function isEmpty(){return-1===index;},pop$1=function pop$1(cursor,fiber){if(index<0)return void warning$5(!1,"Unexpected pop.");fiber!==fiberStack[index]&&warning$5(!1,"Unexpected Fiber popped."),cursor.current=valueStack[index],valueStack[index]=null,fiberStack[index]=null,index--;},push$1=function push$1(cursor,value,fiber){index++,valueStack[index]=cursor.current,fiberStack[index]=fiber,cursor.current=value;},reset=function reset(){for(;index>-1;){valueStack[index]=null,fiberStack[index]=null,index--;}},ReactFiberStack={createCursor:createCursor$1,isEmpty:isEmpty,pop:pop$1,push:push$1,reset:reset},describeComponentFrame=function describeComponentFrame(name,source,ownerName){return"\n    in "+(name||"Unknown")+(source?" (at "+source.fileName.replace(/^.*[\\\/]/,"")+":"+source.lineNumber+")":ownerName?" (created by "+ownerName+")":"");},IndeterminateComponent=ReactTypeOfWork.IndeterminateComponent,FunctionalComponent=ReactTypeOfWork.FunctionalComponent,ClassComponent$3=ReactTypeOfWork.ClassComponent,HostComponent$2=ReactTypeOfWork.HostComponent;function describeFiber(fiber){switch(fiber.tag){case IndeterminateComponent:case FunctionalComponent:case ClassComponent$3:case HostComponent$2:var owner=fiber._debugOwner,source=fiber._debugSource,name=getComponentName_1(fiber),ownerName=null;return owner&&(ownerName=getComponentName_1(owner)),describeComponentFrame(name,source,ownerName);default:return"";}}function getStackAddendumByWorkInProgressFiber$1(workInProgress){var info="",node=workInProgress;do{info+=describeFiber(node),node=node.return;}while(node);return info;}var ReactFiberComponentTreeHook={getStackAddendumByWorkInProgressFiber:getStackAddendumByWorkInProgressFiber$1},ReactDebugCurrentFrame=ReactGlobalSharedState_1.ReactDebugCurrentFrame,getComponentName$3=getComponentName_1,_require2$1=ReactFiberComponentTreeHook,getStackAddendumByWorkInProgressFiber=_require2$1.getStackAddendumByWorkInProgressFiber;function getCurrentFiberOwnerName(){var fiber=ReactDebugCurrentFiber$2.current;if(null===fiber)return null;var owner=fiber._debugOwner;return null!==owner&&void 0!==owner?getComponentName$3(owner):null;}function getCurrentFiberStackAddendum(){var fiber=ReactDebugCurrentFiber$2.current;return null===fiber?null:getStackAddendumByWorkInProgressFiber(fiber);}function resetCurrentFiber(){ReactDebugCurrentFrame.getCurrentStack=null,ReactDebugCurrentFiber$2.current=null,ReactDebugCurrentFiber$2.phase=null;}function setCurrentFiber(fiber){ReactDebugCurrentFrame.getCurrentStack=getCurrentFiberStackAddendum,ReactDebugCurrentFiber$2.current=fiber,ReactDebugCurrentFiber$2.phase=null;}function setCurrentPhase(phase){ReactDebugCurrentFiber$2.phase=phase;}var ReactDebugCurrentFiber$2={current:null,phase:null,resetCurrentFiber:resetCurrentFiber,setCurrentFiber:setCurrentFiber,setCurrentPhase:setCurrentPhase,getCurrentFiberOwnerName:getCurrentFiberOwnerName,getCurrentFiberStackAddendum:getCurrentFiberStackAddendum},ReactDebugCurrentFiber_1=ReactDebugCurrentFiber$2,ReactDebugFiberPerf=null,_require$2=ReactTypeOfWork,HostRoot$3=_require$2.HostRoot,HostComponent$3=_require$2.HostComponent,HostText$1=_require$2.HostText,HostPortal$1=_require$2.HostPortal,YieldComponent=_require$2.YieldComponent,Fragment=_require$2.Fragment,getComponentName$4=getComponentName_1,reactEmoji="⚛",warningEmoji="⛔",supportsUserTiming="undefined"!=typeof performance&&"function"==typeof performance.mark&&"function"==typeof performance.clearMarks&&"function"==typeof performance.measure&&"function"==typeof performance.clearMeasures,currentFiber=null,currentPhase=null,currentPhaseFiber=null,isCommitting=!1,hasScheduledUpdateInCurrentCommit=!1,hasScheduledUpdateInCurrentPhase=!1,commitCountInCurrentWorkLoop=0,effectCountInCurrentCommit=0,labelsInCurrentCommit=new Set(),formatMarkName=function formatMarkName(markName){return reactEmoji+" "+markName;},formatLabel=function formatLabel(label,warning){return(warning?warningEmoji+" ":reactEmoji+" ")+label+(warning?" Warning: "+warning:"");},beginMark=function beginMark(markName){performance.mark(formatMarkName(markName));},clearMark=function clearMark(markName){performance.clearMarks(formatMarkName(markName));},endMark=function endMark(label,markName,warning){var formattedMarkName=formatMarkName(markName),formattedLabel=formatLabel(label,warning);try{performance.measure(formattedLabel,formattedMarkName);}catch(err){}performance.clearMarks(formattedMarkName),performance.clearMeasures(formattedLabel);},getFiberMarkName=function getFiberMarkName(label,debugID){return label+" (#"+debugID+")";},getFiberLabel=function getFiberLabel(componentName,isMounted,phase){return null===phase?componentName+" ["+(isMounted?"update":"mount")+"]":componentName+"."+phase;},beginFiberMark=function beginFiberMark(fiber,phase){var componentName=getComponentName$4(fiber)||"Unknown",debugID=fiber._debugID,isMounted=null!==fiber.alternate,label=getFiberLabel(componentName,isMounted,phase);if(isCommitting&&labelsInCurrentCommit.has(label))return!1;labelsInCurrentCommit.add(label);var markName=getFiberMarkName(label,debugID);return beginMark(markName),!0;},clearFiberMark=function clearFiberMark(fiber,phase){var componentName=getComponentName$4(fiber)||"Unknown",debugID=fiber._debugID,isMounted=null!==fiber.alternate,label=getFiberLabel(componentName,isMounted,phase),markName=getFiberMarkName(label,debugID);clearMark(markName);},endFiberMark=function endFiberMark(fiber,phase,warning){var componentName=getComponentName$4(fiber)||"Unknown",debugID=fiber._debugID,isMounted=null!==fiber.alternate,label=getFiberLabel(componentName,isMounted,phase),markName=getFiberMarkName(label,debugID);endMark(label,markName,warning);},shouldIgnoreFiber=function shouldIgnoreFiber(fiber){switch(fiber.tag){case HostRoot$3:case HostComponent$3:case HostText$1:case HostPortal$1:case YieldComponent:case Fragment:return!0;default:return!1;}},clearPendingPhaseMeasurement=function clearPendingPhaseMeasurement(){null!==currentPhase&&null!==currentPhaseFiber&&clearFiberMark(currentPhaseFiber,currentPhase),currentPhaseFiber=null,currentPhase=null,hasScheduledUpdateInCurrentPhase=!1;},pauseTimers=function pauseTimers(){for(var fiber=currentFiber;fiber;){fiber._debugIsCurrentlyTiming&&endFiberMark(fiber,null,null),fiber=fiber.return;}},resumeTimersRecursively=function resumeTimersRecursively(fiber){null!==fiber.return&&resumeTimersRecursively(fiber.return),fiber._debugIsCurrentlyTiming&&beginFiberMark(fiber,null);},resumeTimers=function resumeTimers(){null!==currentFiber&&resumeTimersRecursively(currentFiber);};ReactDebugFiberPerf={recordEffect:function recordEffect(){effectCountInCurrentCommit++;},recordScheduleUpdate:function recordScheduleUpdate(){isCommitting&&(hasScheduledUpdateInCurrentCommit=!0),null!==currentPhase&&"componentWillMount"!==currentPhase&&"componentWillReceiveProps"!==currentPhase&&(hasScheduledUpdateInCurrentPhase=!0);},startWorkTimer:function startWorkTimer(fiber){supportsUserTiming&&!shouldIgnoreFiber(fiber)&&(currentFiber=fiber,beginFiberMark(fiber,null)&&(fiber._debugIsCurrentlyTiming=!0));},cancelWorkTimer:function cancelWorkTimer(fiber){supportsUserTiming&&!shouldIgnoreFiber(fiber)&&(fiber._debugIsCurrentlyTiming=!1,clearFiberMark(fiber,null));},stopWorkTimer:function stopWorkTimer(fiber){supportsUserTiming&&!shouldIgnoreFiber(fiber)&&(currentFiber=fiber.return,fiber._debugIsCurrentlyTiming&&(fiber._debugIsCurrentlyTiming=!1,endFiberMark(fiber,null,null)));},stopFailedWorkTimer:function stopFailedWorkTimer(fiber){if(supportsUserTiming&&!shouldIgnoreFiber(fiber)&&(currentFiber=fiber.return,fiber._debugIsCurrentlyTiming)){fiber._debugIsCurrentlyTiming=!1;endFiberMark(fiber,null,"An error was thrown inside this error boundary");}},startPhaseTimer:function startPhaseTimer(fiber,phase){supportsUserTiming&&(clearPendingPhaseMeasurement(),beginFiberMark(fiber,phase)&&(currentPhaseFiber=fiber,currentPhase=phase));},stopPhaseTimer:function stopPhaseTimer(){if(supportsUserTiming){if(null!==currentPhase&&null!==currentPhaseFiber){endFiberMark(currentPhaseFiber,currentPhase,hasScheduledUpdateInCurrentPhase?"Scheduled a cascading update":null);}currentPhase=null,currentPhaseFiber=null;}},startWorkLoopTimer:function startWorkLoopTimer(){supportsUserTiming&&(commitCountInCurrentWorkLoop=0,beginMark("(React Tree Reconciliation)"),resumeTimers());},stopWorkLoopTimer:function stopWorkLoopTimer(){if(supportsUserTiming){var warning=commitCountInCurrentWorkLoop>1?"There were cascading updates":null;commitCountInCurrentWorkLoop=0,pauseTimers(),endMark("(React Tree Reconciliation)","(React Tree Reconciliation)",warning);}},startCommitTimer:function startCommitTimer(){supportsUserTiming&&(isCommitting=!0,hasScheduledUpdateInCurrentCommit=!1,labelsInCurrentCommit.clear(),beginMark("(Committing Changes)"));},stopCommitTimer:function stopCommitTimer(){if(supportsUserTiming){var warning=null;hasScheduledUpdateInCurrentCommit?warning="Lifecycle hook scheduled a cascading update":commitCountInCurrentWorkLoop>0&&(warning="Caused by a cascading update in earlier commit"),hasScheduledUpdateInCurrentCommit=!1,commitCountInCurrentWorkLoop++,isCommitting=!1,labelsInCurrentCommit.clear(),endMark("(Committing Changes)","(Committing Changes)",warning);}},startCommitHostEffectsTimer:function startCommitHostEffectsTimer(){supportsUserTiming&&(effectCountInCurrentCommit=0,beginMark("(Committing Host Effects)"));},stopCommitHostEffectsTimer:function stopCommitHostEffectsTimer(){if(supportsUserTiming){var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0,endMark("(Committing Host Effects: "+count+" Total)","(Committing Host Effects)",null);}},startCommitLifeCyclesTimer:function startCommitLifeCyclesTimer(){supportsUserTiming&&(effectCountInCurrentCommit=0,beginMark("(Calling Lifecycle Methods)"));},stopCommitLifeCyclesTimer:function stopCommitLifeCyclesTimer(){if(supportsUserTiming){var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0,endMark("(Calling Lifecycle Methods: "+count+" Total)","(Calling Lifecycle Methods)",null);}}};var ReactDebugFiberPerf_1=ReactDebugFiberPerf,isFiberMounted=ReactFiberTreeReflection.isFiberMounted,ClassComponent$1=ReactTypeOfWork.ClassComponent,HostRoot$1=ReactTypeOfWork.HostRoot,createCursor=ReactFiberStack.createCursor,pop=ReactFiberStack.pop,push=ReactFiberStack.push,warning$3=require$$0,checkPropTypes$1=checkPropTypes,ReactDebugCurrentFiber$1=ReactDebugCurrentFiber_1,_require4=ReactDebugFiberPerf_1,startPhaseTimer=_require4.startPhaseTimer,stopPhaseTimer=_require4.stopPhaseTimer,warnedAboutMissingGetChildContext={},contextStackCursor=createCursor(emptyObject),didPerformWorkStackCursor=createCursor(!1),previousContext=emptyObject;function getUnmaskedContext(workInProgress){return isContextProvider$1(workInProgress)?previousContext:contextStackCursor.current;}var getUnmaskedContext_1=getUnmaskedContext;function cacheContext(workInProgress,unmaskedContext,maskedContext){var instance=workInProgress.stateNode;instance.__reactInternalMemoizedUnmaskedChildContext=unmaskedContext,instance.__reactInternalMemoizedMaskedChildContext=maskedContext;}var cacheContext_1=cacheContext,getMaskedContext=function getMaskedContext(workInProgress,unmaskedContext){var type=workInProgress.type,contextTypes=type.contextTypes;if(!contextTypes)return emptyObject;var instance=workInProgress.stateNode;if(instance&&instance.__reactInternalMemoizedUnmaskedChildContext===unmaskedContext)return instance.__reactInternalMemoizedMaskedChildContext;var context={};for(var key in contextTypes){context[key]=unmaskedContext[key];}var name=getComponentName_1(workInProgress)||"Unknown";return checkPropTypes$1(contextTypes,context,"context",name,ReactDebugCurrentFiber$1.getCurrentFiberStackAddendum),instance&&cacheContext(workInProgress,unmaskedContext,context),context;},hasContextChanged=function hasContextChanged(){return didPerformWorkStackCursor.current;};function isContextConsumer(fiber){return fiber.tag===ClassComponent$1&&null!=fiber.type.contextTypes;}var isContextConsumer_1=isContextConsumer;function isContextProvider$1(fiber){return fiber.tag===ClassComponent$1&&null!=fiber.type.childContextTypes;}var isContextProvider_1=isContextProvider$1;function popContextProvider(fiber){isContextProvider$1(fiber)&&(pop(didPerformWorkStackCursor,fiber),pop(contextStackCursor,fiber));}var popContextProvider_1=popContextProvider,popTopLevelContextObject=function popTopLevelContextObject(fiber){pop(didPerformWorkStackCursor,fiber),pop(contextStackCursor,fiber);},pushTopLevelContextObject=function pushTopLevelContextObject(fiber,context,didChange){invariant(null==contextStackCursor.cursor,"Unexpected context found on stack. "+"This error is likely caused by a bug in React. Please file an issue."),push(contextStackCursor,context,fiber),push(didPerformWorkStackCursor,didChange,fiber);};function processChildContext$1(fiber,parentContext){var instance=fiber.stateNode,childContextTypes=fiber.type.childContextTypes;if("function"!=typeof instance.getChildContext){var componentName=getComponentName_1(fiber)||"Unknown";return warnedAboutMissingGetChildContext[componentName]||(warnedAboutMissingGetChildContext[componentName]=!0,warning$3(!1,"%s.childContextTypes is specified but there is no getChildContext() method "+"on the instance. You can either define getChildContext() on %s or remove "+"childContextTypes from it.",componentName,componentName)),parentContext;}var childContext=void 0;ReactDebugCurrentFiber$1.setCurrentPhase("getChildContext"),startPhaseTimer(fiber,"getChildContext"),childContext=instance.getChildContext(),stopPhaseTimer(),ReactDebugCurrentFiber$1.setCurrentPhase(null);for(var contextKey in childContext){invariant(contextKey in childContextTypes,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',getComponentName_1(fiber)||"Unknown",contextKey);}var name=getComponentName_1(fiber)||"Unknown";return checkPropTypes$1(childContextTypes,childContext,"child context",name,ReactDebugCurrentFiber$1.getCurrentFiberStackAddendum),_extends({},parentContext,childContext);}var processChildContext_1=processChildContext$1,pushContextProvider=function pushContextProvider(workInProgress){if(!isContextProvider$1(workInProgress))return!1;var instance=workInProgress.stateNode,memoizedMergedChildContext=instance&&instance.__reactInternalMemoizedMergedChildContext||emptyObject;return previousContext=contextStackCursor.current,push(contextStackCursor,memoizedMergedChildContext,workInProgress),push(didPerformWorkStackCursor,didPerformWorkStackCursor.current,workInProgress),!0;},invalidateContextProvider=function invalidateContextProvider(workInProgress,didChange){var instance=workInProgress.stateNode;if(invariant(instance,"Expected to have an instance by this point. "+"This error is likely caused by a bug in React. Please file an issue."),didChange){var mergedContext=processChildContext$1(workInProgress,previousContext);instance.__reactInternalMemoizedMergedChildContext=mergedContext,pop(didPerformWorkStackCursor,workInProgress),pop(contextStackCursor,workInProgress),push(contextStackCursor,mergedContext,workInProgress),push(didPerformWorkStackCursor,didChange,workInProgress);}else pop(didPerformWorkStackCursor,workInProgress),push(didPerformWorkStackCursor,didChange,workInProgress);},resetContext=function resetContext(){previousContext=emptyObject,contextStackCursor.current=emptyObject,didPerformWorkStackCursor.current=!1;},findCurrentUnmaskedContext$1=function findCurrentUnmaskedContext$1(fiber){invariant(isFiberMounted(fiber)&&fiber.tag===ClassComponent$1,"Expected subtree parent to be a mounted class component. "+"This error is likely caused by a bug in React. Please file an issue.");for(var node=fiber;node.tag!==HostRoot$1;){if(isContextProvider$1(node))return node.stateNode.__reactInternalMemoizedMergedChildContext;var parent=node.return;invariant(parent,"Found unexpected detached subtree parent. "+"This error is likely caused by a bug in React. Please file an issue."),node=parent;}return node.stateNode.context;},ReactFiberContext={getUnmaskedContext:getUnmaskedContext_1,cacheContext:cacheContext_1,getMaskedContext:getMaskedContext,hasContextChanged:hasContextChanged,isContextConsumer:isContextConsumer_1,isContextProvider:isContextProvider_1,popContextProvider:popContextProvider_1,popTopLevelContextObject:popTopLevelContextObject,pushTopLevelContextObject:pushTopLevelContextObject,processChildContext:processChildContext_1,pushContextProvider:pushContextProvider,invalidateContextProvider:invalidateContextProvider,resetContext:resetContext,findCurrentUnmaskedContext:findCurrentUnmaskedContext$1},ReactTypeOfInternalContext={NoContext:0,AsyncUpdates:1},IndeterminateComponent$1=ReactTypeOfWork.IndeterminateComponent,ClassComponent$4=ReactTypeOfWork.ClassComponent,HostRoot$4=ReactTypeOfWork.HostRoot,HostComponent$4=ReactTypeOfWork.HostComponent,HostText$2=ReactTypeOfWork.HostText,HostPortal$2=ReactTypeOfWork.HostPortal,CoroutineComponent=ReactTypeOfWork.CoroutineComponent,YieldComponent$1=ReactTypeOfWork.YieldComponent,Fragment$1=ReactTypeOfWork.Fragment,NoWork$1=ReactPriorityLevel.NoWork,NoContext=ReactTypeOfInternalContext.NoContext,NoEffect$1=ReactTypeOfSideEffect.NoEffect,getComponentName$5=getComponentName_1,hasBadMapPolyfill=!1;try{var nonExtensibleObject=Object.preventExtensions({});new Map([[nonExtensibleObject,null]]),new Set([nonExtensibleObject]);}catch(e){hasBadMapPolyfill=!0;}var debugCounter=1;function FiberNode(tag,key,internalContextTag){this.tag=tag,this.key=key,this.type=null,this.stateNode=null,this.return=null,this.child=null,this.sibling=null,this.index=0,this.ref=null,this.pendingProps=null,this.memoizedProps=null,this.updateQueue=null,this.memoizedState=null,this.internalContextTag=internalContextTag,this.effectTag=NoEffect$1,this.nextEffect=null,this.firstEffect=null,this.lastEffect=null,this.pendingWorkPriority=NoWork$1,this.alternate=null,this._debugID=debugCounter++,this._debugSource=null,this._debugOwner=null,this._debugIsCurrentlyTiming=!1,hasBadMapPolyfill||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this);}var createFiber=function createFiber(tag,key,internalContextTag){return new FiberNode(tag,key,internalContextTag);};function shouldConstruct(Component){return!(!Component.prototype||!Component.prototype.isReactComponent);}var createWorkInProgress=function createWorkInProgress(current,renderPriority){var workInProgress=current.alternate;return null===workInProgress?(workInProgress=createFiber(current.tag,current.key,current.internalContextTag),workInProgress.type=current.type,workInProgress.stateNode=current.stateNode,workInProgress._debugID=current._debugID,workInProgress._debugSource=current._debugSource,workInProgress._debugOwner=current._debugOwner,workInProgress.alternate=current,current.alternate=workInProgress):(workInProgress.effectTag=NoEffect$1,workInProgress.nextEffect=null,workInProgress.firstEffect=null,workInProgress.lastEffect=null),workInProgress.pendingWorkPriority=renderPriority,workInProgress.child=current.child,workInProgress.memoizedProps=current.memoizedProps,workInProgress.memoizedState=current.memoizedState,workInProgress.updateQueue=current.updateQueue,workInProgress.sibling=current.sibling,workInProgress.index=current.index,workInProgress.ref=current.ref,workInProgress;},createHostRootFiber$1=function createHostRootFiber$1(){return createFiber(HostRoot$4,null,NoContext);},createFiberFromElement=function createFiberFromElement(element,internalContextTag,priorityLevel){var owner=null;owner=element._owner;var fiber=createFiberFromElementType(element.type,element.key,internalContextTag,owner);return fiber.pendingProps=element.props,fiber.pendingWorkPriority=priorityLevel,fiber._debugSource=element._source,fiber._debugOwner=element._owner,fiber;},createFiberFromFragment=function createFiberFromFragment(elements,internalContextTag,priorityLevel){var fiber=createFiber(Fragment$1,null,internalContextTag);return fiber.pendingProps=elements,fiber.pendingWorkPriority=priorityLevel,fiber;},createFiberFromText=function createFiberFromText(content,internalContextTag,priorityLevel){var fiber=createFiber(HostText$2,null,internalContextTag);return fiber.pendingProps=content,fiber.pendingWorkPriority=priorityLevel,fiber;};function createFiberFromElementType(type,key,internalContextTag,debugOwner){var fiber=void 0;if("function"==typeof type)fiber=shouldConstruct(type)?createFiber(ClassComponent$4,key,internalContextTag):createFiber(IndeterminateComponent$1,key,internalContextTag),fiber.type=type;else if("string"==typeof type)fiber=createFiber(HostComponent$4,key,internalContextTag),fiber.type=type;else if("object"==typeof type&&null!==type&&"number"==typeof type.tag)fiber=type;else{var info="";(void 0===type||"object"==typeof type&&null!==type&&0===Object.keys(type).length)&&(info+=" You likely forgot to export your component from the file "+"it's defined in.");var ownerName=debugOwner?getComponentName$5(debugOwner):null;ownerName&&(info+="\n\nCheck the render method of `"+ownerName+"`."),invariant(!1,"Element type is invalid: expected a string (for built-in components) "+"or a class/function (for composite components) but got: %s.%s",null==type?type:typeof type,info);}return fiber;}var REACT_COROUTINE_TYPE$1,REACT_YIELD_TYPE$1,createFiberFromElementType_1=createFiberFromElementType,createFiberFromHostInstanceForDeletion=function createFiberFromHostInstanceForDeletion(){var fiber=createFiber(HostComponent$4,null,NoContext);return fiber.type="DELETED",fiber;},createFiberFromCoroutine=function createFiberFromCoroutine(coroutine,internalContextTag,priorityLevel){var fiber=createFiber(CoroutineComponent,coroutine.key,internalContextTag);return fiber.type=coroutine.handler,fiber.pendingProps=coroutine,fiber.pendingWorkPriority=priorityLevel,fiber;},createFiberFromYield=function createFiberFromYield(yieldNode,internalContextTag,priorityLevel){return createFiber(YieldComponent$1,null,internalContextTag);},createFiberFromPortal=function createFiberFromPortal(portal,internalContextTag,priorityLevel){var fiber=createFiber(HostPortal$2,portal.key,internalContextTag);return fiber.pendingProps=portal.children||[],fiber.pendingWorkPriority=priorityLevel,fiber.stateNode={containerInfo:portal.containerInfo,implementation:portal.implementation},fiber;},largerPriority=function largerPriority(p1,p2){return p1!==NoWork$1&&(p2===NoWork$1||p2>p1)?p1:p2;},ReactFiber={createWorkInProgress:createWorkInProgress,createHostRootFiber:createHostRootFiber$1,createFiberFromElement:createFiberFromElement,createFiberFromFragment:createFiberFromFragment,createFiberFromText:createFiberFromText,createFiberFromElementType:createFiberFromElementType_1,createFiberFromHostInstanceForDeletion:createFiberFromHostInstanceForDeletion,createFiberFromCoroutine:createFiberFromCoroutine,createFiberFromYield:createFiberFromYield,createFiberFromPortal:createFiberFromPortal,largerPriority:largerPriority},createHostRootFiber=ReactFiber.createHostRootFiber,createFiberRoot$1=function createFiberRoot$1(containerInfo){var uninitializedFiber=createHostRootFiber(),root={current:uninitializedFiber,containerInfo:containerInfo,isScheduled:!1,nextScheduledRoot:null,context:null,pendingContext:null};return uninitializedFiber.stateNode=root,root;},ReactFiberRoot={createFiberRoot:createFiberRoot$1};"function"==typeof Symbol&&(typeof Symbol==="function"?Symbol.for:"@@for")?(REACT_COROUTINE_TYPE$1=(typeof Symbol==="function"?Symbol.for:"@@for")("react.coroutine"),REACT_YIELD_TYPE$1=(typeof Symbol==="function"?Symbol.for:"@@for")("react.yield")):(REACT_COROUTINE_TYPE$1=60104,REACT_YIELD_TYPE$1=60105);var createCoroutine=function createCoroutine(children,handler,props){var key=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,coroutine={$$typeof:REACT_COROUTINE_TYPE$1,key:null==key?null:""+key,children:children,handler:handler,props:props};return Object.freeze&&(Object.freeze(coroutine.props),Object.freeze(coroutine)),coroutine;},createYield=function createYield(value){var yieldNode={$$typeof:REACT_YIELD_TYPE$1,value:value};return Object.freeze&&Object.freeze(yieldNode),yieldNode;},isCoroutine=function isCoroutine(object){return"object"==typeof object&&null!==object&&object.$$typeof===REACT_COROUTINE_TYPE$1;},isYield=function isYield(object){return"object"==typeof object&&null!==object&&object.$$typeof===REACT_YIELD_TYPE$1;},REACT_YIELD_TYPE_1=REACT_YIELD_TYPE$1,REACT_COROUTINE_TYPE_1=REACT_COROUTINE_TYPE$1,ReactCoroutine={createCoroutine:createCoroutine,createYield:createYield,isCoroutine:isCoroutine,isYield:isYield,REACT_YIELD_TYPE:REACT_YIELD_TYPE_1,REACT_COROUTINE_TYPE:REACT_COROUTINE_TYPE_1},REACT_COROUTINE_TYPE=ReactCoroutine.REACT_COROUTINE_TYPE,REACT_YIELD_TYPE=ReactCoroutine.REACT_YIELD_TYPE,REACT_PORTAL_TYPE$1=ReactPortal.REACT_PORTAL_TYPE,_require3$2=ReactDebugCurrentFiber_1,getCurrentFiberStackAddendum$1=_require3$2.getCurrentFiberStackAddendum,warning$8=require$$0,didWarnAboutMaps=!1,ownerHasKeyUseWarning={},warnForMissingKey=function warnForMissingKey(child){if(null!==child&&"object"==typeof child&&child._store&&!child._store.validated&&null==child.key){invariant("object"==typeof child._store,"React Component in warnForMissingKey should have a _store. "+"This error is likely caused by a bug in React. Please file an issue."),child._store.validated=!0;var currentComponentErrorInfo="Each child in an array or iterator should have a unique "+'"key" prop. See https://fb.me/react-warning-keys for '+"more information."+(getCurrentFiberStackAddendum$1()||"");ownerHasKeyUseWarning[currentComponentErrorInfo]||(ownerHasKeyUseWarning[currentComponentErrorInfo]=!0,warning$8(!1,"Each child in an array or iterator should have a unique "+'"key" prop. See https://fb.me/react-warning-keys for '+"more information.%s",getCurrentFiberStackAddendum$1()));}},createWorkInProgress$2=ReactFiber.createWorkInProgress,createFiberFromElement$1=ReactFiber.createFiberFromElement,createFiberFromFragment$1=ReactFiber.createFiberFromFragment,createFiberFromText$1=ReactFiber.createFiberFromText,createFiberFromCoroutine$1=ReactFiber.createFiberFromCoroutine,createFiberFromYield$1=ReactFiber.createFiberFromYield,createFiberFromPortal$1=ReactFiber.createFiberFromPortal,isArray=Array.isArray,FunctionalComponent$2=ReactTypeOfWork.FunctionalComponent,ClassComponent$7=ReactTypeOfWork.ClassComponent,HostText$4=ReactTypeOfWork.HostText,HostPortal$5=ReactTypeOfWork.HostPortal,CoroutineComponent$2=ReactTypeOfWork.CoroutineComponent,YieldComponent$3=ReactTypeOfWork.YieldComponent,Fragment$3=ReactTypeOfWork.Fragment,NoEffect$2=ReactTypeOfSideEffect.NoEffect,Placement$3=ReactTypeOfSideEffect.Placement,Deletion$1=ReactTypeOfSideEffect.Deletion,ITERATOR_SYMBOL="function"==typeof Symbol&&(typeof Symbol==="function"?Symbol.iterator:"@@iterator"),REACT_ELEMENT_TYPE="function"==typeof Symbol&&(typeof Symbol==="function"?Symbol.for:"@@for")&&(typeof Symbol==="function"?Symbol.for:"@@for")("react.element")||60103;function getIteratorFn(maybeIterable){if(null===maybeIterable||void 0===maybeIterable)return null;var iteratorFn=ITERATOR_SYMBOL&&maybeIterable[ITERATOR_SYMBOL]||maybeIterable["@@iterator"];return"function"==typeof iteratorFn?iteratorFn:null;}function coerceRef(current,element){var mixedRef=element.ref;if(null!==mixedRef&&"function"!=typeof mixedRef){if(element._owner){var owner=element._owner,inst=void 0;if(owner){var ownerFiber=owner;invariant(ownerFiber.tag===ClassComponent$7,"Stateless function components cannot have refs."),inst=ownerFiber.stateNode;}invariant(inst,"Missing owner for string ref %s. This error is likely caused by a "+"bug in React. Please file an issue.",mixedRef);var stringRef=""+mixedRef;if(null!==current&&null!==current.ref&&current.ref._stringRef===stringRef)return current.ref;var ref=function ref(value){var refs=inst.refs===emptyObject?inst.refs={}:inst.refs;null===value?delete refs[stringRef]:refs[stringRef]=value;};return ref._stringRef=stringRef,ref;}invariant("string"==typeof mixedRef,"Expected ref to be a function or a string."),invariant(element._owner,"Element ref was specified as a string (%s) but no owner was "+"set. You may have multiple copies of React loaded. "+"(details: https://fb.me/react-refs-must-have-owner).",mixedRef);}return mixedRef;}function throwOnInvalidObjectType(returnFiber,newChild){if("textarea"!==returnFiber.type){var addendum="";addendum=" If you meant to render a collection of children, use an array "+"instead."+(getCurrentFiberStackAddendum$1()||""),invariant(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===Object.prototype.toString.call(newChild)?"object with keys {"+Object.keys(newChild).join(", ")+"}":newChild,addendum);}}function warnOnFunctionType(){warning$8(!1,"Functions are not valid as a React child. This may happen if "+"you return a Component instead of <Component /> from render. "+"Or maybe you meant to call this function rather than return it.%s",getCurrentFiberStackAddendum$1()||"");}function ChildReconciler(shouldClone,shouldTrackSideEffects){function deleteChild(returnFiber,childToDelete){if(shouldTrackSideEffects){if(!shouldClone){if(null===childToDelete.alternate)return;childToDelete=childToDelete.alternate;}var last=returnFiber.lastEffect;null!==last?(last.nextEffect=childToDelete,returnFiber.lastEffect=childToDelete):returnFiber.firstEffect=returnFiber.lastEffect=childToDelete,childToDelete.nextEffect=null,childToDelete.effectTag=Deletion$1;}}function deleteRemainingChildren(returnFiber,currentFirstChild){if(!shouldTrackSideEffects)return null;for(var childToDelete=currentFirstChild;null!==childToDelete;){deleteChild(returnFiber,childToDelete),childToDelete=childToDelete.sibling;}return null;}function mapRemainingChildren(returnFiber,currentFirstChild){for(var existingChildren=new Map(),existingChild=currentFirstChild;null!==existingChild;){null!==existingChild.key?existingChildren.set(existingChild.key,existingChild):existingChildren.set(existingChild.index,existingChild),existingChild=existingChild.sibling;}return existingChildren;}function useFiber(fiber,priority){if(shouldClone){var clone=createWorkInProgress$2(fiber,priority);return clone.index=0,clone.sibling=null,clone;}return fiber.pendingWorkPriority=priority,fiber.effectTag=NoEffect$2,fiber.index=0,fiber.sibling=null,fiber;}function placeChild(newFiber,lastPlacedIndex,newIndex){if(newFiber.index=newIndex,!shouldTrackSideEffects)return lastPlacedIndex;var current=newFiber.alternate;if(null!==current){var oldIndex=current.index;return oldIndex<lastPlacedIndex?(newFiber.effectTag=Placement$3,lastPlacedIndex):oldIndex;}return newFiber.effectTag=Placement$3,lastPlacedIndex;}function placeSingleChild(newFiber){return shouldTrackSideEffects&&null===newFiber.alternate&&(newFiber.effectTag=Placement$3),newFiber;}function updateTextNode(returnFiber,current,textContent,priority){if(null===current||current.tag!==HostText$4){var created=createFiberFromText$1(textContent,returnFiber.internalContextTag,priority);return created.return=returnFiber,created;}var existing=useFiber(current,priority);return existing.pendingProps=textContent,existing.return=returnFiber,existing;}function updateElement(returnFiber,current,element,priority){if(null===current||current.type!==element.type){var created=createFiberFromElement$1(element,returnFiber.internalContextTag,priority);return created.ref=coerceRef(current,element),created.return=returnFiber,created;}var existing=useFiber(current,priority);return existing.ref=coerceRef(current,element),existing.pendingProps=element.props,existing.return=returnFiber,existing._debugSource=element._source,existing._debugOwner=element._owner,existing;}function updateCoroutine(returnFiber,current,coroutine,priority){if(null===current||current.tag!==CoroutineComponent$2){var created=createFiberFromCoroutine$1(coroutine,returnFiber.internalContextTag,priority);return created.return=returnFiber,created;}var existing=useFiber(current,priority);return existing.pendingProps=coroutine,existing.return=returnFiber,existing;}function updateYield(returnFiber,current,yieldNode,priority){if(null===current||current.tag!==YieldComponent$3){var created=createFiberFromYield$1(yieldNode,returnFiber.internalContextTag,priority);return created.type=yieldNode.value,created.return=returnFiber,created;}var existing=useFiber(current,priority);return existing.type=yieldNode.value,existing.return=returnFiber,existing;}function updatePortal(returnFiber,current,portal,priority){if(null===current||current.tag!==HostPortal$5||current.stateNode.containerInfo!==portal.containerInfo||current.stateNode.implementation!==portal.implementation){var created=createFiberFromPortal$1(portal,returnFiber.internalContextTag,priority);return created.return=returnFiber,created;}var existing=useFiber(current,priority);return existing.pendingProps=portal.children||[],existing.return=returnFiber,existing;}function updateFragment(returnFiber,current,fragment,priority){if(null===current||current.tag!==Fragment$3){var created=createFiberFromFragment$1(fragment,returnFiber.internalContextTag,priority);return created.return=returnFiber,created;}var existing=useFiber(current,priority);return existing.pendingProps=fragment,existing.return=returnFiber,existing;}function createChild(returnFiber,newChild,priority){if("string"==typeof newChild||"number"==typeof newChild){var created=createFiberFromText$1(""+newChild,returnFiber.internalContextTag,priority);return created.return=returnFiber,created;}if("object"==typeof newChild&&null!==newChild){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:var _created=createFiberFromElement$1(newChild,returnFiber.internalContextTag,priority);return _created.ref=coerceRef(null,newChild),_created.return=returnFiber,_created;case REACT_COROUTINE_TYPE:var _created2=createFiberFromCoroutine$1(newChild,returnFiber.internalContextTag,priority);return _created2.return=returnFiber,_created2;case REACT_YIELD_TYPE:var _created3=createFiberFromYield$1(newChild,returnFiber.internalContextTag,priority);return _created3.type=newChild.value,_created3.return=returnFiber,_created3;case REACT_PORTAL_TYPE$1:var _created4=createFiberFromPortal$1(newChild,returnFiber.internalContextTag,priority);return _created4.return=returnFiber,_created4;}if(isArray(newChild)||getIteratorFn(newChild)){var _created5=createFiberFromFragment$1(newChild,returnFiber.internalContextTag,priority);return _created5.return=returnFiber,_created5;}throwOnInvalidObjectType(returnFiber,newChild);}return"function"==typeof newChild&&warnOnFunctionType(),null;}function updateSlot(returnFiber,oldFiber,newChild,priority){var key=null!==oldFiber?oldFiber.key:null;if("string"==typeof newChild||"number"==typeof newChild)return null!==key?null:updateTextNode(returnFiber,oldFiber,""+newChild,priority);if("object"==typeof newChild&&null!==newChild){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return newChild.key===key?updateElement(returnFiber,oldFiber,newChild,priority):null;case REACT_COROUTINE_TYPE:return newChild.key===key?updateCoroutine(returnFiber,oldFiber,newChild,priority):null;case REACT_YIELD_TYPE:return null===key?updateYield(returnFiber,oldFiber,newChild,priority):null;case REACT_PORTAL_TYPE$1:return newChild.key===key?updatePortal(returnFiber,oldFiber,newChild,priority):null;}if(isArray(newChild)||getIteratorFn(newChild))return null!==key?null:updateFragment(returnFiber,oldFiber,newChild,priority);throwOnInvalidObjectType(returnFiber,newChild);}return"function"==typeof newChild&&warnOnFunctionType(),null;}function updateFromMap(existingChildren,returnFiber,newIdx,newChild,priority){if("string"==typeof newChild||"number"==typeof newChild){return updateTextNode(returnFiber,existingChildren.get(newIdx)||null,""+newChild,priority);}if("object"==typeof newChild&&null!==newChild){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return updateElement(returnFiber,existingChildren.get(null===newChild.key?newIdx:newChild.key)||null,newChild,priority);case REACT_COROUTINE_TYPE:return updateCoroutine(returnFiber,existingChildren.get(null===newChild.key?newIdx:newChild.key)||null,newChild,priority);case REACT_YIELD_TYPE:return updateYield(returnFiber,existingChildren.get(newIdx)||null,newChild,priority);case REACT_PORTAL_TYPE$1:return updatePortal(returnFiber,existingChildren.get(null===newChild.key?newIdx:newChild.key)||null,newChild,priority);}if(isArray(newChild)||getIteratorFn(newChild)){return updateFragment(returnFiber,existingChildren.get(newIdx)||null,newChild,priority);}throwOnInvalidObjectType(returnFiber,newChild);}return"function"==typeof newChild&&warnOnFunctionType(),null;}function warnOnInvalidKey(child,knownKeys){if("object"!=typeof child||null===child)return knownKeys;switch(child.$$typeof){case REACT_ELEMENT_TYPE:case REACT_COROUTINE_TYPE:case REACT_PORTAL_TYPE$1:warnForMissingKey(child);var key=child.key;if("string"!=typeof key)break;if(null===knownKeys){knownKeys=new Set(),knownKeys.add(key);break;}if(!knownKeys.has(key)){knownKeys.add(key);break;}warning$8(!1,"Encountered two children with the same key, `%s`. "+"Keys should be unique so that components maintain their identity "+"across updates. Non-unique keys may cause children to be "+"duplicated and/or omitted — the behavior is unsupported and "+"could change in a future version.%s",key,getCurrentFiberStackAddendum$1());}return knownKeys;}function reconcileChildrenArray(returnFiber,currentFirstChild,newChildren,priority){for(var knownKeys=null,i=0;i<newChildren.length;i++){knownKeys=warnOnInvalidKey(newChildren[i],knownKeys);}for(var resultingFirstChild=null,previousNewFiber=null,oldFiber=currentFirstChild,lastPlacedIndex=0,newIdx=0,nextOldFiber=null;null!==oldFiber&&newIdx<newChildren.length;newIdx++){oldFiber.index>newIdx?(nextOldFiber=oldFiber,oldFiber=null):nextOldFiber=oldFiber.sibling;var newFiber=updateSlot(returnFiber,oldFiber,newChildren[newIdx],priority);if(null===newFiber){null===oldFiber&&(oldFiber=nextOldFiber);break;}shouldTrackSideEffects&&oldFiber&&null===newFiber.alternate&&deleteChild(returnFiber,oldFiber),lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx),null===previousNewFiber?resultingFirstChild=newFiber:previousNewFiber.sibling=newFiber,previousNewFiber=newFiber,oldFiber=nextOldFiber;}if(newIdx===newChildren.length)return deleteRemainingChildren(returnFiber,oldFiber),resultingFirstChild;if(null===oldFiber){for(;newIdx<newChildren.length;newIdx++){var _newFiber=createChild(returnFiber,newChildren[newIdx],priority);_newFiber&&(lastPlacedIndex=placeChild(_newFiber,lastPlacedIndex,newIdx),null===previousNewFiber?resultingFirstChild=_newFiber:previousNewFiber.sibling=_newFiber,previousNewFiber=_newFiber);}return resultingFirstChild;}for(var existingChildren=mapRemainingChildren(returnFiber,oldFiber);newIdx<newChildren.length;newIdx++){var _newFiber2=updateFromMap(existingChildren,returnFiber,newIdx,newChildren[newIdx],priority);_newFiber2&&(shouldTrackSideEffects&&null!==_newFiber2.alternate&&existingChildren.delete(null===_newFiber2.key?newIdx:_newFiber2.key),lastPlacedIndex=placeChild(_newFiber2,lastPlacedIndex,newIdx),null===previousNewFiber?resultingFirstChild=_newFiber2:previousNewFiber.sibling=_newFiber2,previousNewFiber=_newFiber2);}return shouldTrackSideEffects&&existingChildren.forEach(function(child){return deleteChild(returnFiber,child);}),resultingFirstChild;}function reconcileChildrenIterator(returnFiber,currentFirstChild,newChildrenIterable,priority){var iteratorFn=getIteratorFn(newChildrenIterable);if(invariant("function"==typeof iteratorFn,"An object is not an iterable. This error is likely caused by a bug in "+"React. Please file an issue."),"function"==typeof newChildrenIterable.entries){newChildrenIterable.entries===iteratorFn&&(warning$8(didWarnAboutMaps,"Using Maps as children is unsupported and will likely yield "+"unexpected results. Convert it to a sequence/iterable of keyed "+"ReactElements instead.%s",getCurrentFiberStackAddendum$1()),didWarnAboutMaps=!0);}var _newChildren=iteratorFn.call(newChildrenIterable);if(_newChildren)for(var knownKeys=null,_step=_newChildren.next();!_step.done;_step=_newChildren.next()){var child=_step.value;knownKeys=warnOnInvalidKey(child,knownKeys);}var newChildren=iteratorFn.call(newChildrenIterable);invariant(null!=newChildren,"An iterable object provided no iterator.");for(var resultingFirstChild=null,previousNewFiber=null,oldFiber=currentFirstChild,lastPlacedIndex=0,newIdx=0,nextOldFiber=null,step=newChildren.next();null!==oldFiber&&!step.done;newIdx++,step=newChildren.next()){oldFiber.index>newIdx?(nextOldFiber=oldFiber,oldFiber=null):nextOldFiber=oldFiber.sibling;var newFiber=updateSlot(returnFiber,oldFiber,step.value,priority);if(null===newFiber){oldFiber||(oldFiber=nextOldFiber);break;}shouldTrackSideEffects&&oldFiber&&null===newFiber.alternate&&deleteChild(returnFiber,oldFiber),lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx),null===previousNewFiber?resultingFirstChild=newFiber:previousNewFiber.sibling=newFiber,previousNewFiber=newFiber,oldFiber=nextOldFiber;}if(step.done)return deleteRemainingChildren(returnFiber,oldFiber),resultingFirstChild;if(null===oldFiber){for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber3=createChild(returnFiber,step.value,priority);null!==_newFiber3&&(lastPlacedIndex=placeChild(_newFiber3,lastPlacedIndex,newIdx),null===previousNewFiber?resultingFirstChild=_newFiber3:previousNewFiber.sibling=_newFiber3,previousNewFiber=_newFiber3);}return resultingFirstChild;}for(var existingChildren=mapRemainingChildren(returnFiber,oldFiber);!step.done;newIdx++,step=newChildren.next()){var _newFiber4=updateFromMap(existingChildren,returnFiber,newIdx,step.value,priority);null!==_newFiber4&&(shouldTrackSideEffects&&null!==_newFiber4.alternate&&existingChildren.delete(null===_newFiber4.key?newIdx:_newFiber4.key),lastPlacedIndex=placeChild(_newFiber4,lastPlacedIndex,newIdx),null===previousNewFiber?resultingFirstChild=_newFiber4:previousNewFiber.sibling=_newFiber4,previousNewFiber=_newFiber4);}return shouldTrackSideEffects&&existingChildren.forEach(function(child){return deleteChild(returnFiber,child);}),resultingFirstChild;}function reconcileSingleTextNode(returnFiber,currentFirstChild,textContent,priority){if(null!==currentFirstChild&&currentFirstChild.tag===HostText$4){deleteRemainingChildren(returnFiber,currentFirstChild.sibling);var existing=useFiber(currentFirstChild,priority);return existing.pendingProps=textContent,existing.return=returnFiber,existing;}deleteRemainingChildren(returnFiber,currentFirstChild);var created=createFiberFromText$1(textContent,returnFiber.internalContextTag,priority);return created.return=returnFiber,created;}function reconcileSingleElement(returnFiber,currentFirstChild,element,priority){for(var key=element.key,child=currentFirstChild;null!==child;){if(child.key===key){if(child.type===element.type){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,priority);return existing.ref=coerceRef(child,element),existing.pendingProps=element.props,existing.return=returnFiber,existing._debugSource=element._source,existing._debugOwner=element._owner,existing;}deleteRemainingChildren(returnFiber,child);break;}deleteChild(returnFiber,child),child=child.sibling;}var created=createFiberFromElement$1(element,returnFiber.internalContextTag,priority);return created.ref=coerceRef(currentFirstChild,element),created.return=returnFiber,created;}function reconcileSingleCoroutine(returnFiber,currentFirstChild,coroutine,priority){for(var key=coroutine.key,child=currentFirstChild;null!==child;){if(child.key===key){if(child.tag===CoroutineComponent$2){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,priority);return existing.pendingProps=coroutine,existing.return=returnFiber,existing;}deleteRemainingChildren(returnFiber,child);break;}deleteChild(returnFiber,child),child=child.sibling;}var created=createFiberFromCoroutine$1(coroutine,returnFiber.internalContextTag,priority);return created.return=returnFiber,created;}function reconcileSingleYield(returnFiber,currentFirstChild,yieldNode,priority){var child=currentFirstChild;if(null!==child){if(child.tag===YieldComponent$3){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,priority);return existing.type=yieldNode.value,existing.return=returnFiber,existing;}deleteRemainingChildren(returnFiber,child);}var created=createFiberFromYield$1(yieldNode,returnFiber.internalContextTag,priority);return created.type=yieldNode.value,created.return=returnFiber,created;}function reconcileSinglePortal(returnFiber,currentFirstChild,portal,priority){for(var key=portal.key,child=currentFirstChild;null!==child;){if(child.key===key){if(child.tag===HostPortal$5&&child.stateNode.containerInfo===portal.containerInfo&&child.stateNode.implementation===portal.implementation){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,priority);return existing.pendingProps=portal.children||[],existing.return=returnFiber,existing;}deleteRemainingChildren(returnFiber,child);break;}deleteChild(returnFiber,child),child=child.sibling;}var created=createFiberFromPortal$1(portal,returnFiber.internalContextTag,priority);return created.return=returnFiber,created;}function reconcileChildFibers(returnFiber,currentFirstChild,newChild,priority){var isObject="object"==typeof newChild&&null!==newChild;if(isObject)switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return placeSingleChild(reconcileSingleElement(returnFiber,currentFirstChild,newChild,priority));case REACT_COROUTINE_TYPE:return placeSingleChild(reconcileSingleCoroutine(returnFiber,currentFirstChild,newChild,priority));case REACT_YIELD_TYPE:return placeSingleChild(reconcileSingleYield(returnFiber,currentFirstChild,newChild,priority));case REACT_PORTAL_TYPE$1:return placeSingleChild(reconcileSinglePortal(returnFiber,currentFirstChild,newChild,priority));}if("string"==typeof newChild||"number"==typeof newChild)return placeSingleChild(reconcileSingleTextNode(returnFiber,currentFirstChild,""+newChild,priority));if(isArray(newChild))return reconcileChildrenArray(returnFiber,currentFirstChild,newChild,priority);if(getIteratorFn(newChild))return reconcileChildrenIterator(returnFiber,currentFirstChild,newChild,priority);if(isObject&&throwOnInvalidObjectType(returnFiber,newChild),"function"==typeof newChild&&warnOnFunctionType(),void 0===newChild)switch(returnFiber.tag){case ClassComponent$7:if(returnFiber.stateNode.render._isMockFunction)break;case FunctionalComponent$2:var Component=returnFiber.type;invariant(!1,"%s(...): Nothing was returned from render. This usually means a "+"return statement is missing. Or, to render nothing, "+"return null.",Component.displayName||Component.name||"Component");}return deleteRemainingChildren(returnFiber,currentFirstChild);}return reconcileChildFibers;}var reconcileChildFibers$1=ChildReconciler(!0,!0),reconcileChildFibersInPlace$1=ChildReconciler(!1,!0),mountChildFibersInPlace$1=ChildReconciler(!1,!1),cloneChildFibers$1=function cloneChildFibers$1(current,workInProgress){if(invariant(null===current||workInProgress.child===current.child,"Resuming work not yet implemented."),null!==workInProgress.child){var currentChild=workInProgress.child,newChild=createWorkInProgress$2(currentChild,currentChild.pendingWorkPriority);for(newChild.pendingProps=currentChild.pendingProps,workInProgress.child=newChild,newChild.return=workInProgress;null!==currentChild.sibling;){currentChild=currentChild.sibling,newChild=newChild.sibling=createWorkInProgress$2(currentChild,currentChild.pendingWorkPriority),newChild.pendingProps=currentChild.pendingProps,newChild.return=workInProgress;}newChild.sibling=null;}},ReactChildFiber={reconcileChildFibers:reconcileChildFibers$1,reconcileChildFibersInPlace:reconcileChildFibersInPlace$1,mountChildFibersInPlace:mountChildFibersInPlace$1,cloneChildFibers:cloneChildFibers$1},Update$1=ReactTypeOfSideEffect.Update,AsyncUpdates$1=ReactTypeOfInternalContext.AsyncUpdates,cacheContext$1=ReactFiberContext.cacheContext,getMaskedContext$2=ReactFiberContext.getMaskedContext,getUnmaskedContext$2=ReactFiberContext.getUnmaskedContext,isContextConsumer$1=ReactFiberContext.isContextConsumer,addUpdate$1=ReactFiberUpdateQueue.addUpdate,addReplaceUpdate$1=ReactFiberUpdateQueue.addReplaceUpdate,addForceUpdate$1=ReactFiberUpdateQueue.addForceUpdate,beginUpdateQueue$2=ReactFiberUpdateQueue.beginUpdateQueue,_require5=ReactFiberContext,hasContextChanged$2=_require5.hasContextChanged,isMounted$1=ReactFiberTreeReflection.isMounted,fakeInternalInstance={},isArray$1=Array.isArray,_require7$1=ReactDebugFiberPerf_1,startPhaseTimer$1=_require7$1.startPhaseTimer,stopPhaseTimer$1=_require7$1.stopPhaseTimer,warning$9=require$$0,warnOnInvalidCallback=function warnOnInvalidCallback(callback,callerName){warning$9(null===callback||"function"==typeof callback,"%s(...): Expected the last optional `callback` argument to be a "+"function. Instead received: %s.",callerName,callback);};Object.defineProperty(fakeInternalInstance,"_processChildContext",{enumerable:!1,value:function value(){invariant(!1,"_processChildContext is not available in React 16+. This likely "+"means you have multiple copies of React and are attempting to nest "+"a React 15 tree inside a React 16 tree using "+"unstable_renderSubtreeIntoContainer, which isn't supported. Try "+"to make sure you have only one copy of React (and ideally, switch "+"to ReactDOM.createPortal).");}}),Object.freeze(fakeInternalInstance);var ReactFiberClassComponent=function ReactFiberClassComponent(scheduleUpdate,getPriorityContext,memoizeProps,memoizeState){var updater={isMounted:isMounted$1,enqueueSetState:function enqueueSetState(instance,partialState,callback){var fiber=ReactInstanceMap_1.get(instance),priorityLevel=getPriorityContext(fiber,!1);callback=void 0===callback?null:callback,warnOnInvalidCallback(callback,"setState"),addUpdate$1(fiber,partialState,callback,priorityLevel),scheduleUpdate(fiber,priorityLevel);},enqueueReplaceState:function enqueueReplaceState(instance,state,callback){var fiber=ReactInstanceMap_1.get(instance),priorityLevel=getPriorityContext(fiber,!1);callback=void 0===callback?null:callback,warnOnInvalidCallback(callback,"replaceState"),addReplaceUpdate$1(fiber,state,callback,priorityLevel),scheduleUpdate(fiber,priorityLevel);},enqueueForceUpdate:function enqueueForceUpdate(instance,callback){var fiber=ReactInstanceMap_1.get(instance),priorityLevel=getPriorityContext(fiber,!1);callback=void 0===callback?null:callback,warnOnInvalidCallback(callback,"forceUpdate"),addForceUpdate$1(fiber,callback,priorityLevel),scheduleUpdate(fiber,priorityLevel);}};function checkShouldComponentUpdate(workInProgress,oldProps,newProps,oldState,newState,newContext){if(null===oldProps||null!==workInProgress.updateQueue&&workInProgress.updateQueue.hasForceUpdate)return!0;var instance=workInProgress.stateNode,type=workInProgress.type;if("function"==typeof instance.shouldComponentUpdate){startPhaseTimer$1(workInProgress,"shouldComponentUpdate");var shouldUpdate=instance.shouldComponentUpdate(newProps,newState,newContext);return stopPhaseTimer$1(),warning$9(void 0!==shouldUpdate,"%s.shouldComponentUpdate(): Returned undefined instead of a "+"boolean value. Make sure to return true or false.",getComponentName_1(workInProgress)||"Unknown"),shouldUpdate;}return!type.prototype||!type.prototype.isPureReactComponent||!shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState);}function checkClassInstance(workInProgress){var instance=workInProgress.stateNode,type=workInProgress.type,name=getComponentName_1(workInProgress),renderPresent=instance.render;warning$9(renderPresent,"%s(...): No `render` method found on the returned component "+"instance: you may have forgotten to define `render`.",name);var noGetInitialStateOnES6=!instance.getInitialState||instance.getInitialState.isReactClassApproved||instance.state;warning$9(noGetInitialStateOnES6,"getInitialState was defined on %s, a plain JavaScript class. "+"This is only supported for classes created using React.createClass. "+"Did you mean to define a state property instead?",name);var noGetDefaultPropsOnES6=!instance.getDefaultProps||instance.getDefaultProps.isReactClassApproved;warning$9(noGetDefaultPropsOnES6,"getDefaultProps was defined on %s, a plain JavaScript class. "+"This is only supported for classes created using React.createClass. "+"Use a static property to define defaultProps instead.",name);var noInstancePropTypes=!instance.propTypes;warning$9(noInstancePropTypes,"propTypes was defined as an instance property on %s. Use a static "+"property to define propTypes instead.",name);var noInstanceContextTypes=!instance.contextTypes;warning$9(noInstanceContextTypes,"contextTypes was defined as an instance property on %s. Use a static "+"property to define contextTypes instead.",name);var noComponentShouldUpdate="function"!=typeof instance.componentShouldUpdate;warning$9(noComponentShouldUpdate,"%s has a method called "+"componentShouldUpdate(). Did you mean shouldComponentUpdate()? "+"The name is phrased as a question because the function is "+"expected to return a value.",name),type.prototype&&type.prototype.isPureReactComponent&&void 0!==instance.shouldComponentUpdate&&warning$9(!1,"%s has a method called shouldComponentUpdate(). "+"shouldComponentUpdate should not be used when extending React.PureComponent. "+"Please extend React.Component if shouldComponentUpdate is used.",getComponentName_1(workInProgress)||"A pure component");var noComponentDidUnmount="function"!=typeof instance.componentDidUnmount;warning$9(noComponentDidUnmount,"%s has a method called "+"componentDidUnmount(). But there is no such lifecycle method. "+"Did you mean componentWillUnmount()?",name);var noComponentWillRecieveProps="function"!=typeof instance.componentWillRecieveProps;warning$9(noComponentWillRecieveProps,"%s has a method called "+"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",name);var hasMutatedProps=instance.props!==workInProgress.pendingProps;warning$9(void 0===instance.props||!hasMutatedProps,"%s(...): When calling super() in `%s`, make sure to pass "+"up the same props that your component's constructor was passed.",name,name);var noInstanceDefaultProps=!instance.defaultProps;warning$9(noInstanceDefaultProps,"Setting defaultProps as an instance property on %s is not supported and will be ignored."+" Instead, define defaultProps as a static property on %s.",name,name);var state=instance.state;state&&("object"!=typeof state||isArray$1(state))&&invariant(!1,"%s.state: must be set to an object or null",getComponentName_1(workInProgress)),"function"==typeof instance.getChildContext&&invariant("object"==typeof workInProgress.type.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to "+"use getChildContext().",getComponentName_1(workInProgress));}function resetInputPointers(workInProgress,instance){instance.props=workInProgress.memoizedProps,instance.state=workInProgress.memoizedState;}function adoptClassInstance(workInProgress,instance){instance.updater=updater,workInProgress.stateNode=instance,ReactInstanceMap_1.set(instance,workInProgress),instance._reactInternalInstance=fakeInternalInstance;}function constructClassInstance(workInProgress,props){var ctor=workInProgress.type,unmaskedContext=getUnmaskedContext$2(workInProgress),needsContext=isContextConsumer$1(workInProgress),context=needsContext?getMaskedContext$2(workInProgress,unmaskedContext):emptyObject,instance=new ctor(props,context);return adoptClassInstance(workInProgress,instance),needsContext&&cacheContext$1(workInProgress,unmaskedContext,context),instance;}function callComponentWillMount(workInProgress,instance){startPhaseTimer$1(workInProgress,"componentWillMount");var oldState=instance.state;instance.componentWillMount(),stopPhaseTimer$1(),oldState!==instance.state&&(warning$9(!1,"%s.componentWillMount(): Assigning directly to this.state is "+"deprecated (except inside a component's "+"constructor). Use setState instead.",getComponentName_1(workInProgress)),updater.enqueueReplaceState(instance,instance.state,null));}function callComponentWillReceiveProps(workInProgress,instance,newProps,newContext){startPhaseTimer$1(workInProgress,"componentWillReceiveProps");var oldState=instance.state;instance.componentWillReceiveProps(newProps,newContext),stopPhaseTimer$1(),instance.state!==oldState&&(warning$9(!1,"%s.componentWillReceiveProps(): Assigning directly to "+"this.state is deprecated (except inside a component's "+"constructor). Use setState instead.",getComponentName_1(workInProgress)),updater.enqueueReplaceState(instance,instance.state,null));}function mountClassInstance(workInProgress,priorityLevel){var current=workInProgress.alternate;checkClassInstance(workInProgress);var instance=workInProgress.stateNode,state=instance.state||null,props=workInProgress.pendingProps;invariant(props,"There must be pending props for an initial mount. This error is "+"likely caused by a bug in React. Please file an issue.");var unmaskedContext=getUnmaskedContext$2(workInProgress);if(instance.props=props,instance.state=state,instance.refs=emptyObject,instance.context=getMaskedContext$2(workInProgress,unmaskedContext),ReactFeatureFlags_1.enableAsyncSubtreeAPI&&null!=workInProgress.type&&null!=workInProgress.type.prototype&&!0===workInProgress.type.prototype.unstable_isAsyncReactComponent&&(workInProgress.internalContextTag|=AsyncUpdates$1),"function"==typeof instance.componentWillMount){callComponentWillMount(workInProgress,instance);var updateQueue=workInProgress.updateQueue;null!==updateQueue&&(instance.state=beginUpdateQueue$2(current,workInProgress,updateQueue,instance,state,props,priorityLevel));}"function"==typeof instance.componentDidMount&&(workInProgress.effectTag|=Update$1);}function updateClassInstance(current,workInProgress,priorityLevel){var instance=workInProgress.stateNode;resetInputPointers(workInProgress,instance);var oldProps=workInProgress.memoizedProps,newProps=workInProgress.pendingProps;newProps||(newProps=oldProps,invariant(null!=newProps,"There should always be pending or memoized props. This error is "+"likely caused by a bug in React. Please file an issue."));var oldContext=instance.context,newUnmaskedContext=getUnmaskedContext$2(workInProgress),newContext=getMaskedContext$2(workInProgress,newUnmaskedContext);"function"!=typeof instance.componentWillReceiveProps||oldProps===newProps&&oldContext===newContext||callComponentWillReceiveProps(workInProgress,instance,newProps,newContext);var oldState=workInProgress.memoizedState,newState=void 0;if(newState=null!==workInProgress.updateQueue?beginUpdateQueue$2(current,workInProgress,workInProgress.updateQueue,instance,oldState,newProps,priorityLevel):oldState,!(oldProps!==newProps||oldState!==newState||hasContextChanged$2()||null!==workInProgress.updateQueue&&workInProgress.updateQueue.hasForceUpdate))return"function"==typeof instance.componentDidUpdate&&(oldProps===current.memoizedProps&&oldState===current.memoizedState||(workInProgress.effectTag|=Update$1)),!1;var shouldUpdate=checkShouldComponentUpdate(workInProgress,oldProps,newProps,oldState,newState,newContext);return shouldUpdate?("function"==typeof instance.componentWillUpdate&&(startPhaseTimer$1(workInProgress,"componentWillUpdate"),instance.componentWillUpdate(newProps,newState,newContext),stopPhaseTimer$1()),"function"==typeof instance.componentDidUpdate&&(workInProgress.effectTag|=Update$1)):("function"==typeof instance.componentDidUpdate&&(oldProps===current.memoizedProps&&oldState===current.memoizedState||(workInProgress.effectTag|=Update$1)),memoizeProps(workInProgress,newProps),memoizeState(workInProgress,newState)),instance.props=newProps,instance.state=newState,instance.context=newContext,shouldUpdate;}return{adoptClassInstance:adoptClassInstance,constructClassInstance:constructClassInstance,mountClassInstance:mountClassInstance,updateClassInstance:updateClassInstance};},mountChildFibersInPlace=ReactChildFiber.mountChildFibersInPlace,reconcileChildFibers=ReactChildFiber.reconcileChildFibers,reconcileChildFibersInPlace=ReactChildFiber.reconcileChildFibersInPlace,cloneChildFibers=ReactChildFiber.cloneChildFibers,beginUpdateQueue$1=ReactFiberUpdateQueue.beginUpdateQueue,getMaskedContext$1=ReactFiberContext.getMaskedContext,getUnmaskedContext$1=ReactFiberContext.getUnmaskedContext,hasContextChanged$1=ReactFiberContext.hasContextChanged,pushContextProvider$1=ReactFiberContext.pushContextProvider,pushTopLevelContextObject$1=ReactFiberContext.pushTopLevelContextObject,invalidateContextProvider$1=ReactFiberContext.invalidateContextProvider,IndeterminateComponent$2=ReactTypeOfWork.IndeterminateComponent,FunctionalComponent$1=ReactTypeOfWork.FunctionalComponent,ClassComponent$6=ReactTypeOfWork.ClassComponent,HostRoot$6=ReactTypeOfWork.HostRoot,HostComponent$6=ReactTypeOfWork.HostComponent,HostText$3=ReactTypeOfWork.HostText,HostPortal$4=ReactTypeOfWork.HostPortal,CoroutineComponent$1=ReactTypeOfWork.CoroutineComponent,CoroutineHandlerPhase=ReactTypeOfWork.CoroutineHandlerPhase,YieldComponent$2=ReactTypeOfWork.YieldComponent,Fragment$2=ReactTypeOfWork.Fragment,NoWork$3=ReactPriorityLevel.NoWork,OffscreenPriority$1=ReactPriorityLevel.OffscreenPriority,PerformedWork$1=ReactTypeOfSideEffect.PerformedWork,Placement$2=ReactTypeOfSideEffect.Placement,ContentReset$1=ReactTypeOfSideEffect.ContentReset,Err$1=ReactTypeOfSideEffect.Err,Ref$1=ReactTypeOfSideEffect.Ref,ReactCurrentOwner$2=ReactGlobalSharedState_1.ReactCurrentOwner,ReactDebugCurrentFiber$4=ReactDebugCurrentFiber_1,_require7=ReactDebugFiberPerf_1,cancelWorkTimer=_require7.cancelWorkTimer,warning$7=require$$0,warnedAboutStatelessRefs={},ReactFiberBeginWork=function ReactFiberBeginWork(config,hostContext,hydrationContext,scheduleUpdate,getPriorityContext){var shouldSetTextContent=config.shouldSetTextContent,useSyncScheduling=config.useSyncScheduling,shouldDeprioritizeSubtree=config.shouldDeprioritizeSubtree,pushHostContext=hostContext.pushHostContext,pushHostContainer=hostContext.pushHostContainer,enterHydrationState=hydrationContext.enterHydrationState,resetHydrationState=hydrationContext.resetHydrationState,tryToClaimNextHydratableInstance=hydrationContext.tryToClaimNextHydratableInstance,_ReactFiberClassCompo=ReactFiberClassComponent(scheduleUpdate,getPriorityContext,memoizeProps,memoizeState),adoptClassInstance=_ReactFiberClassCompo.adoptClassInstance,constructClassInstance=_ReactFiberClassCompo.constructClassInstance,mountClassInstance=_ReactFiberClassCompo.mountClassInstance,updateClassInstance=_ReactFiberClassCompo.updateClassInstance;function reconcileChildren(current,workInProgress,nextChildren){reconcileChildrenAtPriority(current,workInProgress,nextChildren,workInProgress.pendingWorkPriority);}function reconcileChildrenAtPriority(current,workInProgress,nextChildren,priorityLevel){null===current?workInProgress.child=mountChildFibersInPlace(workInProgress,workInProgress.child,nextChildren,priorityLevel):current.child===workInProgress.child?workInProgress.child=reconcileChildFibers(workInProgress,workInProgress.child,nextChildren,priorityLevel):workInProgress.child=reconcileChildFibersInPlace(workInProgress,workInProgress.child,nextChildren,priorityLevel);}function updateFragment(current,workInProgress){var nextChildren=workInProgress.pendingProps;if(hasContextChanged$1())null===nextChildren&&(nextChildren=workInProgress.memoizedProps);else if(null===nextChildren||workInProgress.memoizedProps===nextChildren)return bailoutOnAlreadyFinishedWork(current,workInProgress);return reconcileChildren(current,workInProgress,nextChildren),memoizeProps(workInProgress,nextChildren),workInProgress.child;}function markRef(current,workInProgress){var ref=workInProgress.ref;null===ref||current&&current.ref===ref||(workInProgress.effectTag|=Ref$1);}function updateFunctionalComponent(current,workInProgress){var fn=workInProgress.type,nextProps=workInProgress.pendingProps,memoizedProps=workInProgress.memoizedProps;if(hasContextChanged$1())null===nextProps&&(nextProps=memoizedProps);else if(null===nextProps||memoizedProps===nextProps)return bailoutOnAlreadyFinishedWork(current,workInProgress);var nextChildren,unmaskedContext=getUnmaskedContext$1(workInProgress),context=getMaskedContext$1(workInProgress,unmaskedContext);return ReactCurrentOwner$2.current=workInProgress,ReactDebugCurrentFiber$4.setCurrentPhase("render"),nextChildren=fn(nextProps,context),ReactDebugCurrentFiber$4.setCurrentPhase(null),workInProgress.effectTag|=PerformedWork$1,reconcileChildren(current,workInProgress,nextChildren),memoizeProps(workInProgress,nextProps),workInProgress.child;}function updateClassComponent(current,workInProgress,priorityLevel){var hasContext=pushContextProvider$1(workInProgress),shouldUpdate=void 0;return null===current?workInProgress.stateNode?invariant(!1,"Resuming work not yet implemented."):(constructClassInstance(workInProgress,workInProgress.pendingProps),mountClassInstance(workInProgress,priorityLevel),shouldUpdate=!0):shouldUpdate=updateClassInstance(current,workInProgress,priorityLevel),finishClassComponent(current,workInProgress,shouldUpdate,hasContext);}function finishClassComponent(current,workInProgress,shouldUpdate,hasContext){if(markRef(current,workInProgress),!shouldUpdate)return hasContext&&invalidateContextProvider$1(workInProgress,!1),bailoutOnAlreadyFinishedWork(current,workInProgress);var instance=workInProgress.stateNode;ReactCurrentOwner$2.current=workInProgress;var nextChildren=void 0;return ReactDebugCurrentFiber$4.setCurrentPhase("render"),nextChildren=instance.render(),ReactDebugCurrentFiber$4.setCurrentPhase(null),workInProgress.effectTag|=PerformedWork$1,reconcileChildren(current,workInProgress,nextChildren),memoizeState(workInProgress,instance.state),memoizeProps(workInProgress,instance.props),hasContext&&invalidateContextProvider$1(workInProgress,!0),workInProgress.child;}function pushHostRootContext(workInProgress){var root=workInProgress.stateNode;root.pendingContext?pushTopLevelContextObject$1(workInProgress,root.pendingContext,root.pendingContext!==root.context):root.context&&pushTopLevelContextObject$1(workInProgress,root.context,!1),pushHostContainer(workInProgress,root.containerInfo);}function updateHostRoot(current,workInProgress,priorityLevel){pushHostRootContext(workInProgress);var updateQueue=workInProgress.updateQueue;if(null!==updateQueue){var prevState=workInProgress.memoizedState,state=beginUpdateQueue$1(current,workInProgress,updateQueue,null,prevState,null,priorityLevel);if(prevState===state)return resetHydrationState(),bailoutOnAlreadyFinishedWork(current,workInProgress);var element=state.element;return null!==current&&null!==current.child||!enterHydrationState(workInProgress)?(resetHydrationState(),reconcileChildren(current,workInProgress,element)):(workInProgress.effectTag|=Placement$2,workInProgress.child=mountChildFibersInPlace(workInProgress,workInProgress.child,element,priorityLevel)),memoizeState(workInProgress,state),workInProgress.child;}return resetHydrationState(),bailoutOnAlreadyFinishedWork(current,workInProgress);}function updateHostComponent(current,workInProgress,renderPriority){pushHostContext(workInProgress),null===current&&tryToClaimNextHydratableInstance(workInProgress);var type=workInProgress.type,memoizedProps=workInProgress.memoizedProps,nextProps=workInProgress.pendingProps;null===nextProps&&(nextProps=memoizedProps,invariant(null!==nextProps,"We should always have pending or current props. This error is "+"likely caused by a bug in React. Please file an issue."));var prevProps=null!==current?current.memoizedProps:null;if(hasContextChanged$1());else if(null===nextProps||memoizedProps===nextProps)return bailoutOnAlreadyFinishedWork(current,workInProgress);var nextChildren=nextProps.children;return shouldSetTextContent(type,nextProps)?nextChildren=null:prevProps&&shouldSetTextContent(type,prevProps)&&(workInProgress.effectTag|=ContentReset$1),markRef(current,workInProgress),renderPriority!==OffscreenPriority$1&&!useSyncScheduling&&shouldDeprioritizeSubtree(type,nextProps)?(workInProgress.pendingWorkPriority=OffscreenPriority$1,null):(reconcileChildren(current,workInProgress,nextChildren),memoizeProps(workInProgress,nextProps),workInProgress.child);}function updateHostText(current,workInProgress){null===current&&tryToClaimNextHydratableInstance(workInProgress);var nextProps=workInProgress.pendingProps;return null===nextProps&&(nextProps=workInProgress.memoizedProps),memoizeProps(workInProgress,nextProps),null;}function mountIndeterminateComponent(current,workInProgress,priorityLevel){invariant(null===current,"An indeterminate component should never have mounted. This error is "+"likely caused by a bug in React. Please file an issue.");var value,fn=workInProgress.type,props=workInProgress.pendingProps,unmaskedContext=getUnmaskedContext$1(workInProgress),context=getMaskedContext$1(workInProgress,unmaskedContext);if(ReactCurrentOwner$2.current=workInProgress,value=fn(props,context),workInProgress.effectTag|=PerformedWork$1,"object"==typeof value&&null!==value&&"function"==typeof value.render){workInProgress.tag=ClassComponent$6;var hasContext=pushContextProvider$1(workInProgress);return adoptClassInstance(workInProgress,value),mountClassInstance(workInProgress,priorityLevel),finishClassComponent(current,workInProgress,!0,hasContext);}workInProgress.tag=FunctionalComponent$1;var Component=workInProgress.type;if(Component&&warning$7(!Component.childContextTypes,"%s(...): childContextTypes cannot be defined on a functional component.",Component.displayName||Component.name||"Component"),null!==workInProgress.ref){var info="",ownerName=ReactDebugCurrentFiber$4.getCurrentFiberOwnerName();ownerName&&(info+="\n\nCheck the render method of `"+ownerName+"`.");var warningKey=ownerName||workInProgress._debugID||"",debugSource=workInProgress._debugSource;debugSource&&(warningKey=debugSource.fileName+":"+debugSource.lineNumber),warnedAboutStatelessRefs[warningKey]||(warnedAboutStatelessRefs[warningKey]=!0,warning$7(!1,"Stateless function components cannot be given refs. "+"Attempts to access this ref will fail.%s%s",info,ReactDebugCurrentFiber$4.getCurrentFiberStackAddendum()));}return reconcileChildren(current,workInProgress,value),memoizeProps(workInProgress,props),workInProgress.child;}function updateCoroutineComponent(current,workInProgress){var nextCoroutine=workInProgress.pendingProps;hasContextChanged$1()?null===nextCoroutine&&(nextCoroutine=current&&current.memoizedProps,invariant(null!==nextCoroutine,"We should always have pending or current props. This error is "+"likely caused by a bug in React. Please file an issue.")):null!==nextCoroutine&&workInProgress.memoizedProps!==nextCoroutine||(nextCoroutine=workInProgress.memoizedProps);var nextChildren=nextCoroutine.children,priorityLevel=workInProgress.pendingWorkPriority;return null===current?workInProgress.stateNode=mountChildFibersInPlace(workInProgress,workInProgress.stateNode,nextChildren,priorityLevel):current.child===workInProgress.child?workInProgress.stateNode=reconcileChildFibers(workInProgress,workInProgress.stateNode,nextChildren,priorityLevel):workInProgress.stateNode=reconcileChildFibersInPlace(workInProgress,workInProgress.stateNode,nextChildren,priorityLevel),memoizeProps(workInProgress,nextCoroutine),workInProgress.stateNode;}function updatePortalComponent(current,workInProgress){pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);var priorityLevel=workInProgress.pendingWorkPriority,nextChildren=workInProgress.pendingProps;if(hasContextChanged$1())null===nextChildren&&(nextChildren=current&&current.memoizedProps,invariant(null!=nextChildren,"We should always have pending or current props. This error is "+"likely caused by a bug in React. Please file an issue."));else if(null===nextChildren||workInProgress.memoizedProps===nextChildren)return bailoutOnAlreadyFinishedWork(current,workInProgress);return null===current?(workInProgress.child=reconcileChildFibersInPlace(workInProgress,workInProgress.child,nextChildren,priorityLevel),memoizeProps(workInProgress,nextChildren)):(reconcileChildren(current,workInProgress,nextChildren),memoizeProps(workInProgress,nextChildren)),workInProgress.child;}function bailoutOnAlreadyFinishedWork(current,workInProgress){return cancelWorkTimer(workInProgress),cloneChildFibers(current,workInProgress),workInProgress.child;}function bailoutOnLowPriority(current,workInProgress){switch(cancelWorkTimer(workInProgress),workInProgress.tag){case HostRoot$6:pushHostRootContext(workInProgress);break;case ClassComponent$6:pushContextProvider$1(workInProgress);break;case HostPortal$4:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);}return null;}function memoizeProps(workInProgress,nextProps){workInProgress.memoizedProps=nextProps;}function memoizeState(workInProgress,nextState){workInProgress.memoizedState=nextState;}function beginWork(current,workInProgress,priorityLevel){if(workInProgress.pendingWorkPriority===NoWork$3||workInProgress.pendingWorkPriority>priorityLevel)return bailoutOnLowPriority(current,workInProgress);switch(workInProgress.tag){case IndeterminateComponent$2:return mountIndeterminateComponent(current,workInProgress,priorityLevel);case FunctionalComponent$1:return updateFunctionalComponent(current,workInProgress);case ClassComponent$6:return updateClassComponent(current,workInProgress,priorityLevel);case HostRoot$6:return updateHostRoot(current,workInProgress,priorityLevel);case HostComponent$6:return updateHostComponent(current,workInProgress,priorityLevel);case HostText$3:return updateHostText(current,workInProgress);case CoroutineHandlerPhase:workInProgress.tag=CoroutineComponent$1;case CoroutineComponent$1:return updateCoroutineComponent(current,workInProgress);case YieldComponent$2:return null;case HostPortal$4:return updatePortalComponent(current,workInProgress);case Fragment$2:return updateFragment(current,workInProgress);default:invariant(!1,"Unknown unit of work tag. This error is likely caused by a bug in "+"React. Please file an issue.");}}function beginFailedWork(current,workInProgress,priorityLevel){switch(workInProgress.tag){case ClassComponent$6:pushContextProvider$1(workInProgress);break;case HostRoot$6:pushHostRootContext(workInProgress);break;default:invariant(!1,"Invalid type of work. This error is likely caused by a bug in React. "+"Please file an issue.");}if(workInProgress.effectTag|=Err$1,null===current?workInProgress.child=null:workInProgress.child!==current.child&&(workInProgress.child=current.child),workInProgress.pendingWorkPriority===NoWork$3||workInProgress.pendingWorkPriority>priorityLevel)return bailoutOnLowPriority(current,workInProgress);if(workInProgress.firstEffect=null,workInProgress.lastEffect=null,reconcileChildrenAtPriority(current,workInProgress,null,priorityLevel),workInProgress.tag===ClassComponent$6){var instance=workInProgress.stateNode;workInProgress.memoizedProps=instance.props,workInProgress.memoizedState=instance.state;}return workInProgress.child;}return{beginWork:beginWork,beginFailedWork:beginFailedWork};},reconcileChildFibers$2=ReactChildFiber.reconcileChildFibers,popContextProvider$2=ReactFiberContext.popContextProvider,popTopLevelContextObject$1=ReactFiberContext.popTopLevelContextObject,IndeterminateComponent$3=ReactTypeOfWork.IndeterminateComponent,FunctionalComponent$3=ReactTypeOfWork.FunctionalComponent,ClassComponent$8=ReactTypeOfWork.ClassComponent,HostRoot$7=ReactTypeOfWork.HostRoot,HostComponent$7=ReactTypeOfWork.HostComponent,HostText$5=ReactTypeOfWork.HostText,HostPortal$6=ReactTypeOfWork.HostPortal,CoroutineComponent$3=ReactTypeOfWork.CoroutineComponent,CoroutineHandlerPhase$1=ReactTypeOfWork.CoroutineHandlerPhase,YieldComponent$4=ReactTypeOfWork.YieldComponent,Fragment$4=ReactTypeOfWork.Fragment,Placement$4=ReactTypeOfSideEffect.Placement,Ref$2=ReactTypeOfSideEffect.Ref,Update$2=ReactTypeOfSideEffect.Update,OffscreenPriority$2=ReactPriorityLevel.OffscreenPriority,ReactFiberCompleteWork=function ReactFiberCompleteWork(config,hostContext,hydrationContext){var createInstance=config.createInstance,createTextInstance=config.createTextInstance,appendInitialChild=config.appendInitialChild,finalizeInitialChildren=config.finalizeInitialChildren,prepareUpdate=config.prepareUpdate,getRootHostContainer=hostContext.getRootHostContainer,popHostContext=hostContext.popHostContext,getHostContext=hostContext.getHostContext,popHostContainer=hostContext.popHostContainer,prepareToHydrateHostInstance=hydrationContext.prepareToHydrateHostInstance,prepareToHydrateHostTextInstance=hydrationContext.prepareToHydrateHostTextInstance,popHydrationState=hydrationContext.popHydrationState;function markUpdate(workInProgress){workInProgress.effectTag|=Update$2;}function markRef(workInProgress){workInProgress.effectTag|=Ref$2;}function appendAllYields(yields,workInProgress){var node=workInProgress.stateNode;for(node&&(node.return=workInProgress);null!==node;){if(node.tag===HostComponent$7||node.tag===HostText$5||node.tag===HostPortal$6)invariant(!1,"A coroutine cannot have host component children.");else if(node.tag===YieldComponent$4)yields.push(node.type);else if(null!==node.child){node.child.return=node,node=node.child;continue;}for(;null===node.sibling;){if(null===node.return||node.return===workInProgress)return;node=node.return;}node.sibling.return=node.return,node=node.sibling;}}function moveCoroutineToHandlerPhase(current,workInProgress){var coroutine=workInProgress.memoizedProps;invariant(coroutine,"Should be resolved by now. This error is likely caused by a bug in "+"React. Please file an issue."),workInProgress.tag=CoroutineHandlerPhase$1;var yields=[];appendAllYields(yields,workInProgress);var fn=coroutine.handler,props=coroutine.props,nextChildren=fn(props,yields),currentFirstChild=null!==current?current.child:null,priority=workInProgress.pendingWorkPriority;return workInProgress.child=reconcileChildFibers$2(workInProgress,currentFirstChild,nextChildren,priority),workInProgress.child;}function appendAllChildren(parent,workInProgress){for(var node=workInProgress.child;null!==node;){if(node.tag===HostComponent$7||node.tag===HostText$5)appendInitialChild(parent,node.stateNode);else if(node.tag===HostPortal$6);else if(null!==node.child){node=node.child;continue;}if(node===workInProgress)return;for(;null===node.sibling;){if(null===node.return||node.return===workInProgress)return;node=node.return;}node=node.sibling;}}function completeWork(current,workInProgress,renderPriority){var newProps=workInProgress.pendingProps;switch(null===newProps?newProps=workInProgress.memoizedProps:workInProgress.pendingWorkPriority===OffscreenPriority$2&&renderPriority!==OffscreenPriority$2||(workInProgress.pendingProps=null),workInProgress.tag){case FunctionalComponent$3:return null;case ClassComponent$8:return popContextProvider$2(workInProgress),null;case HostRoot$7:popHostContainer(workInProgress),popTopLevelContextObject$1(workInProgress);var fiberRoot=workInProgress.stateNode;return fiberRoot.pendingContext&&(fiberRoot.context=fiberRoot.pendingContext,fiberRoot.pendingContext=null),null!==current&&null!==current.child||(popHydrationState(workInProgress),workInProgress.effectTag&=~Placement$4),null;case HostComponent$7:popHostContext(workInProgress);var rootContainerInstance=getRootHostContainer(),type=workInProgress.type;if(null!==current&&null!=workInProgress.stateNode){var oldProps=current.memoizedProps,instance=workInProgress.stateNode,currentHostContext=getHostContext(),updatePayload=prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContext);workInProgress.updateQueue=updatePayload,updatePayload&&markUpdate(workInProgress),current.ref!==workInProgress.ref&&markRef(workInProgress);}else{if(!newProps)return invariant(null!==workInProgress.stateNode,"We must have new props for new mounts. This error is likely "+"caused by a bug in React. Please file an issue."),null;var _currentHostContext=getHostContext();if(popHydrationState(workInProgress))prepareToHydrateHostInstance(workInProgress,rootContainerInstance,_currentHostContext)&&markUpdate(workInProgress);else{var _instance=createInstance(type,newProps,rootContainerInstance,_currentHostContext,workInProgress);appendAllChildren(_instance,workInProgress),finalizeInitialChildren(_instance,type,newProps,rootContainerInstance)&&markUpdate(workInProgress),workInProgress.stateNode=_instance;}null!==workInProgress.ref&&markRef(workInProgress);}return null;case HostText$5:var newText=newProps;if(current&&null!=workInProgress.stateNode){current.memoizedProps!==newText&&markUpdate(workInProgress);}else{if("string"!=typeof newText)return invariant(null!==workInProgress.stateNode,"We must have new props for new mounts. This error is likely "+"caused by a bug in React. Please file an issue."),null;var _rootContainerInstance=getRootHostContainer(),_currentHostContext2=getHostContext();popHydrationState(workInProgress)?prepareToHydrateHostTextInstance(workInProgress)&&markUpdate(workInProgress):workInProgress.stateNode=createTextInstance(newText,_rootContainerInstance,_currentHostContext2,workInProgress);}return null;case CoroutineComponent$3:return moveCoroutineToHandlerPhase(current,workInProgress);case CoroutineHandlerPhase$1:return workInProgress.tag=CoroutineComponent$3,null;case YieldComponent$4:case Fragment$4:return null;case HostPortal$6:return markUpdate(workInProgress),popHostContainer(workInProgress),null;case IndeterminateComponent$3:invariant(!1,"An indeterminate component should have become determinate before "+"completing. This error is likely caused by a bug in React. Please "+"file an issue.");default:invariant(!1,"Unknown unit of work tag. This error is likely caused by a bug in "+"React. Please file an issue.");}}return{completeWork:completeWork};},warning$10=require$$0,onCommitFiberRoot=null,onCommitFiberUnmount=null,hasLoggedError=!1;function catchErrors(fn){return function(arg){try{return fn(arg);}catch(err){0||hasLoggedError||(hasLoggedError=!0,warning$10(!1,"React DevTools encountered an error: %s",err));}};}function injectInternals$1(internals){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var hook=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!hook.supportsFiber)return warning$10(!1,"The installed version of React DevTools is too old and will not work "+"with the current version of React. Please update React DevTools. "+"https://fb.me/react-devtools"),!0;try{var rendererID=hook.inject(internals);onCommitFiberRoot=catchErrors(function(root){return hook.onCommitFiberRoot(rendererID,root);}),onCommitFiberUnmount=catchErrors(function(fiber){return hook.onCommitFiberUnmount(rendererID,fiber);});}catch(err){warning$10(!1,"React DevTools encountered an error: %s.",err);}return!0;}function onCommitRoot$1(root){"function"==typeof onCommitFiberRoot&&onCommitFiberRoot(root);}function onCommitUnmount$1(fiber){"function"==typeof onCommitFiberUnmount&&onCommitFiberUnmount(fiber);}var injectInternals_1=injectInternals$1,onCommitRoot_1=onCommitRoot$1,onCommitUnmount_1=onCommitUnmount$1,ReactFiberDevToolsHook={injectInternals:injectInternals_1,onCommitRoot:onCommitRoot_1,onCommitUnmount:onCommitUnmount_1},ClassComponent$9=ReactTypeOfWork.ClassComponent,HostRoot$8=ReactTypeOfWork.HostRoot,HostComponent$8=ReactTypeOfWork.HostComponent,HostText$6=ReactTypeOfWork.HostText,HostPortal$7=ReactTypeOfWork.HostPortal,CoroutineComponent$4=ReactTypeOfWork.CoroutineComponent,commitCallbacks$1=ReactFiberUpdateQueue.commitCallbacks,onCommitUnmount=ReactFiberDevToolsHook.onCommitUnmount,invokeGuardedCallback$2=ReactErrorUtils_1.invokeGuardedCallback,hasCaughtError$1=ReactErrorUtils_1.hasCaughtError,clearCaughtError$1=ReactErrorUtils_1.clearCaughtError,Placement$5=ReactTypeOfSideEffect.Placement,Update$3=ReactTypeOfSideEffect.Update,Callback$1=ReactTypeOfSideEffect.Callback,ContentReset$2=ReactTypeOfSideEffect.ContentReset,_require5$1=ReactDebugFiberPerf_1,startPhaseTimer$2=_require5$1.startPhaseTimer,stopPhaseTimer$2=_require5$1.stopPhaseTimer,ReactFiberCommitWork=function ReactFiberCommitWork(config,captureError){var commitMount=config.commitMount,commitUpdate=config.commitUpdate,resetTextContent=config.resetTextContent,commitTextUpdate=config.commitTextUpdate,appendChild=config.appendChild,appendChildToContainer=config.appendChildToContainer,insertBefore=config.insertBefore,insertInContainerBefore=config.insertInContainerBefore,removeChild=config.removeChild,removeChildFromContainer=config.removeChildFromContainer,getPublicInstance=config.getPublicInstance,callComponentWillUnmountWithTimerInDev=function callComponentWillUnmountWithTimerInDev(current,instance){startPhaseTimer$2(current,"componentWillUnmount"),instance.props=current.memoizedProps,instance.state=current.memoizedState,instance.componentWillUnmount(),stopPhaseTimer$2();};function safelyCallComponentWillUnmount(current,instance){if(invokeGuardedCallback$2(null,callComponentWillUnmountWithTimerInDev,null,current,instance),hasCaughtError$1()){var unmountError=clearCaughtError$1();captureError(current,unmountError);}}function safelyDetachRef(current){var ref=current.ref;if(null!==ref&&(invokeGuardedCallback$2(null,ref,null,null),hasCaughtError$1())){var refError=clearCaughtError$1();captureError(current,refError);}}function getHostParentFiber(fiber){for(var parent=fiber.return;null!==parent;){if(isHostParent(parent))return parent;parent=parent.return;}invariant(!1,"Expected to find a host parent. This error is likely caused by a bug "+"in React. Please file an issue.");}function isHostParent(fiber){return fiber.tag===HostComponent$8||fiber.tag===HostRoot$8||fiber.tag===HostPortal$7;}function getHostSibling(fiber){var node=fiber;siblings:for(;!0;){for(;null===node.sibling;){if(null===node.return||isHostParent(node.return))return null;node=node.return;}for(node.sibling.return=node.return,node=node.sibling;node.tag!==HostComponent$8&&node.tag!==HostText$6;){if(node.effectTag&Placement$5)continue siblings;if(null===node.child||node.tag===HostPortal$7)continue siblings;node.child.return=node,node=node.child;}if(!(node.effectTag&Placement$5))return node.stateNode;}}function commitPlacement(finishedWork){var parentFiber=getHostParentFiber(finishedWork),parent=void 0,isContainer=void 0;switch(parentFiber.tag){case HostComponent$8:parent=parentFiber.stateNode,isContainer=!1;break;case HostRoot$8:case HostPortal$7:parent=parentFiber.stateNode.containerInfo,isContainer=!0;break;default:invariant(!1,"Invalid host parent fiber. This error is likely caused by a bug "+"in React. Please file an issue.");}parentFiber.effectTag&ContentReset$2&&(resetTextContent(parent),parentFiber.effectTag&=~ContentReset$2);for(var before=getHostSibling(finishedWork),node=finishedWork;!0;){if(node.tag===HostComponent$8||node.tag===HostText$6)before?isContainer?insertInContainerBefore(parent,node.stateNode,before):insertBefore(parent,node.stateNode,before):isContainer?appendChildToContainer(parent,node.stateNode):appendChild(parent,node.stateNode);else if(node.tag===HostPortal$7);else if(null!==node.child){node.child.return=node,node=node.child;continue;}if(node===finishedWork)return;for(;null===node.sibling;){if(null===node.return||node.return===finishedWork)return;node=node.return;}node.sibling.return=node.return,node=node.sibling;}}function commitNestedUnmounts(root){for(var node=root;!0;){if(commitUnmount(node),null===node.child||node.tag===HostPortal$7){if(node===root)return;for(;null===node.sibling;){if(null===node.return||node.return===root)return;node=node.return;}node.sibling.return=node.return,node=node.sibling;}else node.child.return=node,node=node.child;}}function unmountHostComponents(current){for(var node=current,currentParentIsValid=!1,currentParent=void 0,currentParentIsContainer=void 0;!0;){if(!currentParentIsValid){var parent=node.return;findParent:for(;!0;){switch(invariant(null!==parent,"Expected to find a host parent. This error is likely caused by "+"a bug in React. Please file an issue."),parent.tag){case HostComponent$8:currentParent=parent.stateNode,currentParentIsContainer=!1;break findParent;case HostRoot$8:case HostPortal$7:currentParent=parent.stateNode.containerInfo,currentParentIsContainer=!0;break findParent;}parent=parent.return;}currentParentIsValid=!0;}if(node.tag===HostComponent$8||node.tag===HostText$6)commitNestedUnmounts(node),currentParentIsContainer?removeChildFromContainer(currentParent,node.stateNode):removeChild(currentParent,node.stateNode);else if(node.tag===HostPortal$7){if(currentParent=node.stateNode.containerInfo,null!==node.child){node.child.return=node,node=node.child;continue;}}else if(commitUnmount(node),null!==node.child){node.child.return=node,node=node.child;continue;}if(node===current)return;for(;null===node.sibling;){if(null===node.return||node.return===current)return;node=node.return,node.tag===HostPortal$7&&(currentParentIsValid=!1);}node.sibling.return=node.return,node=node.sibling;}}function commitDeletion(current){unmountHostComponents(current),current.return=null,current.child=null,current.alternate&&(current.alternate.child=null,current.alternate.return=null);}function commitUnmount(current){switch("function"==typeof onCommitUnmount&&onCommitUnmount(current),current.tag){case ClassComponent$9:safelyDetachRef(current);var instance=current.stateNode;return void("function"==typeof instance.componentWillUnmount&&safelyCallComponentWillUnmount(current,instance));case HostComponent$8:return void safelyDetachRef(current);case CoroutineComponent$4:return void commitNestedUnmounts(current.stateNode);case HostPortal$7:return void unmountHostComponents(current);}}function commitWork(current,finishedWork){switch(finishedWork.tag){case ClassComponent$9:return;case HostComponent$8:var instance=finishedWork.stateNode;if(null!=instance){var newProps=finishedWork.memoizedProps,oldProps=null!==current?current.memoizedProps:newProps,type=finishedWork.type,updatePayload=finishedWork.updateQueue;finishedWork.updateQueue=null,null!==updatePayload&&commitUpdate(instance,updatePayload,type,oldProps,newProps,finishedWork);}return;case HostText$6:invariant(null!==finishedWork.stateNode,"This should have a text node initialized. This error is likely "+"caused by a bug in React. Please file an issue.");var textInstance=finishedWork.stateNode,newText=finishedWork.memoizedProps,oldText=null!==current?current.memoizedProps:newText;return void commitTextUpdate(textInstance,oldText,newText);case HostRoot$8:case HostPortal$7:return;default:invariant(!1,"This unit of work tag should not have side-effects. This error is "+"likely caused by a bug in React. Please file an issue.");}}function commitLifeCycles(current,finishedWork){switch(finishedWork.tag){case ClassComponent$9:var instance=finishedWork.stateNode;if(finishedWork.effectTag&Update$3)if(null===current)startPhaseTimer$2(finishedWork,"componentDidMount"),instance.props=finishedWork.memoizedProps,instance.state=finishedWork.memoizedState,instance.componentDidMount(),stopPhaseTimer$2();else{var prevProps=current.memoizedProps,prevState=current.memoizedState;startPhaseTimer$2(finishedWork,"componentDidUpdate"),instance.props=finishedWork.memoizedProps,instance.state=finishedWork.memoizedState,instance.componentDidUpdate(prevProps,prevState),stopPhaseTimer$2();}return void(finishedWork.effectTag&Callback$1&&null!==finishedWork.updateQueue&&commitCallbacks$1(finishedWork,finishedWork.updateQueue,instance));case HostRoot$8:var updateQueue=finishedWork.updateQueue;if(null!==updateQueue){var _instance=finishedWork.child&&finishedWork.child.stateNode;commitCallbacks$1(finishedWork,updateQueue,_instance);}return;case HostComponent$8:var _instance2=finishedWork.stateNode;if(null===current&&finishedWork.effectTag&Update$3){var type=finishedWork.type,props=finishedWork.memoizedProps;commitMount(_instance2,type,props,finishedWork);}return;case HostText$6:case HostPortal$7:return;default:invariant(!1,"This unit of work tag should not have side-effects. This error is "+"likely caused by a bug in React. Please file an issue.");}}function commitAttachRef(finishedWork){var ref=finishedWork.ref;if(null!==ref){var instance=finishedWork.stateNode;switch(finishedWork.tag){case HostComponent$8:ref(getPublicInstance(instance));break;default:ref(instance);}}}function commitDetachRef(current){var currentRef=current.ref;null!==currentRef&&currentRef(null);}return{commitPlacement:commitPlacement,commitDeletion:commitDeletion,commitWork:commitWork,commitLifeCycles:commitLifeCycles,commitAttachRef:commitAttachRef,commitDetachRef:commitDetachRef};},createCursor$2=ReactFiberStack.createCursor,pop$2=ReactFiberStack.pop,push$2=ReactFiberStack.push,NO_CONTEXT={},ReactFiberHostContext=function ReactFiberHostContext(config){var getChildHostContext=config.getChildHostContext,getRootHostContext=config.getRootHostContext,contextStackCursor=createCursor$2(NO_CONTEXT),contextFiberStackCursor=createCursor$2(NO_CONTEXT),rootInstanceStackCursor=createCursor$2(NO_CONTEXT);function requiredContext(c){return invariant(c!==NO_CONTEXT,"Expected host context to exist. This error is likely caused by a bug "+"in React. Please file an issue."),c;}function getRootHostContainer(){return requiredContext(rootInstanceStackCursor.current);}function pushHostContainer(fiber,nextRootInstance){push$2(rootInstanceStackCursor,nextRootInstance,fiber);var nextRootContext=getRootHostContext(nextRootInstance);push$2(contextFiberStackCursor,fiber,fiber),push$2(contextStackCursor,nextRootContext,fiber);}function popHostContainer(fiber){pop$2(contextStackCursor,fiber),pop$2(contextFiberStackCursor,fiber),pop$2(rootInstanceStackCursor,fiber);}function getHostContext(){return requiredContext(contextStackCursor.current);}function pushHostContext(fiber){var rootInstance=requiredContext(rootInstanceStackCursor.current),context=requiredContext(contextStackCursor.current),nextContext=getChildHostContext(context,fiber.type,rootInstance);context!==nextContext&&(push$2(contextFiberStackCursor,fiber,fiber),push$2(contextStackCursor,nextContext,fiber));}function popHostContext(fiber){contextFiberStackCursor.current===fiber&&(pop$2(contextStackCursor,fiber),pop$2(contextFiberStackCursor,fiber));}function resetHostContainer(){contextStackCursor.current=NO_CONTEXT,rootInstanceStackCursor.current=NO_CONTEXT;}return{getHostContext:getHostContext,getRootHostContainer:getRootHostContainer,popHostContainer:popHostContainer,popHostContext:popHostContext,pushHostContainer:pushHostContainer,pushHostContext:pushHostContext,resetHostContainer:resetHostContainer};},HostComponent$9=ReactTypeOfWork.HostComponent,HostText$7=ReactTypeOfWork.HostText,HostRoot$9=ReactTypeOfWork.HostRoot,Deletion$2=ReactTypeOfSideEffect.Deletion,Placement$6=ReactTypeOfSideEffect.Placement,createFiberFromHostInstanceForDeletion$1=ReactFiber.createFiberFromHostInstanceForDeletion,ReactFiberHydrationContext=function ReactFiberHydrationContext(config){var shouldSetTextContent=config.shouldSetTextContent,canHydrateInstance=config.canHydrateInstance,canHydrateTextInstance=config.canHydrateTextInstance,getNextHydratableSibling=config.getNextHydratableSibling,getFirstHydratableChild=config.getFirstHydratableChild,hydrateInstance=config.hydrateInstance,hydrateTextInstance=config.hydrateTextInstance,didNotHydrateInstance=config.didNotHydrateInstance,didNotFindHydratableInstance=config.didNotFindHydratableInstance,didNotFindHydratableTextInstance=config.didNotFindHydratableTextInstance;if(!(canHydrateInstance&&canHydrateTextInstance&&getNextHydratableSibling&&getFirstHydratableChild&&hydrateInstance&&hydrateTextInstance&&didNotHydrateInstance&&didNotFindHydratableInstance&&didNotFindHydratableTextInstance))return{enterHydrationState:function enterHydrationState(){return!1;},resetHydrationState:function resetHydrationState(){},tryToClaimNextHydratableInstance:function tryToClaimNextHydratableInstance(){},prepareToHydrateHostInstance:function prepareToHydrateHostInstance(){invariant(!1,"Expected prepareToHydrateHostInstance() to never be called. "+"This error is likely caused by a bug in React. Please file an issue.");},prepareToHydrateHostTextInstance:function prepareToHydrateHostTextInstance(){invariant(!1,"Expected prepareToHydrateHostTextInstance() to never be called. "+"This error is likely caused by a bug in React. Please file an issue.");},popHydrationState:function popHydrationState(fiber){return!1;}};var hydrationParentFiber=null,nextHydratableInstance=null,isHydrating=!1;function enterHydrationState(fiber){var parentInstance=fiber.stateNode.containerInfo;return nextHydratableInstance=getFirstHydratableChild(parentInstance),hydrationParentFiber=fiber,isHydrating=!0,!0;}function deleteHydratableInstance(returnFiber,instance){switch(returnFiber.tag){case HostRoot$9:didNotHydrateInstance(returnFiber.stateNode.containerInfo,instance);break;case HostComponent$9:didNotHydrateInstance(returnFiber.stateNode,instance);}var childToDelete=createFiberFromHostInstanceForDeletion$1();childToDelete.stateNode=instance,childToDelete.return=returnFiber,childToDelete.effectTag=Deletion$2,null!==returnFiber.lastEffect?(returnFiber.lastEffect.nextEffect=childToDelete,returnFiber.lastEffect=childToDelete):returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}function insertNonHydratedInstance(returnFiber,fiber){fiber.effectTag|=Placement$6;var parentInstance;switch(returnFiber.tag){case HostComponent$9:parentInstance=returnFiber.stateNode;break;default:return;}switch(fiber.tag){case HostComponent$9:var type=fiber.type,props=fiber.pendingProps;didNotFindHydratableInstance(parentInstance,type,props);break;case HostText$7:var text=fiber.pendingProps;didNotFindHydratableTextInstance(parentInstance,text);}}function canHydrate(fiber,nextInstance){switch(fiber.tag){case HostComponent$9:var type=fiber.type,props=fiber.pendingProps;return canHydrateInstance(nextInstance,type,props);case HostText$7:var text=fiber.pendingProps;return canHydrateTextInstance(nextInstance,text);default:return!1;}}function tryToClaimNextHydratableInstance(fiber){if(isHydrating){var nextInstance=nextHydratableInstance;if(!nextInstance)return insertNonHydratedInstance(hydrationParentFiber,fiber),isHydrating=!1,void(hydrationParentFiber=fiber);if(!canHydrate(fiber,nextInstance)){if(!(nextInstance=getNextHydratableSibling(nextInstance))||!canHydrate(fiber,nextInstance))return insertNonHydratedInstance(hydrationParentFiber,fiber),isHydrating=!1,void(hydrationParentFiber=fiber);deleteHydratableInstance(hydrationParentFiber,nextHydratableInstance);}fiber.stateNode=nextInstance,hydrationParentFiber=fiber,nextHydratableInstance=getFirstHydratableChild(nextInstance);}}function prepareToHydrateHostInstance(fiber,rootContainerInstance,hostContext){var instance=fiber.stateNode,updatePayload=hydrateInstance(instance,fiber.type,fiber.memoizedProps,rootContainerInstance,hostContext,fiber);return fiber.updateQueue=updatePayload,null!==updatePayload;}function prepareToHydrateHostTextInstance(fiber){var textInstance=fiber.stateNode;return hydrateTextInstance(textInstance,fiber.memoizedProps,fiber);}function popToNextHostParent(fiber){for(var parent=fiber.return;null!==parent&&parent.tag!==HostComponent$9&&parent.tag!==HostRoot$9;){parent=parent.return;}hydrationParentFiber=parent;}function popHydrationState(fiber){if(fiber!==hydrationParentFiber)return!1;if(!isHydrating)return popToNextHostParent(fiber),isHydrating=!0,!1;var type=fiber.type;if(fiber.tag!==HostComponent$9||"head"!==type&&"body"!==type&&!shouldSetTextContent(type,fiber.memoizedProps))for(var nextInstance=nextHydratableInstance;nextInstance;){deleteHydratableInstance(fiber,nextInstance),nextInstance=getNextHydratableSibling(nextInstance);}return popToNextHostParent(fiber),nextHydratableInstance=hydrationParentFiber?getNextHydratableSibling(fiber.stateNode):null,!0;}function resetHydrationState(){hydrationParentFiber=null,nextHydratableInstance=null,isHydrating=!1;}return{enterHydrationState:enterHydrationState,resetHydrationState:resetHydrationState,tryToClaimNextHydratableInstance:tryToClaimNextHydratableInstance,prepareToHydrateHostInstance:prepareToHydrateHostInstance,prepareToHydrateHostTextInstance:prepareToHydrateHostTextInstance,popHydrationState:popHydrationState};},ReactFiberInstrumentation$2={debugTool:null},ReactFiberInstrumentation_1=ReactFiberInstrumentation$2,popContextProvider$1=ReactFiberContext.popContextProvider,reset$1=ReactFiberStack.reset,getStackAddendumByWorkInProgressFiber$2=ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber,logCapturedError$1=ReactFiberErrorLogger.logCapturedError,invokeGuardedCallback$1=ReactErrorUtils_1.invokeGuardedCallback,hasCaughtError=ReactErrorUtils_1.hasCaughtError,clearCaughtError=ReactErrorUtils_1.clearCaughtError,ReactCurrentOwner$1=ReactGlobalSharedState_1.ReactCurrentOwner,createWorkInProgress$1=ReactFiber.createWorkInProgress,largerPriority$1=ReactFiber.largerPriority,onCommitRoot=ReactFiberDevToolsHook.onCommitRoot,NoWork$2=ReactPriorityLevel.NoWork,SynchronousPriority$1=ReactPriorityLevel.SynchronousPriority,TaskPriority$1=ReactPriorityLevel.TaskPriority,HighPriority=ReactPriorityLevel.HighPriority,LowPriority=ReactPriorityLevel.LowPriority,OffscreenPriority=ReactPriorityLevel.OffscreenPriority,AsyncUpdates=ReactTypeOfInternalContext.AsyncUpdates,PerformedWork=ReactTypeOfSideEffect.PerformedWork,Placement$1=ReactTypeOfSideEffect.Placement,Update=ReactTypeOfSideEffect.Update,PlacementAndUpdate=ReactTypeOfSideEffect.PlacementAndUpdate,Deletion=ReactTypeOfSideEffect.Deletion,ContentReset=ReactTypeOfSideEffect.ContentReset,Callback=ReactTypeOfSideEffect.Callback,Err=ReactTypeOfSideEffect.Err,Ref=ReactTypeOfSideEffect.Ref,HostRoot$5=ReactTypeOfWork.HostRoot,HostComponent$5=ReactTypeOfWork.HostComponent,HostPortal$3=ReactTypeOfWork.HostPortal,ClassComponent$5=ReactTypeOfWork.ClassComponent,getUpdatePriority$1=ReactFiberUpdateQueue.getUpdatePriority,_require14=ReactFiberContext,resetContext$1=_require14.resetContext,warning$6=require$$0,ReactFiberInstrumentation$1=ReactFiberInstrumentation_1,ReactDebugCurrentFiber$3=ReactDebugCurrentFiber_1,_require15=ReactDebugFiberPerf_1,recordEffect=_require15.recordEffect,recordScheduleUpdate=_require15.recordScheduleUpdate,startWorkTimer=_require15.startWorkTimer,stopWorkTimer=_require15.stopWorkTimer,stopFailedWorkTimer=_require15.stopFailedWorkTimer,startWorkLoopTimer=_require15.startWorkLoopTimer,stopWorkLoopTimer=_require15.stopWorkLoopTimer,startCommitTimer=_require15.startCommitTimer,stopCommitTimer=_require15.stopCommitTimer,startCommitHostEffectsTimer=_require15.startCommitHostEffectsTimer,stopCommitHostEffectsTimer=_require15.stopCommitHostEffectsTimer,startCommitLifeCyclesTimer=_require15.startCommitLifeCyclesTimer,stopCommitLifeCyclesTimer=_require15.stopCommitLifeCyclesTimer,warnAboutUpdateOnUnmounted=function warnAboutUpdateOnUnmounted(instance){var ctor=instance.constructor;warning$6(!1,"Can only update a mounted or mounting component. This usually means "+"you called setState, replaceState, or forceUpdate on an unmounted "+"component. This is a no-op.\n\nPlease check the code for the "+"%s component.",ctor&&(ctor.displayName||ctor.name)||"ReactClass");},warnAboutInvalidUpdates=function warnAboutInvalidUpdates(instance){switch(ReactDebugCurrentFiber$3.phase){case"getChildContext":warning$6(!1,"setState(...): Cannot call setState() inside getChildContext()");break;case"render":warning$6(!1,"Cannot update during an existing state transition (such as within "+"`render` or another component's constructor). Render methods should "+"be a pure function of props and state; constructor side-effects are "+"an anti-pattern, but can be moved to `componentWillMount`.");}},timeHeuristicForUnitOfWork=1,ReactFiberScheduler=function ReactFiberScheduler(config){var hostContext=ReactFiberHostContext(config),hydrationContext=ReactFiberHydrationContext(config),popHostContainer=hostContext.popHostContainer,popHostContext=hostContext.popHostContext,resetHostContainer=hostContext.resetHostContainer,_ReactFiberBeginWork=ReactFiberBeginWork(config,hostContext,hydrationContext,scheduleUpdate,getPriorityContext),beginWork=_ReactFiberBeginWork.beginWork,beginFailedWork=_ReactFiberBeginWork.beginFailedWork,_ReactFiberCompleteWo=ReactFiberCompleteWork(config,hostContext,hydrationContext),completeWork=_ReactFiberCompleteWo.completeWork,_ReactFiberCommitWork=ReactFiberCommitWork(config,captureError),commitPlacement=_ReactFiberCommitWork.commitPlacement,commitDeletion=_ReactFiberCommitWork.commitDeletion,commitWork=_ReactFiberCommitWork.commitWork,commitLifeCycles=_ReactFiberCommitWork.commitLifeCycles,commitAttachRef=_ReactFiberCommitWork.commitAttachRef,commitDetachRef=_ReactFiberCommitWork.commitDetachRef,scheduleDeferredCallback=config.scheduleDeferredCallback,useSyncScheduling=config.useSyncScheduling,prepareForCommit=config.prepareForCommit,resetAfterCommit=config.resetAfterCommit,priorityContext=NoWork$2,isPerformingWork=!1,deadlineHasExpired=!1,isBatchingUpdates=!1,isUnbatchingUpdates=!1,nextUnitOfWork=null,nextPriorityLevel=NoWork$2,nextEffect=null,pendingCommit=null,nextScheduledRoot=null,lastScheduledRoot=null,isCallbackScheduled=!1,capturedErrors=null,failedBoundaries=null,commitPhaseBoundaries=null,firstUncaughtError=null,didFatal=!1,isCommitting=!1,isUnmounting=!1,NESTED_UPDATE_LIMIT=1e3,nestedUpdateCount=0,nextRenderedTree=null;function resetContextStack(){reset$1(),resetContext$1(),resetHostContainer();}function resetNextUnitOfWork(){for(;null!==nextScheduledRoot&&nextScheduledRoot.current.pendingWorkPriority===NoWork$2;){nextScheduledRoot.isScheduled=!1;var next=nextScheduledRoot.nextScheduledRoot;if(nextScheduledRoot.nextScheduledRoot=null,nextScheduledRoot===lastScheduledRoot)return nextScheduledRoot=null,lastScheduledRoot=null,nextPriorityLevel=NoWork$2,null;nextScheduledRoot=next;}for(var root=nextScheduledRoot,highestPriorityRoot=null,highestPriorityLevel=NoWork$2;null!==root;){root.current.pendingWorkPriority!==NoWork$2&&(highestPriorityLevel===NoWork$2||highestPriorityLevel>root.current.pendingWorkPriority)&&(highestPriorityLevel=root.current.pendingWorkPriority,highestPriorityRoot=root),root=root.nextScheduledRoot;}if(null!==highestPriorityRoot)return nextPriorityLevel=highestPriorityLevel,resetContextStack(),nextUnitOfWork=createWorkInProgress$1(highestPriorityRoot.current,highestPriorityLevel),void(highestPriorityRoot!==nextRenderedTree&&(nestedUpdateCount=0,nextRenderedTree=highestPriorityRoot));nextPriorityLevel=NoWork$2,nextUnitOfWork=null,nextRenderedTree=null;}function commitAllHostEffects(){for(;null!==nextEffect;){ReactDebugCurrentFiber$3.setCurrentFiber(nextEffect),recordEffect();var effectTag=nextEffect.effectTag;if(effectTag&ContentReset&&config.resetTextContent(nextEffect.stateNode),effectTag&Ref){var current=nextEffect.alternate;null!==current&&commitDetachRef(current);}switch(effectTag&~(Callback|Err|ContentReset|Ref|PerformedWork)){case Placement$1:commitPlacement(nextEffect),nextEffect.effectTag&=~Placement$1;break;case PlacementAndUpdate:commitPlacement(nextEffect),nextEffect.effectTag&=~Placement$1;var _current=nextEffect.alternate;commitWork(_current,nextEffect);break;case Update:var _current2=nextEffect.alternate;commitWork(_current2,nextEffect);break;case Deletion:isUnmounting=!0,commitDeletion(nextEffect),isUnmounting=!1;}nextEffect=nextEffect.nextEffect;}ReactDebugCurrentFiber$3.resetCurrentFiber();}function commitAllLifeCycles(){for(;null!==nextEffect;){var effectTag=nextEffect.effectTag;if(effectTag&(Update|Callback)){recordEffect();var current=nextEffect.alternate;commitLifeCycles(current,nextEffect);}effectTag&Ref&&(recordEffect(),commitAttachRef(nextEffect)),effectTag&Err&&(recordEffect(),commitErrorHandling(nextEffect));var next=nextEffect.nextEffect;nextEffect.nextEffect=null,nextEffect=next;}}function commitAllWork(finishedWork){isCommitting=!0,startCommitTimer(),pendingCommit=null;var root=finishedWork.stateNode;invariant(root.current!==finishedWork,"Cannot commit the same tree as before. This is probably a bug "+"related to the return field. This error is likely caused by a bug "+"in React. Please file an issue."),nextPriorityLevel!==SynchronousPriority$1&&nextPriorityLevel!==TaskPriority$1||nestedUpdateCount++,ReactCurrentOwner$1.current=null;var firstEffect=void 0;for(finishedWork.effectTag>PerformedWork?null!==finishedWork.lastEffect?(finishedWork.lastEffect.nextEffect=finishedWork,firstEffect=finishedWork.firstEffect):firstEffect=finishedWork:firstEffect=finishedWork.firstEffect,prepareForCommit(),nextEffect=firstEffect,startCommitHostEffectsTimer();null!==nextEffect;){var didError=!1,_error=void 0;invokeGuardedCallback$1(null,commitAllHostEffects,null),hasCaughtError()&&(didError=!0,_error=clearCaughtError()),didError&&(invariant(null!==nextEffect,"Should have next effect. This error is likely caused by a bug "+"in React. Please file an issue."),captureError(nextEffect,_error),null!==nextEffect&&(nextEffect=nextEffect.nextEffect));}for(stopCommitHostEffectsTimer(),resetAfterCommit(),root.current=finishedWork,nextEffect=firstEffect,startCommitLifeCyclesTimer();null!==nextEffect;){var _didError=!1,_error2=void 0;invokeGuardedCallback$1(null,commitAllLifeCycles,null),hasCaughtError()&&(_didError=!0,_error2=clearCaughtError()),_didError&&(invariant(null!==nextEffect,"Should have next effect. This error is likely caused by a bug "+"in React. Please file an issue."),captureError(nextEffect,_error2),null!==nextEffect&&(nextEffect=nextEffect.nextEffect));}isCommitting=!1,stopCommitLifeCyclesTimer(),stopCommitTimer(),"function"==typeof onCommitRoot&&onCommitRoot(finishedWork.stateNode),!0&&ReactFiberInstrumentation$1.debugTool&&ReactFiberInstrumentation$1.debugTool.onCommitWork(finishedWork),commitPhaseBoundaries&&(commitPhaseBoundaries.forEach(scheduleErrorRecovery),commitPhaseBoundaries=null),resetNextUnitOfWork();}function resetWorkPriority(workInProgress,renderPriority){if(!(workInProgress.pendingWorkPriority!==NoWork$2&&workInProgress.pendingWorkPriority>renderPriority)){for(var newPriority=getUpdatePriority$1(workInProgress),child=workInProgress.child;null!==child;){newPriority=largerPriority$1(newPriority,child.pendingWorkPriority),child=child.sibling;}workInProgress.pendingWorkPriority=newPriority;}}function completeUnitOfWork(workInProgress){for(;!0;){var current=workInProgress.alternate;ReactDebugCurrentFiber$3.setCurrentFiber(workInProgress);var next=completeWork(current,workInProgress,nextPriorityLevel);ReactDebugCurrentFiber$3.resetCurrentFiber();var returnFiber=workInProgress.return,siblingFiber=workInProgress.sibling;if(resetWorkPriority(workInProgress,nextPriorityLevel),null!==next)return stopWorkTimer(workInProgress),!0&&ReactFiberInstrumentation$1.debugTool&&ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress),next;if(null!==returnFiber){null===returnFiber.firstEffect&&(returnFiber.firstEffect=workInProgress.firstEffect),null!==workInProgress.lastEffect&&(null!==returnFiber.lastEffect&&(returnFiber.lastEffect.nextEffect=workInProgress.firstEffect),returnFiber.lastEffect=workInProgress.lastEffect);workInProgress.effectTag>PerformedWork&&(null!==returnFiber.lastEffect?returnFiber.lastEffect.nextEffect=workInProgress:returnFiber.firstEffect=workInProgress,returnFiber.lastEffect=workInProgress);}if(stopWorkTimer(workInProgress),!0&&ReactFiberInstrumentation$1.debugTool&&ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress),null!==siblingFiber)return siblingFiber;if(null===returnFiber)return pendingCommit=workInProgress,null;workInProgress=returnFiber;}return null;}function performUnitOfWork(workInProgress){var current=workInProgress.alternate;startWorkTimer(workInProgress),ReactDebugCurrentFiber$3.setCurrentFiber(workInProgress);var next=beginWork(current,workInProgress,nextPriorityLevel);return ReactDebugCurrentFiber$3.resetCurrentFiber(),!0&&ReactFiberInstrumentation$1.debugTool&&ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress),null===next&&(next=completeUnitOfWork(workInProgress)),ReactCurrentOwner$1.current=null,next;}function performFailedUnitOfWork(workInProgress){var current=workInProgress.alternate;startWorkTimer(workInProgress),ReactDebugCurrentFiber$3.setCurrentFiber(workInProgress);var next=beginFailedWork(current,workInProgress,nextPriorityLevel);return ReactDebugCurrentFiber$3.resetCurrentFiber(),!0&&ReactFiberInstrumentation$1.debugTool&&ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress),null===next&&(next=completeUnitOfWork(workInProgress)),ReactCurrentOwner$1.current=null,next;}function performDeferredWork(deadline){performWork(OffscreenPriority,deadline);}function handleCommitPhaseErrors(){if(null!==capturedErrors&&capturedErrors.size>0&&nextPriorityLevel===TaskPriority$1)for(;null!==nextUnitOfWork&&(null!==(nextUnitOfWork=hasCapturedError(nextUnitOfWork)?performFailedUnitOfWork(nextUnitOfWork):performUnitOfWork(nextUnitOfWork))||(invariant(null!==pendingCommit,"Should have a pending commit. This error is likely caused by "+"a bug in React. Please file an issue."),priorityContext=TaskPriority$1,commitAllWork(pendingCommit),priorityContext=nextPriorityLevel,null!==capturedErrors&&0!==capturedErrors.size&&nextPriorityLevel===TaskPriority$1));){}}function workLoop(minPriorityLevel,deadline){if(null!==pendingCommit?(priorityContext=TaskPriority$1,commitAllWork(pendingCommit),handleCommitPhaseErrors()):null===nextUnitOfWork&&resetNextUnitOfWork(),!(nextPriorityLevel===NoWork$2||nextPriorityLevel>minPriorityLevel)){priorityContext=nextPriorityLevel;loop:do{if(nextPriorityLevel<=TaskPriority$1)for(;null!==nextUnitOfWork&&!(null===(nextUnitOfWork=performUnitOfWork(nextUnitOfWork))&&(invariant(null!==pendingCommit,"Should have a pending commit. This error is likely caused by "+"a bug in React. Please file an issue."),priorityContext=TaskPriority$1,commitAllWork(pendingCommit),priorityContext=nextPriorityLevel,handleCommitPhaseErrors(),nextPriorityLevel===NoWork$2||nextPriorityLevel>minPriorityLevel||nextPriorityLevel>TaskPriority$1));){}else if(null!==deadline)for(;null!==nextUnitOfWork&&!deadlineHasExpired;){if(deadline.timeRemaining()>timeHeuristicForUnitOfWork){if(null===(nextUnitOfWork=performUnitOfWork(nextUnitOfWork)))if(invariant(null!==pendingCommit,"Should have a pending commit. This error is likely caused by "+"a bug in React. Please file an issue."),deadline.timeRemaining()>timeHeuristicForUnitOfWork){if(priorityContext=TaskPriority$1,commitAllWork(pendingCommit),priorityContext=nextPriorityLevel,handleCommitPhaseErrors(),nextPriorityLevel===NoWork$2||nextPriorityLevel>minPriorityLevel||nextPriorityLevel<HighPriority)break;}else deadlineHasExpired=!0;}else deadlineHasExpired=!0;}switch(nextPriorityLevel){case SynchronousPriority$1:case TaskPriority$1:if(nextPriorityLevel<=minPriorityLevel)continue loop;break loop;case HighPriority:case LowPriority:case OffscreenPriority:if(null===deadline)break loop;if(!deadlineHasExpired&&nextPriorityLevel<=minPriorityLevel)continue loop;break loop;case NoWork$2:break loop;default:invariant(!1,"Switch statement should be exhuastive. "+"This error is likely caused by a bug in React. Please file an issue.");}}while(!0);}}function performWorkCatchBlock(failedWork,boundary,minPriorityLevel,deadline){unwindContexts(failedWork,boundary),nextUnitOfWork=performFailedUnitOfWork(boundary),workLoop(minPriorityLevel,deadline);}function performWork(minPriorityLevel,deadline){startWorkLoopTimer(),invariant(!isPerformingWork,"performWork was called recursively. This error is likely caused "+"by a bug in React. Please file an issue."),isPerformingWork=!0;var previousPriorityContext=priorityContext,didError=!1,error=null;for(invokeGuardedCallback$1(null,workLoop,null,minPriorityLevel,deadline),hasCaughtError()&&(didError=!0,error=clearCaughtError());didError;){if(didFatal){firstUncaughtError=error;break;}var failedWork=nextUnitOfWork;if(null!==failedWork){var boundary=captureError(failedWork,error);if(invariant(null!==boundary,"Should have found an error boundary. This error is likely "+"caused by a bug in React. Please file an issue."),!didFatal){if(didError=!1,error=null,invokeGuardedCallback$1(null,performWorkCatchBlock,null,failedWork,boundary,minPriorityLevel,deadline),!hasCaughtError())break;didError=!0,error=clearCaughtError();}}else didFatal=!0;}priorityContext=previousPriorityContext,null!==deadline&&(isCallbackScheduled=!1),nextPriorityLevel>TaskPriority$1&&!isCallbackScheduled&&(scheduleDeferredCallback(performDeferredWork),isCallbackScheduled=!0);var errorToThrow=firstUncaughtError;if(isPerformingWork=!1,deadlineHasExpired=!1,didFatal=!1,firstUncaughtError=null,capturedErrors=null,failedBoundaries=null,nextRenderedTree=null,nestedUpdateCount=0,stopWorkLoopTimer(),null!==errorToThrow)throw errorToThrow;}function captureError(failedWork,error){ReactCurrentOwner$1.current=null,ReactDebugCurrentFiber$3.resetCurrentFiber();var boundary=null,errorBoundaryFound=!1,willRetry=!1,errorBoundaryName=null;if(failedWork.tag===HostRoot$5)boundary=failedWork,isFailedBoundary(failedWork)&&(didFatal=!0);else for(var node=failedWork.return;null!==node&&null===boundary;){if(node.tag===ClassComponent$5){var instance=node.stateNode;"function"==typeof instance.componentDidCatch&&(errorBoundaryFound=!0,errorBoundaryName=getComponentName_1(node),boundary=node,willRetry=!0);}else node.tag===HostRoot$5&&(boundary=node);if(isFailedBoundary(node)){if(isUnmounting)return null;if(null!==commitPhaseBoundaries&&(commitPhaseBoundaries.has(node)||null!==node.alternate&&commitPhaseBoundaries.has(node.alternate)))return null;boundary=null,willRetry=!1;}node=node.return;}if(null!==boundary){null===failedBoundaries&&(failedBoundaries=new Set()),failedBoundaries.add(boundary);var _componentStack=getStackAddendumByWorkInProgressFiber$2(failedWork),_componentName=getComponentName_1(failedWork);null===capturedErrors&&(capturedErrors=new Map());var capturedError={componentName:_componentName,componentStack:_componentStack,error:error,errorBoundary:errorBoundaryFound?boundary.stateNode:null,errorBoundaryFound:errorBoundaryFound,errorBoundaryName:errorBoundaryName,willRetry:willRetry};capturedErrors.set(boundary,capturedError);try{logCapturedError$1(capturedError);}catch(e){console.error(e);}return isCommitting?(null===commitPhaseBoundaries&&(commitPhaseBoundaries=new Set()),commitPhaseBoundaries.add(boundary)):scheduleErrorRecovery(boundary),boundary;}return null===firstUncaughtError&&(firstUncaughtError=error),null;}function hasCapturedError(fiber){return null!==capturedErrors&&(capturedErrors.has(fiber)||null!==fiber.alternate&&capturedErrors.has(fiber.alternate));}function isFailedBoundary(fiber){return null!==failedBoundaries&&(failedBoundaries.has(fiber)||null!==fiber.alternate&&failedBoundaries.has(fiber.alternate));}function commitErrorHandling(effectfulFiber){var capturedError=void 0;switch(null!==capturedErrors&&(capturedError=capturedErrors.get(effectfulFiber),capturedErrors.delete(effectfulFiber),null==capturedError&&null!==effectfulFiber.alternate&&(effectfulFiber=effectfulFiber.alternate,capturedError=capturedErrors.get(effectfulFiber),capturedErrors.delete(effectfulFiber))),invariant(null!=capturedError,"No error for given unit of work. This error is likely caused by a "+"bug in React. Please file an issue."),effectfulFiber.tag){case ClassComponent$5:var instance=effectfulFiber.stateNode,info={componentStack:capturedError.componentStack};return void instance.componentDidCatch(capturedError.error,info);case HostRoot$5:return void(null===firstUncaughtError&&(firstUncaughtError=capturedError.error));default:invariant(!1,"Invalid type of work. This error is likely caused by a bug in "+"React. Please file an issue.");}}function unwindContexts(from,to){for(var node=from;null!==node;){switch(node.tag){case ClassComponent$5:popContextProvider$1(node);break;case HostComponent$5:popHostContext(node);break;case HostRoot$5:case HostPortal$3:popHostContainer(node);}if(node===to||node.alternate===to){stopFailedWorkTimer(node);break;}stopWorkTimer(node),node=node.return;}}function scheduleRoot(root,priorityLevel){priorityLevel!==NoWork$2&&(root.isScheduled||(root.isScheduled=!0,lastScheduledRoot?(lastScheduledRoot.nextScheduledRoot=root,lastScheduledRoot=root):(nextScheduledRoot=root,lastScheduledRoot=root)));}function scheduleUpdate(fiber,priorityLevel){return scheduleUpdateImpl(fiber,priorityLevel,!1);}function scheduleUpdateImpl(fiber,priorityLevel,isErrorRecovery){if(recordScheduleUpdate(),nestedUpdateCount>NESTED_UPDATE_LIMIT&&(didFatal=!0,invariant(!1,"Maximum update depth exceeded. This can happen when a "+"component repeatedly calls setState inside componentWillUpdate or "+"componentDidUpdate. React limits the number of nested updates to "+"prevent infinite loops.")),!isPerformingWork&&priorityLevel<=nextPriorityLevel&&(nextUnitOfWork=null),!isErrorRecovery&&fiber.tag===ClassComponent$5){var instance=fiber.stateNode;warnAboutInvalidUpdates(instance);}for(var node=fiber,shouldContinue=!0;null!==node&&shouldContinue;){if(shouldContinue=!1,(node.pendingWorkPriority===NoWork$2||node.pendingWorkPriority>priorityLevel)&&(shouldContinue=!0,node.pendingWorkPriority=priorityLevel),null!==node.alternate&&(node.alternate.pendingWorkPriority===NoWork$2||node.alternate.pendingWorkPriority>priorityLevel)&&(shouldContinue=!0,node.alternate.pendingWorkPriority=priorityLevel),null===node.return){if(node.tag!==HostRoot$5)return void(isErrorRecovery||fiber.tag!==ClassComponent$5||warnAboutUpdateOnUnmounted(fiber.stateNode));if(scheduleRoot(node.stateNode,priorityLevel),!isPerformingWork)switch(priorityLevel){case SynchronousPriority$1:isUnbatchingUpdates?performWork(SynchronousPriority$1,null):performWork(TaskPriority$1,null);break;case TaskPriority$1:invariant(isBatchingUpdates,"Task updates can only be scheduled as a nested update or "+"inside batchedUpdates.");break;default:isCallbackScheduled||(scheduleDeferredCallback(performDeferredWork),isCallbackScheduled=!0);}}node=node.return;}}function getPriorityContext(fiber,forceAsync){var priorityLevel=priorityContext;return priorityLevel===NoWork$2&&(priorityLevel=!useSyncScheduling||fiber.internalContextTag&AsyncUpdates||forceAsync?LowPriority:SynchronousPriority$1),priorityLevel===SynchronousPriority$1&&(isPerformingWork||isBatchingUpdates)?TaskPriority$1:priorityLevel;}function scheduleErrorRecovery(fiber){scheduleUpdateImpl(fiber,TaskPriority$1,!0);}function batchedUpdates(fn,a){var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=!0;try{return fn(a);}finally{isBatchingUpdates=previousIsBatchingUpdates,isPerformingWork||isBatchingUpdates||performWork(TaskPriority$1,null);}}function unbatchedUpdates(fn){var previousIsUnbatchingUpdates=isUnbatchingUpdates,previousIsBatchingUpdates=isBatchingUpdates;isUnbatchingUpdates=isBatchingUpdates,isBatchingUpdates=!1;try{return fn();}finally{isBatchingUpdates=previousIsBatchingUpdates,isUnbatchingUpdates=previousIsUnbatchingUpdates;}}function flushSync(batch){var previousIsBatchingUpdates=isBatchingUpdates,previousPriorityContext=priorityContext;isBatchingUpdates=!0,priorityContext=SynchronousPriority$1;try{return batch();}finally{isBatchingUpdates=previousIsBatchingUpdates,priorityContext=previousPriorityContext,invariant(!isPerformingWork,"flushSync was called from inside a lifecycle method. It cannot be "+"called when React is already rendering."),performWork(TaskPriority$1,null);}}function deferredUpdates(fn){var previousPriorityContext=priorityContext;priorityContext=LowPriority;try{return fn();}finally{priorityContext=previousPriorityContext;}}return{scheduleUpdate:scheduleUpdate,getPriorityContext:getPriorityContext,batchedUpdates:batchedUpdates,unbatchedUpdates:unbatchedUpdates,flushSync:flushSync,deferredUpdates:deferredUpdates};},addTopLevelUpdate=ReactFiberUpdateQueue.addTopLevelUpdate,findCurrentUnmaskedContext=ReactFiberContext.findCurrentUnmaskedContext,isContextProvider=ReactFiberContext.isContextProvider,processChildContext=ReactFiberContext.processChildContext,createFiberRoot=ReactFiberRoot.createFiberRoot,HostComponent=ReactTypeOfWork.HostComponent,warning$1=require$$0,ReactFiberInstrumentation=ReactFiberInstrumentation_1,ReactDebugCurrentFiber=ReactDebugCurrentFiber_1,getComponentName=getComponentName_1,findCurrentHostFiber=ReactFiberTreeReflection.findCurrentHostFiber,findCurrentHostFiberWithNoPortals=ReactFiberTreeReflection.findCurrentHostFiberWithNoPortals;function getContextForSubtree(parentComponent){if(!parentComponent)return emptyObject;var fiber=ReactInstanceMap_1.get(parentComponent),parentContext=findCurrentUnmaskedContext(fiber);return isContextProvider(fiber)?processChildContext(fiber,parentContext):parentContext;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function");}var objects={},uniqueID=1,emptyObject$3={},ReactNativePropRegistry=function(){function ReactNativePropRegistry(){_classCallCheck(this,ReactNativePropRegistry);}return ReactNativePropRegistry.register=function(object){var id=++uniqueID;return Object.freeze(object),objects[id]=object,id;},ReactNativePropRegistry.getByID=function(id){if(!id)return emptyObject$3;var object=objects[id];return object||(console.warn("Invalid style with id `"+id+"`. Skipping ..."),emptyObject$3);},ReactNativePropRegistry;}(),ReactNativePropRegistry_1=ReactNativePropRegistry,emptyObject$2={},removedKeys=null,removedKeyCount=0;function defaultDiffer(prevProp,nextProp){return"object"!=typeof nextProp||null===nextProp||deepDiffer(prevProp,nextProp);}function resolveObject(idOrObject){return"number"==typeof idOrObject?ReactNativePropRegistry_1.getByID(idOrObject):idOrObject;}function restoreDeletedValuesInNestedArray(updatePayload,node,validAttributes){if(Array.isArray(node))for(var i=node.length;i--&&removedKeyCount>0;){restoreDeletedValuesInNestedArray(updatePayload,node[i],validAttributes);}else if(node&&removedKeyCount>0){var obj=resolveObject(node);for(var propKey in removedKeys){if(removedKeys[propKey]){var nextProp=obj[propKey];if(void 0!==nextProp){var attributeConfig=validAttributes[propKey];if(attributeConfig){if("function"==typeof nextProp&&(nextProp=!0),void 0===nextProp&&(nextProp=null),"object"!=typeof attributeConfig)updatePayload[propKey]=nextProp;else if("function"==typeof attributeConfig.diff||"function"==typeof attributeConfig.process){var nextValue="function"==typeof attributeConfig.process?attributeConfig.process(nextProp):nextProp;updatePayload[propKey]=nextValue;}removedKeys[propKey]=!1,removedKeyCount--;}}}}}}function diffNestedArrayProperty(updatePayload,prevArray,nextArray,validAttributes){var i,minLength=prevArray.length<nextArray.length?prevArray.length:nextArray.length;for(i=0;i<minLength;i++){updatePayload=diffNestedProperty(updatePayload,prevArray[i],nextArray[i],validAttributes);}for(;i<prevArray.length;i++){updatePayload=clearNestedProperty(updatePayload,prevArray[i],validAttributes);}for(;i<nextArray.length;i++){updatePayload=addNestedProperty(updatePayload,nextArray[i],validAttributes);}return updatePayload;}function diffNestedProperty(updatePayload,prevProp,nextProp,validAttributes){return updatePayload||prevProp!==nextProp?prevProp&&nextProp?Array.isArray(prevProp)||Array.isArray(nextProp)?Array.isArray(prevProp)&&Array.isArray(nextProp)?diffNestedArrayProperty(updatePayload,prevProp,nextProp,validAttributes):Array.isArray(prevProp)?diffProperties(updatePayload,flattenStyle(prevProp),resolveObject(nextProp),validAttributes):diffProperties(updatePayload,resolveObject(prevProp),flattenStyle(nextProp),validAttributes):diffProperties(updatePayload,resolveObject(prevProp),resolveObject(nextProp),validAttributes):nextProp?addNestedProperty(updatePayload,nextProp,validAttributes):prevProp?clearNestedProperty(updatePayload,prevProp,validAttributes):updatePayload:updatePayload;}function addNestedProperty(updatePayload,nextProp,validAttributes){if(!nextProp)return updatePayload;if(!Array.isArray(nextProp))return addProperties(updatePayload,resolveObject(nextProp),validAttributes);for(var i=0;i<nextProp.length;i++){updatePayload=addNestedProperty(updatePayload,nextProp[i],validAttributes);}return updatePayload;}function clearNestedProperty(updatePayload,prevProp,validAttributes){if(!prevProp)return updatePayload;if(!Array.isArray(prevProp))return clearProperties(updatePayload,resolveObject(prevProp),validAttributes);for(var i=0;i<prevProp.length;i++){updatePayload=clearNestedProperty(updatePayload,prevProp[i],validAttributes);}return updatePayload;}function diffProperties(updatePayload,prevProps,nextProps,validAttributes){var attributeConfig,nextProp,prevProp;for(var propKey in nextProps){if(attributeConfig=validAttributes[propKey])if(prevProp=prevProps[propKey],nextProp=nextProps[propKey],"function"==typeof nextProp&&(nextProp=!0,"function"==typeof prevProp&&(prevProp=!0)),void 0===nextProp&&(nextProp=null,void 0===prevProp&&(prevProp=null)),removedKeys&&(removedKeys[propKey]=!1),updatePayload&&void 0!==updatePayload[propKey]){if("object"!=typeof attributeConfig)updatePayload[propKey]=nextProp;else if("function"==typeof attributeConfig.diff||"function"==typeof attributeConfig.process){var nextValue="function"==typeof attributeConfig.process?attributeConfig.process(nextProp):nextProp;updatePayload[propKey]=nextValue;}}else if(prevProp!==nextProp)if("object"!=typeof attributeConfig)defaultDiffer(prevProp,nextProp)&&((updatePayload||(updatePayload={}))[propKey]=nextProp);else if("function"==typeof attributeConfig.diff||"function"==typeof attributeConfig.process){var shouldUpdate=void 0===prevProp||("function"==typeof attributeConfig.diff?attributeConfig.diff(prevProp,nextProp):defaultDiffer(prevProp,nextProp));shouldUpdate&&(nextValue="function"==typeof attributeConfig.process?attributeConfig.process(nextProp):nextProp,(updatePayload||(updatePayload={}))[propKey]=nextValue);}else removedKeys=null,removedKeyCount=0,updatePayload=diffNestedProperty(updatePayload,prevProp,nextProp,attributeConfig),removedKeyCount>0&&updatePayload&&(restoreDeletedValuesInNestedArray(updatePayload,nextProp,attributeConfig),removedKeys=null);}for(propKey in prevProps){void 0===nextProps[propKey]&&(attributeConfig=validAttributes[propKey])&&(updatePayload&&void 0!==updatePayload[propKey]||void 0!==(prevProp=prevProps[propKey])&&("object"!=typeof attributeConfig||"function"==typeof attributeConfig.diff||"function"==typeof attributeConfig.process?((updatePayload||(updatePayload={}))[propKey]=null,removedKeys||(removedKeys={}),removedKeys[propKey]||(removedKeys[propKey]=!0,removedKeyCount++)):updatePayload=clearNestedProperty(updatePayload,prevProp,attributeConfig)));}return updatePayload;}function addProperties(updatePayload,props,validAttributes){return diffProperties(updatePayload,emptyObject$2,props,validAttributes);}function clearProperties(updatePayload,prevProps,validAttributes){return diffProperties(updatePayload,prevProps,emptyObject$2,validAttributes);}var ReactNativeAttributePayload={create:function create(props,validAttributes){return addProperties(null,props,validAttributes);},diff:function diff(prevProps,nextProps,validAttributes){return diffProperties(null,prevProps,nextProps,validAttributes);}},ReactNativeAttributePayload_1=ReactNativeAttributePayload;function mountSafeCallback$1(context,callback){return function(){if(callback){if("boolean"==typeof context.__isMounted){if(!context.__isMounted)return;}else if("function"==typeof context.isMounted&&!context.isMounted())return;return callback.apply(context,arguments);}};}function throwOnStylesProp(component,props){if(void 0!==props.styles){var owner=component._owner||null,name=component.constructor.displayName,msg="`styles` is not a supported property of `"+name+"`, did "+"you mean `style` (singular)?";throw owner&&owner.constructor&&owner.constructor.displayName&&(msg+="\n\nCheck the `"+owner.constructor.displayName+"` parent "+" component."),new Error(msg);}}function warnForStyleProps$1(props,validAttributes){for(var key in validAttributes.style){validAttributes[key]||void 0===props[key]||console.error("You are setting the style `{ "+key+": ... }` as a prop. You "+"should nest it in a style object. "+"E.g. `{ style: { "+key+": ... } }`");}}var NativeMethodsMixinUtils={mountSafeCallback:mountSafeCallback$1,throwOnStylesProp:throwOnStylesProp,warnForStyleProps:warnForStyleProps$1};function _classCallCheck$1(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function");}var mountSafeCallback=NativeMethodsMixinUtils.mountSafeCallback,warnForStyleProps=NativeMethodsMixinUtils.warnForStyleProps,ReactNativeFiberHostComponent=function(){function ReactNativeFiberHostComponent(tag,viewConfig){_classCallCheck$1(this,ReactNativeFiberHostComponent),this._nativeTag=tag,this._children=[],this.viewConfig=viewConfig;}return ReactNativeFiberHostComponent.prototype.blur=function(){TextInputState.blurTextInput(this._nativeTag);},ReactNativeFiberHostComponent.prototype.focus=function(){TextInputState.focusTextInput(this._nativeTag);},ReactNativeFiberHostComponent.prototype.measure=function(callback){UIManager.measure(this._nativeTag,mountSafeCallback(this,callback));},ReactNativeFiberHostComponent.prototype.measureInWindow=function(callback){UIManager.measureInWindow(this._nativeTag,mountSafeCallback(this,callback));},ReactNativeFiberHostComponent.prototype.measureLayout=function(relativeToNativeNode,onSuccess,onFail){UIManager.measureLayout(this._nativeTag,relativeToNativeNode,mountSafeCallback(this,onFail),mountSafeCallback(this,onSuccess));},ReactNativeFiberHostComponent.prototype.setNativeProps=function(nativeProps){warnForStyleProps(nativeProps,this.viewConfig.validAttributes);var updatePayload=ReactNativeAttributePayload_1.create(nativeProps,this.viewConfig.validAttributes);null!=updatePayload&&UIManager.updateView(this._nativeTag,this.viewConfig.uiViewClassName,updatePayload);},ReactNativeFiberHostComponent;}(),ReactNativeFiberHostComponent_1=ReactNativeFiberHostComponent,INITIAL_TAG_COUNT=1,ReactNativeTagHandles={tagsStartAt:INITIAL_TAG_COUNT,tagCount:INITIAL_TAG_COUNT,allocateTag:function allocateTag(){for(;this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);){ReactNativeTagHandles.tagCount++;}var tag=ReactNativeTagHandles.tagCount;return ReactNativeTagHandles.tagCount++,tag;},assertRootTag:function assertRootTag(tag){invariant(this.reactTagIsNativeTopRootID(tag),"Expect a native root tag, instead got %s",tag);},reactTagIsNativeTopRootID:function reactTagIsNativeTopRootID(reactTag){return reactTag%10==1;}},ReactNativeTagHandles_1=ReactNativeTagHandles,viewConfigCallbacks=new Map(),viewConfigs=new Map(),ReactNativeViewConfigRegistry={register:function register(name,callback){return invariant(!viewConfigCallbacks.has(name),"Tried to register two views with the same name %s",name),viewConfigCallbacks.set(name,callback),name;},get:function get(name){var viewConfig=void 0;if(viewConfigs.has(name))viewConfig=viewConfigs.get(name);else{var callback=viewConfigCallbacks.get(name);invariant("function"==typeof callback,"View config not found for name %s",name),viewConfigCallbacks.set(name,null),viewConfig=callback(),viewConfigs.set(name,viewConfig);}return invariant(viewConfig,"View config not found for name %s",name),viewConfig;}},ReactNativeViewConfigRegistry_1=ReactNativeViewConfigRegistry,precacheFiberNode$1=ReactNativeComponentTree_1.precacheFiberNode,uncacheFiberNode$1=ReactNativeComponentTree_1.uncacheFiberNode,updateFiberProps$1=ReactNativeComponentTree_1.updateFiberProps;function recursivelyUncacheFiberNode(node){"number"==typeof node?uncacheFiberNode$1(node):(uncacheFiberNode$1(node._nativeTag),node._children.forEach(recursivelyUncacheFiberNode));}var NativeRenderer=function(config){var getPublicInstance=config.getPublicInstance,_ReactFiberScheduler=ReactFiberScheduler(config),scheduleUpdate=_ReactFiberScheduler.scheduleUpdate,getPriorityContext=_ReactFiberScheduler.getPriorityContext,batchedUpdates=_ReactFiberScheduler.batchedUpdates,unbatchedUpdates=_ReactFiberScheduler.unbatchedUpdates,flushSync=_ReactFiberScheduler.flushSync,deferredUpdates=_ReactFiberScheduler.deferredUpdates;function scheduleTopLevelUpdate(current,element,callback){"render"===ReactDebugCurrentFiber.phase&&null!==ReactDebugCurrentFiber.current&&warning$1(!1,"Render methods should be a pure function of props and state; "+"triggering nested component updates from render is not allowed. "+"If necessary, trigger nested updates in componentDidUpdate.\n\n"+"Check the render method of %s.",getComponentName(ReactDebugCurrentFiber.current)||"Unknown");var forceAsync=ReactFeatureFlags_1.enableAsyncSubtreeAPI&&null!=element&&null!=element.type&&null!=element.type.prototype&&!0===element.type.prototype.unstable_isAsyncReactComponent,priorityLevel=getPriorityContext(current,forceAsync),nextState={element:element};callback=void 0===callback?null:callback,warning$1(null===callback||"function"==typeof callback,"render(...): Expected the last optional `callback` argument to be a "+"function. Instead received: %s.",callback),addTopLevelUpdate(current,nextState,callback,priorityLevel),scheduleUpdate(current,priorityLevel);}return{createContainer:function createContainer(containerInfo){return createFiberRoot(containerInfo);},updateContainer:function updateContainer(element,container,parentComponent,callback){var current=container.current;ReactFiberInstrumentation.debugTool&&(null===current.alternate?ReactFiberInstrumentation.debugTool.onMountContainer(container):null===element?ReactFiberInstrumentation.debugTool.onUnmountContainer(container):ReactFiberInstrumentation.debugTool.onUpdateContainer(container));var context=getContextForSubtree(parentComponent);null===container.context?container.context=context:container.pendingContext=context,scheduleTopLevelUpdate(current,element,callback);},batchedUpdates:batchedUpdates,unbatchedUpdates:unbatchedUpdates,deferredUpdates:deferredUpdates,flushSync:flushSync,getPublicRootInstance:function getPublicRootInstance(container){var containerFiber=container.current;if(!containerFiber.child)return null;switch(containerFiber.child.tag){case HostComponent:return getPublicInstance(containerFiber.child.stateNode);default:return containerFiber.child.stateNode;}},findHostInstance:function findHostInstance(fiber){var hostFiber=findCurrentHostFiber(fiber);return null===hostFiber?null:hostFiber.stateNode;},findHostInstanceWithNoPortals:function findHostInstanceWithNoPortals(fiber){var hostFiber=findCurrentHostFiberWithNoPortals(fiber);return null===hostFiber?null:hostFiber.stateNode;}};}({appendChild:function appendChild(parentInstance,child){var childTag="number"==typeof child?child:child._nativeTag,children=parentInstance._children,index=children.indexOf(child);index>=0?(children.splice(index,1),children.push(child),UIManager.manageChildren(parentInstance._nativeTag,[index],[children.length-1],[],[],[])):(children.push(child),UIManager.manageChildren(parentInstance._nativeTag,[],[],[childTag],[children.length-1],[]));},appendChildToContainer:function appendChildToContainer(parentInstance,child){var childTag="number"==typeof child?child:child._nativeTag;UIManager.setChildren(parentInstance,[childTag]);},appendInitialChild:function appendInitialChild(parentInstance,child){parentInstance._children.push(child);},commitTextUpdate:function commitTextUpdate(textInstance,oldText,newText){UIManager.updateView(textInstance,"RCTRawText",{text:newText});},commitMount:function commitMount(instance,type,newProps,internalInstanceHandle){},commitUpdate:function commitUpdate(instance,updatePayloadTODO,type,oldProps,newProps,internalInstanceHandle){var viewConfig=instance.viewConfig;updateFiberProps$1(instance._nativeTag,newProps);var updatePayload=ReactNativeAttributePayload_1.diff(oldProps,newProps,viewConfig.validAttributes);null!=updatePayload&&UIManager.updateView(instance._nativeTag,viewConfig.uiViewClassName,updatePayload);},createInstance:function createInstance(type,props,rootContainerInstance,hostContext,internalInstanceHandle){var tag=ReactNativeTagHandles_1.allocateTag(),viewConfig=ReactNativeViewConfigRegistry_1.get(type);for(var key in viewConfig.validAttributes){props.hasOwnProperty(key)&&deepFreezeAndThrowOnMutationInDev(props[key]);}var updatePayload=ReactNativeAttributePayload_1.create(props,viewConfig.validAttributes);UIManager.createView(tag,viewConfig.uiViewClassName,rootContainerInstance,updatePayload);var component=new ReactNativeFiberHostComponent_1(tag,viewConfig);return precacheFiberNode$1(internalInstanceHandle,tag),updateFiberProps$1(tag,props),component;},createTextInstance:function createTextInstance(text,rootContainerInstance,hostContext,internalInstanceHandle){var tag=ReactNativeTagHandles_1.allocateTag();return UIManager.createView(tag,"RCTRawText",rootContainerInstance,{text:text}),precacheFiberNode$1(internalInstanceHandle,tag),tag;},finalizeInitialChildren:function finalizeInitialChildren(parentInstance,type,props,rootContainerInstance){if(0===parentInstance._children.length)return!1;var nativeTags=parentInstance._children.map(function(child){return"number"==typeof child?child:child._nativeTag;});return UIManager.setChildren(parentInstance._nativeTag,nativeTags),!1;},getRootHostContext:function getRootHostContext(){return emptyObject;},getChildHostContext:function getChildHostContext(){return emptyObject;},getPublicInstance:function getPublicInstance(instance){return instance;},insertBefore:function insertBefore(parentInstance,child,beforeChild){var children=parentInstance._children,index=children.indexOf(child);if(index>=0){children.splice(index,1);var beforeChildIndex=children.indexOf(beforeChild);children.splice(beforeChildIndex,0,child),UIManager.manageChildren(parentInstance._nativeTag,[index],[beforeChildIndex],[],[],[]);}else{var _beforeChildIndex=children.indexOf(beforeChild);children.splice(_beforeChildIndex,0,child);var childTag="number"==typeof child?child:child._nativeTag;UIManager.manageChildren(parentInstance._nativeTag,[],[],[childTag],[_beforeChildIndex],[]);}},insertInContainerBefore:function insertInContainerBefore(parentInstance,child,beforeChild){invariant("number"!=typeof parentInstance,"Container does not support insertBefore operation");},prepareForCommit:function prepareForCommit(){},prepareUpdate:function prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,hostContext){return emptyObject;},removeChild:function removeChild(parentInstance,child){recursivelyUncacheFiberNode(child);var children=parentInstance._children,index=children.indexOf(child);children.splice(index,1),UIManager.manageChildren(parentInstance._nativeTag,[],[],[],[],[index]);},removeChildFromContainer:function removeChildFromContainer(parentInstance,child){recursivelyUncacheFiberNode(child),UIManager.manageChildren(parentInstance,[],[],[],[],[0]);},resetAfterCommit:function resetAfterCommit(){},resetTextContent:function resetTextContent(instance){},shouldDeprioritizeSubtree:function shouldDeprioritizeSubtree(type,props){return!1;},scheduleDeferredCallback:commonjsGlobal.requestIdleCallback,shouldSetTextContent:function shouldSetTextContent(type,props){return!1;},useSyncScheduling:!0}),ReactNativeFiberRenderer=NativeRenderer,getClosestInstanceFromNode=ReactNativeComponentTree_1.getClosestInstanceFromNode,findCurrentFiberUsingSlowPath$1=ReactFiberTreeReflection.findCurrentFiberUsingSlowPath,HostComponent$10=ReactTypeOfWork.HostComponent,getInspectorDataForViewTag=void 0,traverseOwnerTreeUp=function traverseOwnerTreeUp(hierarchy,instance){instance&&(hierarchy.unshift(instance),traverseOwnerTreeUp(hierarchy,instance._debugOwner));},getOwnerHierarchy=function getOwnerHierarchy(instance){var hierarchy=[];return traverseOwnerTreeUp(hierarchy,instance),hierarchy;},lastNonHostInstance=function lastNonHostInstance(hierarchy){for(var i=hierarchy.length-1;i>1;i--){var instance=hierarchy[i];if(instance.tag!==HostComponent$10)return instance;}return hierarchy[0];},getHostProps=function getHostProps(fiber){var host=ReactFiberTreeReflection.findCurrentHostFiber(fiber);return host?host.memoizedProps||emptyObject:emptyObject;},getHostNode=function getHostNode(fiber,findNodeHandle){for(var hostNode=void 0;fiber;){if(null!==fiber.stateNode&&fiber.tag===HostComponent$10&&(hostNode=findNodeHandle(fiber.stateNode)),hostNode)return hostNode;fiber=fiber.child;}return null;},createHierarchy=function createHierarchy(fiberHierarchy){return fiberHierarchy.map(function(fiber){return{name:getComponentName_1(fiber),getInspectorData:function getInspectorData(findNodeHandle){return{measure:function measure(callback){return UIManager.measure(getHostNode(fiber,findNodeHandle),callback);},props:getHostProps(fiber),source:fiber._debugSource};}};});};getInspectorDataForViewTag=function getInspectorDataForViewTag(viewTag){var closestInstance=getClosestInstanceFromNode(viewTag);if(!closestInstance)return{hierarchy:[],props:emptyObject,selection:null,source:null};var fiber=findCurrentFiberUsingSlowPath$1(closestInstance),fiberHierarchy=getOwnerHierarchy(fiber),instance=lastNonHostInstance(fiberHierarchy),hierarchy=createHierarchy(fiberHierarchy),props=getHostProps(instance),source=instance._debugSource;return{hierarchy:hierarchy,props:props,selection:fiberHierarchy.indexOf(instance),source:source};};var ReactNativeFiberInspector={getInspectorDataForViewTag:getInspectorDataForViewTag},ReactVersion="16.0.0",ReactCurrentOwner$3=ReactGlobalSharedState_1.ReactCurrentOwner,warning$11=require$$0;function findNodeHandle(componentOrHandle){var owner=ReactCurrentOwner$3.current;if(null!==owner&&null!==owner.stateNode&&(warning$11(owner.stateNode._warnedAboutRefsInRender,"%s is accessing findNodeHandle inside its render(). "+"render() should be a pure function of props and state. It should "+"never access something that requires stale data from the previous "+"render, such as refs. Move this logic to componentDidMount and "+"componentDidUpdate instead.",getComponentName_1(owner)||"A component"),owner.stateNode._warnedAboutRefsInRender=!0),null==componentOrHandle)return null;if("number"==typeof componentOrHandle)return componentOrHandle;var component=componentOrHandle,internalInstance=ReactInstanceMap_1.get(component);return internalInstance?ReactNativeFiberRenderer.findHostInstance(internalInstance):component||(invariant("object"==typeof component&&"_nativeTag"in component||null!=component.render&&"function"==typeof component.render,"findNodeHandle(...): Argument is not a component "+"(type: %s, keys: %s)",typeof component,Object.keys(component)),void invariant(!1,"findNodeHandle(...): Unable to find node handle for unmounted "+"component."));}var findNodeHandle_1=findNodeHandle,findNumericNodeHandle=function findNumericNodeHandle(componentOrHandle){var instance=findNodeHandle_1(componentOrHandle);return null==instance||"number"==typeof instance?instance:instance._nativeTag;},eventPluginOrder=null,namesToPlugins={};function recomputePluginOrdering(){if(eventPluginOrder)for(var pluginName in namesToPlugins){var pluginModule=namesToPlugins[pluginName],pluginIndex=eventPluginOrder.indexOf(pluginName);if(invariant(pluginIndex>-1,"EventPluginRegistry: Cannot inject event plugins that do not exist in "+"the plugin ordering, `%s`.",pluginName),!EventPluginRegistry.plugins[pluginIndex]){invariant(pluginModule.extractEvents,"EventPluginRegistry: Event plugins must implement an `extractEvents` "+"method, but `%s` does not.",pluginName),EventPluginRegistry.plugins[pluginIndex]=pluginModule;var publishedEvents=pluginModule.eventTypes;for(var eventName in publishedEvents){invariant(publishEventForPlugin(publishedEvents[eventName],pluginModule,eventName),"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",eventName,pluginName);}}}}function publishEventForPlugin(dispatchConfig,pluginModule,eventName){invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),"EventPluginHub: More than one plugin attempted to publish the same "+"event name, `%s`.",eventName),EventPluginRegistry.eventNameDispatchConfigs[eventName]=dispatchConfig;var phasedRegistrationNames=dispatchConfig.phasedRegistrationNames;if(phasedRegistrationNames){for(var phaseName in phasedRegistrationNames){if(phasedRegistrationNames.hasOwnProperty(phaseName)){var phasedRegistrationName=phasedRegistrationNames[phaseName];publishRegistrationName(phasedRegistrationName,pluginModule,eventName);}}return!0;}return!!dispatchConfig.registrationName&&(publishRegistrationName(dispatchConfig.registrationName,pluginModule,eventName),!0);}function publishRegistrationName(registrationName,pluginModule,eventName){invariant(!EventPluginRegistry.registrationNameModules[registrationName],"EventPluginHub: More than one plugin attempted to publish the same "+"registration name, `%s`.",registrationName),EventPluginRegistry.registrationNameModules[registrationName]=pluginModule,EventPluginRegistry.registrationNameDependencies[registrationName]=pluginModule.eventTypes[eventName].dependencies;var lowerCasedName=registrationName.toLowerCase();EventPluginRegistry.possibleRegistrationNames[lowerCasedName]=registrationName,"onDoubleClick"===registrationName&&(EventPluginRegistry.possibleRegistrationNames.ondblclick=registrationName);}var EventPluginRegistry={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:{},injectEventPluginOrder:function injectEventPluginOrder(injectedEventPluginOrder){invariant(!eventPluginOrder,"EventPluginRegistry: Cannot inject event plugin ordering more than "+"once. You are likely trying to load more than one copy of React."),eventPluginOrder=Array.prototype.slice.call(injectedEventPluginOrder),recomputePluginOrdering();},injectEventPluginsByName:function injectEventPluginsByName(injectedNamesToPlugins){var isOrderingDirty=!1;for(var pluginName in injectedNamesToPlugins){if(injectedNamesToPlugins.hasOwnProperty(pluginName)){var pluginModule=injectedNamesToPlugins[pluginName];namesToPlugins.hasOwnProperty(pluginName)&&namesToPlugins[pluginName]===pluginModule||(invariant(!namesToPlugins[pluginName],"EventPluginRegistry: Cannot inject two different event plugins "+"using the same name, `%s`.",pluginName),namesToPlugins[pluginName]=pluginModule,isOrderingDirty=!0);}}isOrderingDirty&&recomputePluginOrdering();}},EventPluginRegistry_1=EventPluginRegistry;function accumulateInto(current,next){return invariant(null!=next,"accumulateInto(...): Accumulated items must not be null or undefined."),null==current?next:Array.isArray(current)?Array.isArray(next)?(current.push.apply(current,next),current):(current.push(next),current):Array.isArray(next)?[current].concat(next):[current,next];}var accumulateInto_1=accumulateInto;function forEachAccumulated(arr,cb,scope){Array.isArray(arr)?arr.forEach(cb,scope):arr&&cb.call(scope,arr);}var forEachAccumulated_1=forEachAccumulated,eventQueue=null,executeDispatchesAndRelease=function executeDispatchesAndRelease(event,simulated){event&&(EventPluginUtils_1.executeDispatchesInOrder(event,simulated),event.isPersistent()||event.constructor.release(event));},executeDispatchesAndReleaseSimulated=function executeDispatchesAndReleaseSimulated(e){return executeDispatchesAndRelease(e,!0);},executeDispatchesAndReleaseTopLevel=function executeDispatchesAndReleaseTopLevel(e){return executeDispatchesAndRelease(e,!1);};function isInteractive(tag){return"button"===tag||"input"===tag||"select"===tag||"textarea"===tag;}function shouldPreventMouseEvent(name,type,props){switch(name){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!props.disabled||!isInteractive(type));default:return!1;}}var EventPluginHub={injection:{injectEventPluginOrder:EventPluginRegistry_1.injectEventPluginOrder,injectEventPluginsByName:EventPluginRegistry_1.injectEventPluginsByName},getListener:function getListener(inst,registrationName){var listener,stateNode=inst.stateNode;if(!stateNode)return null;var props=EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);return props?(listener=props[registrationName],shouldPreventMouseEvent(registrationName,inst.type,props)?null:(invariant(!listener||"function"==typeof listener,"Expected `%s` listener to be a function, instead got a value of `%s` type.",registrationName,typeof listener),listener)):null;},extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){for(var events,plugins=EventPluginRegistry_1.plugins,i=0;i<plugins.length;i++){var possiblePlugin=plugins[i];if(possiblePlugin){var extractedEvents=possiblePlugin.extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget);extractedEvents&&(events=accumulateInto_1(events,extractedEvents));}}return events;},enqueueEvents:function enqueueEvents(events){events&&(eventQueue=accumulateInto_1(eventQueue,events));},processEventQueue:function processEventQueue(simulated){var processingEventQueue=eventQueue;eventQueue=null,simulated?forEachAccumulated_1(processingEventQueue,executeDispatchesAndReleaseSimulated):forEachAccumulated_1(processingEventQueue,executeDispatchesAndReleaseTopLevel),invariant(!eventQueue,"processEventQueue(): Additional events were enqueued while processing "+"an event queue. Support for this has not yet been implemented."),ReactErrorUtils_1.rethrowCaughtError();}},EventPluginHub_1=EventPluginHub,HostComponent$11=ReactTypeOfWork.HostComponent;function getParent(inst){do{inst=inst.return;}while(inst&&inst.tag!==HostComponent$11);return inst||null;}function getLowestCommonAncestor(instA,instB){for(var depthA=0,tempA=instA;tempA;tempA=getParent(tempA)){depthA++;}for(var depthB=0,tempB=instB;tempB;tempB=getParent(tempB)){depthB++;}for(;depthA-depthB>0;){instA=getParent(instA),depthA--;}for(;depthB-depthA>0;){instB=getParent(instB),depthB--;}for(var depth=depthA;depth--;){if(instA===instB||instA===instB.alternate)return instA;instA=getParent(instA),instB=getParent(instB);}return null;}function isAncestor(instA,instB){for(;instB;){if(instA===instB||instA===instB.alternate)return!0;instB=getParent(instB);}return!1;}function getParentInstance(inst){return getParent(inst);}function traverseTwoPhase(inst,fn,arg){for(var path=[];inst;){path.push(inst),inst=getParent(inst);}var i;for(i=path.length;i-->0;){fn(path[i],"captured",arg);}for(i=0;i<path.length;i++){fn(path[i],"bubbled",arg);}}function traverseEnterLeave(from,to,fn,argFrom,argTo){for(var common=from&&to?getLowestCommonAncestor(from,to):null,pathFrom=[];from&&from!==common;){pathFrom.push(from),from=getParent(from);}for(var pathTo=[];to&&to!==common;){pathTo.push(to),to=getParent(to);}var i;for(i=0;i<pathFrom.length;i++){fn(pathFrom[i],"bubbled",argFrom);}for(i=pathTo.length;i-->0;){fn(pathTo[i],"captured",argTo);}}var ReactTreeTraversal={isAncestor:isAncestor,getLowestCommonAncestor:getLowestCommonAncestor,getParentInstance:getParentInstance,traverseTwoPhase:traverseTwoPhase,traverseEnterLeave:traverseEnterLeave},getListener=EventPluginHub_1.getListener,warning$12=require$$0;function listenerAtPhase(inst,event,propagationPhase){var registrationName=event.dispatchConfig.phasedRegistrationNames[propagationPhase];return getListener(inst,registrationName);}function accumulateDirectionalDispatches(inst,phase,event){warning$12(inst,"Dispatching inst must not be null");var listener=listenerAtPhase(inst,event,phase);listener&&(event._dispatchListeners=accumulateInto_1(event._dispatchListeners,listener),event._dispatchInstances=accumulateInto_1(event._dispatchInstances,inst));}function accumulateTwoPhaseDispatchesSingle(event){event&&event.dispatchConfig.phasedRegistrationNames&&ReactTreeTraversal.traverseTwoPhase(event._targetInst,accumulateDirectionalDispatches,event);}function accumulateTwoPhaseDispatchesSingleSkipTarget(event){if(event&&event.dispatchConfig.phasedRegistrationNames){var targetInst=event._targetInst,parentInst=targetInst?ReactTreeTraversal.getParentInstance(targetInst):null;ReactTreeTraversal.traverseTwoPhase(parentInst,accumulateDirectionalDispatches,event);}}function accumulateDispatches(inst,ignoredDirection,event){if(inst&&event&&event.dispatchConfig.registrationName){var registrationName=event.dispatchConfig.registrationName,listener=getListener(inst,registrationName);listener&&(event._dispatchListeners=accumulateInto_1(event._dispatchListeners,listener),event._dispatchInstances=accumulateInto_1(event._dispatchInstances,inst));}}function accumulateDirectDispatchesSingle(event){event&&event.dispatchConfig.registrationName&&accumulateDispatches(event._targetInst,null,event);}function accumulateTwoPhaseDispatches(events){forEachAccumulated_1(events,accumulateTwoPhaseDispatchesSingle);}function accumulateTwoPhaseDispatchesSkipTarget(events){forEachAccumulated_1(events,accumulateTwoPhaseDispatchesSingleSkipTarget);}function accumulateEnterLeaveDispatches(leave,enter,from,to){ReactTreeTraversal.traverseEnterLeave(from,to,accumulateDispatches,leave,enter);}function accumulateDirectDispatches(events){forEachAccumulated_1(events,accumulateDirectDispatchesSingle);}var EventPropagators={accumulateTwoPhaseDispatches:accumulateTwoPhaseDispatches,accumulateTwoPhaseDispatchesSkipTarget:accumulateTwoPhaseDispatchesSkipTarget,accumulateDirectDispatches:accumulateDirectDispatches,accumulateEnterLeaveDispatches:accumulateEnterLeaveDispatches},EventPropagators_1=EventPropagators,didWarnForAddedNewProperty=!1,isProxySupported="function"==typeof Proxy,EVENT_POOL_SIZE=10,warning$13=require$$0,shouldBeReleasedProperties=["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"],EventInterface={type:null,target:null,currentTarget:emptyFunction.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function timeStamp(event){return event.timeStamp||Date.now();},defaultPrevented:null,isTrusted:null};function SyntheticEvent(dispatchConfig,targetInst,nativeEvent,nativeEventTarget){delete this.nativeEvent,delete this.preventDefault,delete this.stopPropagation,this.dispatchConfig=dispatchConfig,this._targetInst=targetInst,this.nativeEvent=nativeEvent;var Interface=this.constructor.Interface;for(var propName in Interface){if(Interface.hasOwnProperty(propName)){delete this[propName];var normalize=Interface[propName];normalize?this[propName]=normalize(nativeEvent):"target"===propName?this.target=nativeEventTarget:this[propName]=nativeEvent[propName];}}var defaultPrevented=null!=nativeEvent.defaultPrevented?nativeEvent.defaultPrevented:!1===nativeEvent.returnValue;return this.isDefaultPrevented=defaultPrevented?emptyFunction.thatReturnsTrue:emptyFunction.thatReturnsFalse,this.isPropagationStopped=emptyFunction.thatReturnsFalse,this;}_extends(SyntheticEvent.prototype,{preventDefault:function preventDefault(){this.defaultPrevented=!0;var event=this.nativeEvent;event&&(event.preventDefault?event.preventDefault():"unknown"!=typeof event.returnValue&&(event.returnValue=!1),this.isDefaultPrevented=emptyFunction.thatReturnsTrue);},stopPropagation:function stopPropagation(){var event=this.nativeEvent;event&&(event.stopPropagation?event.stopPropagation():"unknown"!=typeof event.cancelBubble&&(event.cancelBubble=!0),this.isPropagationStopped=emptyFunction.thatReturnsTrue);},persist:function persist(){this.isPersistent=emptyFunction.thatReturnsTrue;},isPersistent:emptyFunction.thatReturnsFalse,destructor:function destructor(){var Interface=this.constructor.Interface;for(var propName in Interface){Object.defineProperty(this,propName,getPooledWarningPropertyDefinition(propName,Interface[propName]));}for(var i=0;i<shouldBeReleasedProperties.length;i++){this[shouldBeReleasedProperties[i]]=null;}Object.defineProperty(this,"nativeEvent",getPooledWarningPropertyDefinition("nativeEvent",null)),Object.defineProperty(this,"preventDefault",getPooledWarningPropertyDefinition("preventDefault",emptyFunction)),Object.defineProperty(this,"stopPropagation",getPooledWarningPropertyDefinition("stopPropagation",emptyFunction));}}),SyntheticEvent.Interface=EventInterface,SyntheticEvent.augmentClass=function(Class,Interface){var Super=this,E=function E(){};E.prototype=Super.prototype;var prototype=new E();_extends(prototype,Class.prototype),Class.prototype=prototype,Class.prototype.constructor=Class,Class.Interface=_extends({},Super.Interface,Interface),Class.augmentClass=Super.augmentClass,addEventPoolingTo(Class);},isProxySupported&&(SyntheticEvent=new Proxy(SyntheticEvent,{construct:function construct(target,args){return this.apply(target,Object.create(target.prototype),args);},apply:function apply(constructor,that,args){return new Proxy(constructor.apply(that,args),{set:function set(target,prop,value){return"isPersistent"===prop||target.constructor.Interface.hasOwnProperty(prop)||-1!==shouldBeReleasedProperties.indexOf(prop)||(warning$13(didWarnForAddedNewProperty||target.isPersistent(),"This synthetic event is reused for performance reasons. If you're "+"seeing this, you're adding a new property in the synthetic event object. "+"The property is never released. See "+"https://fb.me/react-event-pooling for more information."),didWarnForAddedNewProperty=!0),target[prop]=value,!0;}});}})),addEventPoolingTo(SyntheticEvent);var SyntheticEvent_1=SyntheticEvent;function getPooledWarningPropertyDefinition(propName,getVal){var isFunction="function"==typeof getVal;return{configurable:!0,set:set,get:get};function set(val){return warn(isFunction?"setting the method":"setting the property","This is effectively a no-op"),val;}function get(){return warn(isFunction?"accessing the method":"accessing the property",isFunction?"This is a no-op function":"This is set to null"),getVal;}function warn(action,result){warning$13(!1,"This synthetic event is reused for performance reasons. If you're seeing this, "+"you're %s `%s` on a released/nullified synthetic event. %s. "+"If you must keep the original synthetic event around, use event.persist(). "+"See https://fb.me/react-event-pooling for more information.",action,propName,result);}}function getPooledEvent(dispatchConfig,targetInst,nativeEvent,nativeInst){var EventConstructor=this;if(EventConstructor.eventPool.length){var instance=EventConstructor.eventPool.pop();return EventConstructor.call(instance,dispatchConfig,targetInst,nativeEvent,nativeInst),instance;}return new EventConstructor(dispatchConfig,targetInst,nativeEvent,nativeInst);}function releasePooledEvent(event){var EventConstructor=this;invariant(event instanceof EventConstructor,"Trying to release an event instance  into a pool of a different type."),event.destructor(),EventConstructor.eventPool.length<EVENT_POOL_SIZE&&EventConstructor.eventPool.push(event);}function addEventPoolingTo(EventConstructor){EventConstructor.eventPool=[],EventConstructor.getPooled=getPooledEvent,EventConstructor.release=releasePooledEvent;}var customBubblingEventTypes={},customDirectEventTypes={},ReactNativeBridgeEventPlugin={eventTypes:{},extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var bubbleDispatchConfig=customBubblingEventTypes[topLevelType],directDispatchConfig=customDirectEventTypes[topLevelType];invariant(bubbleDispatchConfig||directDispatchConfig,'Unsupported top level event type "%s" dispatched',topLevelType);var event=SyntheticEvent_1.getPooled(bubbleDispatchConfig||directDispatchConfig,targetInst,nativeEvent,nativeEventTarget);if(bubbleDispatchConfig)EventPropagators_1.accumulateTwoPhaseDispatches(event);else{if(!directDispatchConfig)return null;EventPropagators_1.accumulateDirectDispatches(event);}return event;},processEventTypes:function processEventTypes(viewConfig){var bubblingEventTypes=viewConfig.bubblingEventTypes,directEventTypes=viewConfig.directEventTypes;if(null!=bubblingEventTypes&&null!=directEventTypes)for(var topLevelType in directEventTypes){invariant(null==bubblingEventTypes[topLevelType],"Event cannot be both direct and bubbling: %s",topLevelType);}if(null!=bubblingEventTypes)for(var _topLevelType in bubblingEventTypes){null==customBubblingEventTypes[_topLevelType]&&(ReactNativeBridgeEventPlugin.eventTypes[_topLevelType]=customBubblingEventTypes[_topLevelType]=bubblingEventTypes[_topLevelType]);}if(null!=directEventTypes)for(var _topLevelType2 in directEventTypes){null==customDirectEventTypes[_topLevelType2]&&(ReactNativeBridgeEventPlugin.eventTypes[_topLevelType2]=customDirectEventTypes[_topLevelType2]=directEventTypes[_topLevelType2]);}}},ReactNativeBridgeEventPlugin_1=ReactNativeBridgeEventPlugin;function runEventQueueInBatch(events){EventPluginHub_1.enqueueEvents(events),EventPluginHub_1.processEventQueue(!1);}var ReactEventEmitterMixin={handleTopLevel:function handleTopLevel(topLevelType,targetInst,nativeEvent,nativeEventTarget){runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget));}},ReactEventEmitterMixin_1=ReactEventEmitterMixin,warning$14=require$$0,EMPTY_NATIVE_EVENT={},touchSubsequence=function touchSubsequence(touches,indices){for(var ret=[],i=0;i<indices.length;i++){ret.push(touches[indices[i]]);}return ret;},removeTouchesAtIndices=function removeTouchesAtIndices(touches,indices){for(var rippedOut=[],temp=touches,i=0;i<indices.length;i++){var index=indices[i];rippedOut.push(touches[index]),temp[index]=null;}for(var fillAt=0,j=0;j<temp.length;j++){var cur=temp[j];null!==cur&&(temp[fillAt++]=cur);}return temp.length=fillAt,rippedOut;},ReactNativeEventEmitter=_extends({},ReactEventEmitterMixin_1,{registrationNames:EventPluginRegistry_1.registrationNameModules,getListener:EventPluginHub_1.getListener,_receiveRootNodeIDEvent:function _receiveRootNodeIDEvent(rootNodeID,topLevelType,nativeEventParam){var nativeEvent=nativeEventParam||EMPTY_NATIVE_EVENT,inst=ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);ReactGenericBatching_1.batchedUpdates(function(){ReactNativeEventEmitter.handleTopLevel(topLevelType,inst,nativeEvent,nativeEvent.target);});},receiveEvent:function receiveEvent(rootNodeID,topLevelType,nativeEventParam){ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID,topLevelType,nativeEventParam);},receiveTouches:function receiveTouches(eventTopLevelType,touches,changedIndices){for(var changedTouches="topTouchEnd"===eventTopLevelType||"topTouchCancel"===eventTopLevelType?removeTouchesAtIndices(touches,changedIndices):touchSubsequence(touches,changedIndices),jj=0;jj<changedTouches.length;jj++){var touch=changedTouches[jj];touch.changedTouches=changedTouches,touch.touches=touches;var nativeEvent=touch,rootNodeID=null,target=nativeEvent.target;null!==target&&void 0!==target&&(target<ReactNativeTagHandles_1.tagsStartAt?warning$14(!1,"A view is reporting that a touch occurred on tag zero."):rootNodeID=target),ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID,eventTopLevelType,nativeEvent);}}}),ReactNativeEventEmitter_1=ReactNativeEventEmitter,ReactNativeEventPluginOrder=["ResponderEventPlugin","ReactNativeBridgeEventPlugin"],ReactNativeEventPluginOrder_1=ReactNativeEventPluginOrder,ReactNativeGlobalResponderHandler={onChange:function onChange(from,to,blockNativeResponder){if(null!==to){var tag=to.stateNode._nativeTag;UIManager.setJSResponder(tag,blockNativeResponder);}else UIManager.clearJSResponder();}},ReactNativeGlobalResponderHandler_1=ReactNativeGlobalResponderHandler,ResponderEventInterface={touchHistory:function touchHistory(nativeEvent){return null;}};function ResponderSyntheticEvent(dispatchConfig,dispatchMarker,nativeEvent,nativeEventTarget){return SyntheticEvent_1.call(this,dispatchConfig,dispatchMarker,nativeEvent,nativeEventTarget);}SyntheticEvent_1.augmentClass(ResponderSyntheticEvent,ResponderEventInterface);var ResponderSyntheticEvent_1=ResponderSyntheticEvent,isEndish$2=EventPluginUtils_1.isEndish,isMoveish$2=EventPluginUtils_1.isMoveish,isStartish$2=EventPluginUtils_1.isStartish,warning$15=require$$0,MAX_TOUCH_BANK=20,touchBank=[],touchHistory={touchBank:touchBank,numberActiveTouches:0,indexOfSingleActiveTouch:-1,mostRecentTimeStamp:0};function timestampForTouch(touch){return touch.timeStamp||touch.timestamp;}function createTouchRecord(touch){return{touchActive:!0,startPageX:touch.pageX,startPageY:touch.pageY,startTimeStamp:timestampForTouch(touch),currentPageX:touch.pageX,currentPageY:touch.pageY,currentTimeStamp:timestampForTouch(touch),previousPageX:touch.pageX,previousPageY:touch.pageY,previousTimeStamp:timestampForTouch(touch)};}function resetTouchRecord(touchRecord,touch){touchRecord.touchActive=!0,touchRecord.startPageX=touch.pageX,touchRecord.startPageY=touch.pageY,touchRecord.startTimeStamp=timestampForTouch(touch),touchRecord.currentPageX=touch.pageX,touchRecord.currentPageY=touch.pageY,touchRecord.currentTimeStamp=timestampForTouch(touch),touchRecord.previousPageX=touch.pageX,touchRecord.previousPageY=touch.pageY,touchRecord.previousTimeStamp=timestampForTouch(touch);}function getTouchIdentifier(_ref){var identifier=_ref.identifier;return invariant(null!=identifier,"Touch object is missing identifier."),warning$15(identifier<=MAX_TOUCH_BANK,"Touch identifier %s is greater than maximum supported %s which causes "+"performance issues backfilling array locations for all of the indices.",identifier,MAX_TOUCH_BANK),identifier;}function recordTouchStart(touch){var identifier=getTouchIdentifier(touch),touchRecord=touchBank[identifier];touchRecord?resetTouchRecord(touchRecord,touch):touchBank[identifier]=createTouchRecord(touch),touchHistory.mostRecentTimeStamp=timestampForTouch(touch);}function recordTouchMove(touch){var touchRecord=touchBank[getTouchIdentifier(touch)];touchRecord?(touchRecord.touchActive=!0,touchRecord.previousPageX=touchRecord.currentPageX,touchRecord.previousPageY=touchRecord.currentPageY,touchRecord.previousTimeStamp=touchRecord.currentTimeStamp,touchRecord.currentPageX=touch.pageX,touchRecord.currentPageY=touch.pageY,touchRecord.currentTimeStamp=timestampForTouch(touch),touchHistory.mostRecentTimeStamp=timestampForTouch(touch)):console.error("Cannot record touch move without a touch start.\n"+"Touch Move: %s\n","Touch Bank: %s",printTouch(touch),printTouchBank());}function recordTouchEnd(touch){var touchRecord=touchBank[getTouchIdentifier(touch)];touchRecord?(touchRecord.touchActive=!1,touchRecord.previousPageX=touchRecord.currentPageX,touchRecord.previousPageY=touchRecord.currentPageY,touchRecord.previousTimeStamp=touchRecord.currentTimeStamp,touchRecord.currentPageX=touch.pageX,touchRecord.currentPageY=touch.pageY,touchRecord.currentTimeStamp=timestampForTouch(touch),touchHistory.mostRecentTimeStamp=timestampForTouch(touch)):console.error("Cannot record touch end without a touch start.\n"+"Touch End: %s\n","Touch Bank: %s",printTouch(touch),printTouchBank());}function printTouch(touch){return JSON.stringify({identifier:touch.identifier,pageX:touch.pageX,pageY:touch.pageY,timestamp:timestampForTouch(touch)});}function printTouchBank(){var printed=JSON.stringify(touchBank.slice(0,MAX_TOUCH_BANK));return touchBank.length>MAX_TOUCH_BANK&&(printed+=" (original size: "+touchBank.length+")"),printed;}var ResponderTouchHistoryStore={recordTouchTrack:function recordTouchTrack(topLevelType,nativeEvent){if(isMoveish$2(topLevelType))nativeEvent.changedTouches.forEach(recordTouchMove);else if(isStartish$2(topLevelType))nativeEvent.changedTouches.forEach(recordTouchStart),touchHistory.numberActiveTouches=nativeEvent.touches.length,1===touchHistory.numberActiveTouches&&(touchHistory.indexOfSingleActiveTouch=nativeEvent.touches[0].identifier);else if(isEndish$2(topLevelType)&&(nativeEvent.changedTouches.forEach(recordTouchEnd),touchHistory.numberActiveTouches=nativeEvent.touches.length,1===touchHistory.numberActiveTouches)){for(var i=0;i<touchBank.length;i++){var touchTrackToCheck=touchBank[i];if(null!=touchTrackToCheck&&touchTrackToCheck.touchActive){touchHistory.indexOfSingleActiveTouch=i;break;}}var activeRecord=touchBank[touchHistory.indexOfSingleActiveTouch];warning$15(null!=activeRecord&&activeRecord.touchActive,"Cannot find single active touch.");}},touchHistory:touchHistory},ResponderTouchHistoryStore_1=ResponderTouchHistoryStore;function accumulate(current,next){return invariant(null!=next,"accumulate(...): Accumulated items must be not be null or undefined."),null==current?next:Array.isArray(current)?current.concat(next):Array.isArray(next)?[current].concat(next):[current,next];}var accumulate_1=accumulate,isStartish$1=EventPluginUtils_1.isStartish,isMoveish$1=EventPluginUtils_1.isMoveish,isEndish$1=EventPluginUtils_1.isEndish,executeDirectDispatch$1=EventPluginUtils_1.executeDirectDispatch,hasDispatches$1=EventPluginUtils_1.hasDispatches,executeDispatchesInOrderStopAtTrue$1=EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,responderInst=null,trackedTouchCount=0,previousActiveTouches=0,changeResponder=function changeResponder(nextResponderInst,blockHostResponder){var oldResponderInst=responderInst;responderInst=nextResponderInst,null!==ResponderEventPlugin.GlobalResponderHandler&&ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst,nextResponderInst,blockHostResponder);},eventTypes={startShouldSetResponder:{phasedRegistrationNames:{bubbled:"onStartShouldSetResponder",captured:"onStartShouldSetResponderCapture"}},scrollShouldSetResponder:{phasedRegistrationNames:{bubbled:"onScrollShouldSetResponder",captured:"onScrollShouldSetResponderCapture"}},selectionChangeShouldSetResponder:{phasedRegistrationNames:{bubbled:"onSelectionChangeShouldSetResponder",captured:"onSelectionChangeShouldSetResponderCapture"}},moveShouldSetResponder:{phasedRegistrationNames:{bubbled:"onMoveShouldSetResponder",captured:"onMoveShouldSetResponderCapture"}},responderStart:{registrationName:"onResponderStart"},responderMove:{registrationName:"onResponderMove"},responderEnd:{registrationName:"onResponderEnd"},responderRelease:{registrationName:"onResponderRelease"},responderTerminationRequest:{registrationName:"onResponderTerminationRequest"},responderGrant:{registrationName:"onResponderGrant"},responderReject:{registrationName:"onResponderReject"},responderTerminate:{registrationName:"onResponderTerminate"}};function setResponderAndExtractTransfer(topLevelType,targetInst,nativeEvent,nativeEventTarget){var shouldSetEventType=isStartish$1(topLevelType)?eventTypes.startShouldSetResponder:isMoveish$1(topLevelType)?eventTypes.moveShouldSetResponder:"topSelectionChange"===topLevelType?eventTypes.selectionChangeShouldSetResponder:eventTypes.scrollShouldSetResponder,bubbleShouldSetFrom=responderInst?ReactTreeTraversal.getLowestCommonAncestor(responderInst,targetInst):targetInst,skipOverBubbleShouldSetFrom=bubbleShouldSetFrom===responderInst,shouldSetEvent=ResponderSyntheticEvent_1.getPooled(shouldSetEventType,bubbleShouldSetFrom,nativeEvent,nativeEventTarget);shouldSetEvent.touchHistory=ResponderTouchHistoryStore_1.touchHistory,skipOverBubbleShouldSetFrom?EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent):EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);var wantsResponderInst=executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);if(shouldSetEvent.isPersistent()||shouldSetEvent.constructor.release(shouldSetEvent),!wantsResponderInst||wantsResponderInst===responderInst)return null;var extracted,grantEvent=ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant,wantsResponderInst,nativeEvent,nativeEventTarget);grantEvent.touchHistory=ResponderTouchHistoryStore_1.touchHistory,EventPropagators_1.accumulateDirectDispatches(grantEvent);var blockHostResponder=!0===executeDirectDispatch$1(grantEvent);if(responderInst){var terminationRequestEvent=ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest,responderInst,nativeEvent,nativeEventTarget);terminationRequestEvent.touchHistory=ResponderTouchHistoryStore_1.touchHistory,EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);var shouldSwitch=!hasDispatches$1(terminationRequestEvent)||executeDirectDispatch$1(terminationRequestEvent);if(terminationRequestEvent.isPersistent()||terminationRequestEvent.constructor.release(terminationRequestEvent),shouldSwitch){var terminateEvent=ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate,responderInst,nativeEvent,nativeEventTarget);terminateEvent.touchHistory=ResponderTouchHistoryStore_1.touchHistory,EventPropagators_1.accumulateDirectDispatches(terminateEvent),extracted=accumulate_1(extracted,[grantEvent,terminateEvent]),changeResponder(wantsResponderInst,blockHostResponder);}else{var rejectEvent=ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject,wantsResponderInst,nativeEvent,nativeEventTarget);rejectEvent.touchHistory=ResponderTouchHistoryStore_1.touchHistory,EventPropagators_1.accumulateDirectDispatches(rejectEvent),extracted=accumulate_1(extracted,rejectEvent);}}else extracted=accumulate_1(extracted,grantEvent),changeResponder(wantsResponderInst,blockHostResponder);return extracted;}function canTriggerTransfer(topLevelType,topLevelInst,nativeEvent){return topLevelInst&&("topScroll"===topLevelType&&!nativeEvent.responderIgnoreScroll||trackedTouchCount>0&&"topSelectionChange"===topLevelType||isStartish$1(topLevelType)||isMoveish$1(topLevelType));}function noResponderTouches(nativeEvent){var touches=nativeEvent.touches;if(!touches||0===touches.length)return!0;for(var i=0;i<touches.length;i++){var activeTouch=touches[i],target=activeTouch.target;if(null!==target&&void 0!==target&&0!==target){var targetInst=EventPluginUtils_1.getInstanceFromNode(target);if(ReactTreeTraversal.isAncestor(responderInst,targetInst))return!1;}}return!0;}var ResponderEventPlugin={_getResponder:function _getResponder(){return responderInst;},eventTypes:eventTypes,extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){if(isStartish$1(topLevelType))trackedTouchCount+=1;else if(isEndish$1(topLevelType)){if(!(trackedTouchCount>=0))return console.error("Ended a touch event which was not counted in `trackedTouchCount`."),null;trackedTouchCount-=1;}ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType,nativeEvent);var extracted=canTriggerTransfer(topLevelType,targetInst,nativeEvent)?setResponderAndExtractTransfer(topLevelType,targetInst,nativeEvent,nativeEventTarget):null,isResponderTouchStart=responderInst&&isStartish$1(topLevelType),isResponderTouchMove=responderInst&&isMoveish$1(topLevelType),isResponderTouchEnd=responderInst&&isEndish$1(topLevelType),incrementalTouch=isResponderTouchStart?eventTypes.responderStart:isResponderTouchMove?eventTypes.responderMove:isResponderTouchEnd?eventTypes.responderEnd:null;if(incrementalTouch){var gesture=ResponderSyntheticEvent_1.getPooled(incrementalTouch,responderInst,nativeEvent,nativeEventTarget);gesture.touchHistory=ResponderTouchHistoryStore_1.touchHistory,EventPropagators_1.accumulateDirectDispatches(gesture),extracted=accumulate_1(extracted,gesture);}var isResponderTerminate=responderInst&&"topTouchCancel"===topLevelType,isResponderRelease=responderInst&&!isResponderTerminate&&isEndish$1(topLevelType)&&noResponderTouches(nativeEvent),finalTouch=isResponderTerminate?eventTypes.responderTerminate:isResponderRelease?eventTypes.responderRelease:null;if(finalTouch){var finalEvent=ResponderSyntheticEvent_1.getPooled(finalTouch,responderInst,nativeEvent,nativeEventTarget);finalEvent.touchHistory=ResponderTouchHistoryStore_1.touchHistory,EventPropagators_1.accumulateDirectDispatches(finalEvent),extracted=accumulate_1(extracted,finalEvent),changeResponder(null);}var numberActiveTouches=ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;return ResponderEventPlugin.GlobalInteractionHandler&&numberActiveTouches!==previousActiveTouches&&ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches),previousActiveTouches=numberActiveTouches,extracted;},GlobalResponderHandler:null,GlobalInteractionHandler:null,injection:{injectGlobalResponderHandler:function injectGlobalResponderHandler(GlobalResponderHandler){ResponderEventPlugin.GlobalResponderHandler=GlobalResponderHandler;},injectGlobalInteractionHandler:function injectGlobalInteractionHandler(GlobalInteractionHandler){ResponderEventPlugin.GlobalInteractionHandler=GlobalInteractionHandler;}}},ResponderEventPlugin_1=ResponderEventPlugin;RCTEventEmitter.register(ReactNativeEventEmitter_1),EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1),EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1),ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1),EventPluginHub_1.injection.injectEventPluginsByName({ResponderEventPlugin:ResponderEventPlugin_1,ReactNativeBridgeEventPlugin:ReactNativeBridgeEventPlugin_1});function _classCallCheck$2(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function");}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call;}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass);}var mountSafeCallback$2=NativeMethodsMixinUtils.mountSafeCallback,ReactNativeComponent=function(_React$Component){_inherits(ReactNativeComponent,_React$Component);function ReactNativeComponent(){return _classCallCheck$2(this,ReactNativeComponent),_possibleConstructorReturn(this,_React$Component.apply(this,arguments));}return ReactNativeComponent.prototype.blur=function(){TextInputState.blurTextInput(findNumericNodeHandle(this));},ReactNativeComponent.prototype.focus=function(){TextInputState.focusTextInput(findNumericNodeHandle(this));},ReactNativeComponent.prototype.measure=function(callback){UIManager.measure(findNumericNodeHandle(this),mountSafeCallback$2(this,callback));},ReactNativeComponent.prototype.measureInWindow=function(callback){UIManager.measureInWindow(findNumericNodeHandle(this),mountSafeCallback$2(this,callback));},ReactNativeComponent.prototype.measureLayout=function(relativeToNativeNode,onSuccess,onFail){UIManager.measureLayout(findNumericNodeHandle(this),relativeToNativeNode,mountSafeCallback$2(this,onFail),mountSafeCallback$2(this,onSuccess));},ReactNativeComponent.prototype.setNativeProps=function(nativeProps){var maybeInstance=void 0;try{maybeInstance=findNodeHandle_1(this);}catch(error){}if(null!=maybeInstance){var viewConfig=maybeInstance.viewConfig,updatePayload=ReactNativeAttributePayload_1.create(nativeProps,viewConfig.validAttributes);null!=updatePayload&&UIManager.updateView(maybeInstance._nativeTag,viewConfig.uiViewClassName,updatePayload);}},ReactNativeComponent;}(react.Component),ReactNativeComponent_1=ReactNativeComponent,mountSafeCallback$3=NativeMethodsMixinUtils.mountSafeCallback,throwOnStylesProp$1=NativeMethodsMixinUtils.throwOnStylesProp,warnForStyleProps$2=NativeMethodsMixinUtils.warnForStyleProps,NativeMethodsMixin={measure:function measure(callback){UIManager.measure(findNumericNodeHandle(this),mountSafeCallback$3(this,callback));},measureInWindow:function measureInWindow(callback){UIManager.measureInWindow(findNumericNodeHandle(this),mountSafeCallback$3(this,callback));},measureLayout:function measureLayout(relativeToNativeNode,onSuccess,onFail){UIManager.measureLayout(findNumericNodeHandle(this),relativeToNativeNode,mountSafeCallback$3(this,onFail),mountSafeCallback$3(this,onSuccess));},setNativeProps:function setNativeProps(nativeProps){var maybeInstance=void 0;try{maybeInstance=findNodeHandle_1(this);}catch(error){}if(null!=maybeInstance){var viewConfig=maybeInstance.viewConfig;warnForStyleProps$2(nativeProps,viewConfig.validAttributes);var updatePayload=ReactNativeAttributePayload_1.create(nativeProps,viewConfig.validAttributes);null!=updatePayload&&UIManager.updateView(maybeInstance._nativeTag,viewConfig.uiViewClassName,updatePayload);}},focus:function focus(){TextInputState.focusTextInput(findNumericNodeHandle(this));},blur:function blur(){TextInputState.blurTextInput(findNumericNodeHandle(this));}},NativeMethodsMixin_DEV=NativeMethodsMixin;invariant(!NativeMethodsMixin_DEV.componentWillMount&&!NativeMethodsMixin_DEV.componentWillReceiveProps,"Do not override existing functions."),NativeMethodsMixin_DEV.componentWillMount=function(){throwOnStylesProp$1(this,this.props);},NativeMethodsMixin_DEV.componentWillReceiveProps=function(newProps){throwOnStylesProp$1(this,newProps);};var NativeMethodsMixin_1=NativeMethodsMixin,TouchHistoryMath={centroidDimension:function centroidDimension(touchHistory,touchesChangedAfter,isXAxis,ofCurrent){var touchBank=touchHistory.touchBank,total=0,count=0,oneTouchData=1===touchHistory.numberActiveTouches?touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch]:null;if(null!==oneTouchData)oneTouchData.touchActive&&oneTouchData.currentTimeStamp>touchesChangedAfter&&(total+=ofCurrent&&isXAxis?oneTouchData.currentPageX:ofCurrent&&!isXAxis?oneTouchData.currentPageY:!ofCurrent&&isXAxis?oneTouchData.previousPageX:oneTouchData.previousPageY,count=1);else for(var i=0;i<touchBank.length;i++){var touchTrack=touchBank[i];if(null!==touchTrack&&void 0!==touchTrack&&touchTrack.touchActive&&touchTrack.currentTimeStamp>=touchesChangedAfter){var toAdd;toAdd=ofCurrent&&isXAxis?touchTrack.currentPageX:ofCurrent&&!isXAxis?touchTrack.currentPageY:!ofCurrent&&isXAxis?touchTrack.previousPageX:touchTrack.previousPageY,total+=toAdd,count++;}}return count>0?total/count:TouchHistoryMath.noCentroid;},currentCentroidXOfTouchesChangedAfter:function currentCentroidXOfTouchesChangedAfter(touchHistory,touchesChangedAfter){return TouchHistoryMath.centroidDimension(touchHistory,touchesChangedAfter,!0,!0);},currentCentroidYOfTouchesChangedAfter:function currentCentroidYOfTouchesChangedAfter(touchHistory,touchesChangedAfter){return TouchHistoryMath.centroidDimension(touchHistory,touchesChangedAfter,!1,!0);},previousCentroidXOfTouchesChangedAfter:function previousCentroidXOfTouchesChangedAfter(touchHistory,touchesChangedAfter){return TouchHistoryMath.centroidDimension(touchHistory,touchesChangedAfter,!0,!1);},previousCentroidYOfTouchesChangedAfter:function previousCentroidYOfTouchesChangedAfter(touchHistory,touchesChangedAfter){return TouchHistoryMath.centroidDimension(touchHistory,touchesChangedAfter,!1,!1);},currentCentroidX:function currentCentroidX(touchHistory){return TouchHistoryMath.centroidDimension(touchHistory,0,!0,!0);},currentCentroidY:function currentCentroidY(touchHistory){return TouchHistoryMath.centroidDimension(touchHistory,0,!1,!0);},noCentroid:-1},TouchHistoryMath_1=TouchHistoryMath,createReactNativeComponentClass=function createReactNativeComponentClass(name,callback){return ReactNativeViewConfigRegistry_1.register(name,callback);},createReactNativeComponentClass_1=createReactNativeComponentClass;function takeSnapshot(view,options){return"number"!=typeof view&&"window"!==view&&(view=findNumericNodeHandle(view)||"window"),UIManager.__takeSnapshot(view,options);}var takeSnapshot_1=takeSnapshot,injectInternals=ReactFiberDevToolsHook.injectInternals;ReactGenericBatching_1.injection.injectFiberBatchedUpdates(ReactNativeFiberRenderer.batchedUpdates);var roots=new Map();ReactFiberErrorLogger.injection.injectDialog(ReactNativeFiberErrorDialog_1.showDialog);var ReactNativeFiber={NativeComponent:ReactNativeComponent_1,findNodeHandle:findNumericNodeHandle,render:function render(element,containerTag,callback){var root=roots.get(containerTag);return root||(root=ReactNativeFiberRenderer.createContainer(containerTag),roots.set(containerTag,root)),ReactNativeFiberRenderer.updateContainer(element,root,null,callback),ReactNativeFiberRenderer.getPublicRootInstance(root);},unmountComponentAtNode:function unmountComponentAtNode(containerTag){var root=roots.get(containerTag);root&&ReactNativeFiberRenderer.updateContainer(null,root,null,function(){roots.delete(containerTag);});},unmountComponentAtNodeAndRemoveContainer:function unmountComponentAtNodeAndRemoveContainer(containerTag){ReactNativeFiber.unmountComponentAtNode(containerTag),UIManager.removeRootView(containerTag);},createPortal:function createPortal(children,containerTag){var key=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return ReactPortal.createPortal(children,containerTag,null,key);},unstable_batchedUpdates:ReactGenericBatching_1.batchedUpdates,flushSync:ReactNativeFiberRenderer.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{NativeMethodsMixin:NativeMethodsMixin_1,ReactNativeBridgeEventPlugin:ReactNativeBridgeEventPlugin_1,ReactGlobalSharedState:ReactGlobalSharedState_1,ReactNativeComponentTree:ReactNativeComponentTree_1,ReactNativePropRegistry:ReactNativePropRegistry_1,TouchHistoryMath:TouchHistoryMath_1,createReactNativeComponentClass:createReactNativeComponentClass_1,takeSnapshot:takeSnapshot_1}};_extends(ReactNativeFiber.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,{ReactDebugTool:{addHook:function addHook(){},removeHook:function removeHook(){}},ReactPerf:{start:function start(){},stop:function stop(){},printInclusive:function printInclusive(){},printWasted:function printWasted(){}}}),injectInternals({findFiberByHostInstance:ReactNativeComponentTree_1.getClosestInstanceFromNode,findHostInstanceByFiber:ReactNativeFiberRenderer.findHostInstance,getInspectorDataForViewTag:ReactNativeFiberInspector.getInspectorDataForViewTag,bundleType:1,version:ReactVersion,rendererPackageName:"react-native"});var ReactNativeFiberEntry=ReactNativeFiber;module.exports=ReactNativeFiberEntry;}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlRmliZXItZGV2LmpzIl0sIm5hbWVzIjpbIl9fREVWX18iLCJpbnZhcmlhbnQiLCJyZXF1aXJlIiwicmVxdWlyZSQkMCIsIkV4Y2VwdGlvbnNNYW5hZ2VyIiwiZW1wdHlPYmplY3QiLCJyZWFjdCIsImNoZWNrUHJvcFR5cGVzIiwic2hhbGxvd0VxdWFsIiwiZGVlcERpZmZlciIsImZsYXR0ZW5TdHlsZSIsIlRleHRJbnB1dFN0YXRlIiwiVUlNYW5hZ2VyIiwiZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2IiwiUkNURXZlbnRFbWl0dGVyIiwiZW1wdHlGdW5jdGlvbiIsImRlZmF1bHRTaG93RGlhbG9nIiwiY2FwdHVyZWRFcnJvciIsInNob3dEaWFsb2ciLCJsb2dDYXB0dXJlZEVycm9yIiwiY29tcG9uZW50TmFtZSIsImVycm9yIiwiY29tcG9uZW50U3RhY2siLCJlcnJvckJvdW5kYXJ5TmFtZSIsImVycm9yQm91bmRhcnlGb3VuZCIsIndpbGxSZXRyeSIsImNvbXBvbmVudE5hbWVNZXNzYWdlIiwiZXJyb3JCb3VuZGFyeU1lc3NhZ2UiLCJjb21iaW5lZE1lc3NhZ2UiLCJjb25zb2xlIiwiaW5qZWN0aW9uIiwiaW5qZWN0RGlhbG9nIiwiZm4iLCJsb2dDYXB0dXJlZEVycm9yXzEiLCJSZWFjdEZpYmVyRXJyb3JMb2dnZXIiLCJSZWFjdEVycm9yVXRpbHMiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImluamVjdEVycm9yVXRpbHMiLCJpbmplY3RlZEVycm9yVXRpbHMiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJuYW1lIiwiZnVuYyIsImNvbnRleHQiLCJhIiwiYiIsImMiLCJkIiwiZSIsImYiLCJhcHBseSIsImFyZ3VtZW50cyIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsImZ1bmNBcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJ3aW5kb3ciLCJkaXNwYXRjaEV2ZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImZha2VOb2RlIiwiY3JlYXRlRWxlbWVudCIsImRpZEVycm9yIiwiY2FsbENhbGxiYWNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2dFR5cGUiLCJkaWRTZXRFcnJvciIsImlzQ3Jvc3NPcmlnaW5FcnJvciIsIm9uRXJyb3IiLCJldmVudCIsImNvbG5vIiwibGluZW5vIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsImluaXRFdmVudCIsIkVycm9yIiwiQ29tcG9uZW50VHJlZSIsIlJlYWN0RXJyb3JVdGlsc18xIiwid2FybmluZyIsImluamVjdGlvbiQxIiwiaW5qZWN0Q29tcG9uZW50VHJlZSIsIkluamVjdGVkIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJpc0VuZGlzaCIsInRvcExldmVsVHlwZSIsImlzTW92ZWlzaCIsImlzU3RhcnRpc2giLCJ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyIsImRpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiZGlzcGF0Y2hJbnN0YW5jZXMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJsaXN0ZW5lcnNJc0FyciIsImlzQXJyYXkiLCJsaXN0ZW5lcnNMZW4iLCJsZW5ndGgiLCJpbnN0YW5jZXNJc0FyciIsImluc3RhbmNlc0xlbiIsImV4ZWN1dGVEaXNwYXRjaCIsInNpbXVsYXRlZCIsImxpc3RlbmVyIiwiaW5zdCIsInR5cGUiLCJjdXJyZW50VGFyZ2V0IiwiRXZlbnRQbHVnaW5VdGlscyIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlciIsImkiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsIiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSIsInJldCIsImV4ZWN1dGVEaXJlY3REaXNwYXRjaCIsImRpc3BhdGNoTGlzdGVuZXIiLCJkaXNwYXRjaEluc3RhbmNlIiwicmVzIiwiaGFzRGlzcGF0Y2hlcyIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJub2RlIiwiRXZlbnRQbHVnaW5VdGlsc18xIiwiZmliZXJIb3N0Q29tcG9uZW50IiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50SW5qZWN0aW9uIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsImhvc3RDb21wb25lbnRJbXBsIiwicmVzdG9yZVRhcmdldCIsInJlc3RvcmVRdWV1ZSIsInJlc3RvcmVTdGF0ZU9mVGFyZ2V0IiwidGFyZ2V0IiwiaW50ZXJuYWxJbnN0YW5jZSIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJwcm9wcyIsInN0YXRlTm9kZSIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJwdXNoIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJxdWV1ZWRUYXJnZXRzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50XzEiLCJmaWJlckJhdGNoZWRVcGRhdGVzIiwiYm9va2tlZXBpbmciLCJiYXRjaGVkVXBkYXRlcyIsImlzTmVzdGluZ0JhdGNoZWQiLCJiYXRjaGVkVXBkYXRlc1dpdGhDb250cm9sbGVkQ29tcG9uZW50cyIsIlJlYWN0R2VuZXJpY0JhdGNoaW5nSW5qZWN0aW9uIiwiaW5qZWN0RmliZXJCYXRjaGVkVXBkYXRlcyIsIl9iYXRjaGVkVXBkYXRlcyIsIlJlYWN0R2VuZXJpY0JhdGNoaW5nIiwiUmVhY3RHZW5lcmljQmF0Y2hpbmdfMSIsIlJlYWN0TmF0aXZlRmliZXJFcnJvckRpYWxvZyIsImVycm9yVG9IYW5kbGUiLCJtZXNzYWdlIiwic3VtbWFyeSIsImhhbmRsZUV4Y2VwdGlvbiIsInNob3dEaWFsb2ckMSIsIlJlYWN0TmF0aXZlRmliZXJFcnJvckRpYWxvZ18xIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJTeW1ib2wiLCJmb3IiLCJjcmVhdGVQb3J0YWwiLCJjaGlsZHJlbiIsImNvbnRhaW5lckluZm8iLCJpbXBsZW1lbnRhdGlvbiIsImtleSIsIiQkdHlwZW9mIiwiaXNQb3J0YWwiLCJvYmplY3QiLCJSRUFDVF9QT1JUQUxfVFlQRV8xIiwiUmVhY3RQb3J0YWwiLCJpbnN0YW5jZUNhY2hlIiwiaW5zdGFuY2VQcm9wcyIsInByZWNhY2hlRmliZXJOb2RlIiwiaG9zdEluc3QiLCJ0YWciLCJ1bmNhY2hlRmliZXJOb2RlIiwiZ2V0SW5zdGFuY2VGcm9tVGFnIiwiZ2V0VGFnRnJvbUluc3RhbmNlIiwiX25hdGl2ZVRhZyIsInVwZGF0ZUZpYmVyUHJvcHMiLCJSZWFjdE5hdGl2ZUNvbXBvbmVudFRyZWUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsIlJlYWN0TmF0aXZlQ29tcG9uZW50VHJlZV8xIiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWwiLCJzZWxmIiwiUmVhY3RGZWF0dXJlRmxhZ3MiLCJlbmFibGVBc3luY1N1YnRyZWVBUEkiLCJSZWFjdEZlYXR1cmVGbGFnc18xIiwiUmVhY3RUeXBlT2ZTaWRlRWZmZWN0IiwiTm9FZmZlY3QiLCJQZXJmb3JtZWRXb3JrIiwiUGxhY2VtZW50IiwiVXBkYXRlIiwiUGxhY2VtZW50QW5kVXBkYXRlIiwiRGVsZXRpb24iLCJDb250ZW50UmVzZXQiLCJDYWxsYmFjayIsIkVyciIsIlJlZiIsIlJlYWN0UHJpb3JpdHlMZXZlbCIsIk5vV29yayIsIlN5bmNocm9ub3VzUHJpb3JpdHkiLCJUYXNrUHJpb3JpdHkiLCJIaWdoUHJpb3JpdHkiLCJMb3dQcmlvcml0eSIsIk9mZnNjcmVlblByaW9yaXR5IiwiUmVhY3RUeXBlT2ZXb3JrIiwiSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCIsIkZ1bmN0aW9uYWxDb21wb25lbnQiLCJDbGFzc0NvbXBvbmVudCIsIkhvc3RSb290IiwiSG9zdFBvcnRhbCIsIkhvc3RDb21wb25lbnQiLCJIb3N0VGV4dCIsIkNvcm91dGluZUNvbXBvbmVudCIsIkNvcm91dGluZUhhbmRsZXJQaGFzZSIsIllpZWxkQ29tcG9uZW50IiwiRnJhZ21lbnQiLCJDYWxsYmFja0VmZmVjdCIsIndhcm5pbmckMiIsIl9xdWV1ZTEiLCJfcXVldWUyIiwiY29tcGFyZVByaW9yaXR5IiwiY3JlYXRlVXBkYXRlUXVldWUiLCJxdWV1ZSIsImZpcnN0IiwibGFzdCIsImhhc0ZvcmNlVXBkYXRlIiwiY2FsbGJhY2tMaXN0IiwiaXNQcm9jZXNzaW5nIiwiY2xvbmVVcGRhdGUiLCJ1cGRhdGUiLCJwcmlvcml0eUxldmVsIiwicGFydGlhbFN0YXRlIiwiY2FsbGJhY2siLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsImlzVG9wTGV2ZWxVbm1vdW50IiwibmV4dCIsImluc2VydFVwZGF0ZUludG9RdWV1ZSIsImluc2VydEFmdGVyIiwiaW5zZXJ0QmVmb3JlIiwiZmluZEluc2VydGlvblBvc2l0aW9uIiwiZW5zdXJlVXBkYXRlUXVldWVzIiwiZmliZXIiLCJhbHRlcm5hdGVGaWJlciIsImFsdGVybmF0ZSIsInF1ZXVlMSIsInVwZGF0ZVF1ZXVlIiwicXVldWUyIiwiaW5zZXJ0VXBkYXRlIiwiaW5zZXJ0QWZ0ZXIxIiwiaW5zZXJ0QmVmb3JlMSIsImluc2VydEFmdGVyMiIsImluc2VydEJlZm9yZTIiLCJ1cGRhdGUyIiwiYWRkVXBkYXRlIiwiYWRkVXBkYXRlXzEiLCJhZGRSZXBsYWNlVXBkYXRlIiwic3RhdGUiLCJhZGRSZXBsYWNlVXBkYXRlXzEiLCJhZGRGb3JjZVVwZGF0ZSIsImFkZEZvcmNlVXBkYXRlXzEiLCJnZXRVcGRhdGVQcmlvcml0eSIsImdldFVwZGF0ZVByaW9yaXR5XzEiLCJhZGRUb3BMZXZlbFVwZGF0ZSQxIiwiZWxlbWVudCIsImFkZFRvcExldmVsVXBkYXRlXzEiLCJnZXRTdGF0ZUZyb21VcGRhdGUiLCJpbnN0YW5jZSIsInByZXZTdGF0ZSIsImJlZ2luVXBkYXRlUXVldWUiLCJjdXJyZW50Iiwid29ya0luUHJvZ3Jlc3MiLCJjdXJyZW50UXVldWUiLCJkb250TXV0YXRlUHJldlN0YXRlIiwiX3BhcnRpYWxTdGF0ZSIsImVmZmVjdFRhZyIsImJlZ2luVXBkYXRlUXVldWVfMSIsImNvbW1pdENhbGxiYWNrcyIsImZpbmlzaGVkV29yayIsIl9jYWxsYmFjayIsImNvbW1pdENhbGxiYWNrc18xIiwiUmVhY3RGaWJlclVwZGF0ZVF1ZXVlIiwiYWRkVG9wTGV2ZWxVcGRhdGUiLCJnZXRDb21wb25lbnROYW1lJDEiLCJkaXNwbGF5TmFtZSIsImdldENvbXBvbmVudE5hbWVfMSIsIlJlYWN0SW5zdGFuY2VNYXAiLCJyZW1vdmUiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiZ2V0IiwiaGFzIiwic2V0IiwidmFsdWUiLCJSZWFjdEluc3RhbmNlTWFwXzEiLCJSZWFjdEludGVybmFscyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RHbG9iYWxTaGFyZWRTdGF0ZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSIsIlJlYWN0R2xvYmFsU2hhcmVkU3RhdGVfMSIsIndhcm5pbmckNCIsIkNsYXNzQ29tcG9uZW50JDIiLCJIb3N0Q29tcG9uZW50JDEiLCJIb3N0Um9vdCQyIiwiTU9VTlRJTkciLCJNT1VOVEVEIiwiVU5NT1VOVEVEIiwiaXNGaWJlck1vdW50ZWRJbXBsIiwicmV0dXJuIiwiaXNGaWJlck1vdW50ZWQkMSIsImlzTW91bnRlZCIsImNvbXBvbmVudCIsIm93bmVyIiwib3duZXJGaWJlciIsIl93YXJuZWRBYm91dFJlZnNJblJlbmRlciIsImFzc2VydElzTW91bnRlZCIsImZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoIiwicGFyZW50QSIsInBhcmVudEIiLCJjaGlsZCIsInNpYmxpbmciLCJkaWRGaW5kQ2hpbGQiLCJfY2hpbGQiLCJmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aF8xIiwiZmluZEN1cnJlbnRIb3N0RmliZXIkMSIsInBhcmVudCIsImN1cnJlbnRQYXJlbnQiLCJmaW5kQ3VycmVudEhvc3RGaWJlcldpdGhOb1BvcnRhbHMkMSIsIlJlYWN0RmliZXJUcmVlUmVmbGVjdGlvbiIsImlzRmliZXJNb3VudGVkIiwiZmluZEN1cnJlbnRIb3N0RmliZXIiLCJmaW5kQ3VycmVudEhvc3RGaWJlcldpdGhOb1BvcnRhbHMiLCJ3YXJuaW5nJDUiLCJ2YWx1ZVN0YWNrIiwiZmliZXJTdGFjayIsImluZGV4IiwiY3JlYXRlQ3Vyc29yJDEiLCJkZWZhdWx0VmFsdWUiLCJpc0VtcHR5IiwicG9wJDEiLCJjdXJzb3IiLCJwdXNoJDEiLCJyZXNldCIsIlJlYWN0RmliZXJTdGFjayIsImNyZWF0ZUN1cnNvciIsInBvcCIsImRlc2NyaWJlQ29tcG9uZW50RnJhbWUiLCJzb3VyY2UiLCJvd25lck5hbWUiLCJmaWxlTmFtZSIsInJlcGxhY2UiLCJsaW5lTnVtYmVyIiwiQ2xhc3NDb21wb25lbnQkMyIsIkhvc3RDb21wb25lbnQkMiIsImRlc2NyaWJlRmliZXIiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXIkMSIsImluZm8iLCJSZWFjdEZpYmVyQ29tcG9uZW50VHJlZUhvb2siLCJnZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyIiwiZ2V0Q29tcG9uZW50TmFtZSQzIiwiX3JlcXVpcmUyJDEiLCJnZXRDdXJyZW50RmliZXJPd25lck5hbWUiLCJSZWFjdERlYnVnQ3VycmVudEZpYmVyJDIiLCJnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtIiwicmVzZXRDdXJyZW50RmliZXIiLCJnZXRDdXJyZW50U3RhY2siLCJwaGFzZSIsInNldEN1cnJlbnRGaWJlciIsInNldEN1cnJlbnRQaGFzZSIsIlJlYWN0RGVidWdDdXJyZW50RmliZXJfMSIsIlJlYWN0RGVidWdGaWJlclBlcmYiLCJfcmVxdWlyZSQyIiwiSG9zdFJvb3QkMyIsIkhvc3RDb21wb25lbnQkMyIsIkhvc3RUZXh0JDEiLCJIb3N0UG9ydGFsJDEiLCJnZXRDb21wb25lbnROYW1lJDQiLCJyZWFjdEVtb2ppIiwid2FybmluZ0Vtb2ppIiwic3VwcG9ydHNVc2VyVGltaW5nIiwicGVyZm9ybWFuY2UiLCJtYXJrIiwiY2xlYXJNYXJrcyIsIm1lYXN1cmUiLCJjbGVhck1lYXN1cmVzIiwiY3VycmVudEZpYmVyIiwiY3VycmVudFBoYXNlIiwiY3VycmVudFBoYXNlRmliZXIiLCJpc0NvbW1pdHRpbmciLCJoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQiLCJoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSIsImNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AiLCJlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCIsImxhYmVsc0luQ3VycmVudENvbW1pdCIsIlNldCIsImZvcm1hdE1hcmtOYW1lIiwibWFya05hbWUiLCJmb3JtYXRMYWJlbCIsImxhYmVsIiwiYmVnaW5NYXJrIiwiY2xlYXJNYXJrIiwiZW5kTWFyayIsImZvcm1hdHRlZE1hcmtOYW1lIiwiZm9ybWF0dGVkTGFiZWwiLCJlcnIiLCJnZXRGaWJlck1hcmtOYW1lIiwiZGVidWdJRCIsImdldEZpYmVyTGFiZWwiLCJiZWdpbkZpYmVyTWFyayIsIl9kZWJ1Z0lEIiwiYWRkIiwiY2xlYXJGaWJlck1hcmsiLCJlbmRGaWJlck1hcmsiLCJzaG91bGRJZ25vcmVGaWJlciIsImNsZWFyUGVuZGluZ1BoYXNlTWVhc3VyZW1lbnQiLCJwYXVzZVRpbWVycyIsIl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nIiwicmVzdW1lVGltZXJzUmVjdXJzaXZlbHkiLCJyZXN1bWVUaW1lcnMiLCJyZWNvcmRFZmZlY3QiLCJyZWNvcmRTY2hlZHVsZVVwZGF0ZSIsInN0YXJ0V29ya1RpbWVyIiwiY2FuY2VsV29ya1RpbWVyIiwic3RvcFdvcmtUaW1lciIsInN0b3BGYWlsZWRXb3JrVGltZXIiLCJzdGFydFBoYXNlVGltZXIiLCJzdG9wUGhhc2VUaW1lciIsInN0YXJ0V29ya0xvb3BUaW1lciIsInN0b3BXb3JrTG9vcFRpbWVyIiwic3RhcnRDb21taXRUaW1lciIsImNsZWFyIiwic3RvcENvbW1pdFRpbWVyIiwic3RhcnRDb21taXRIb3N0RWZmZWN0c1RpbWVyIiwic3RvcENvbW1pdEhvc3RFZmZlY3RzVGltZXIiLCJjb3VudCIsInN0YXJ0Q29tbWl0TGlmZUN5Y2xlc1RpbWVyIiwic3RvcENvbW1pdExpZmVDeWNsZXNUaW1lciIsIlJlYWN0RGVidWdGaWJlclBlcmZfMSIsIkNsYXNzQ29tcG9uZW50JDEiLCJIb3N0Um9vdCQxIiwid2FybmluZyQzIiwiY2hlY2tQcm9wVHlwZXMkMSIsIlJlYWN0RGVidWdDdXJyZW50RmliZXIkMSIsIl9yZXF1aXJlNCIsIndhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dCIsImNvbnRleHRTdGFja0N1cnNvciIsImRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IiLCJwcmV2aW91c0NvbnRleHQiLCJnZXRVbm1hc2tlZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciQxIiwiZ2V0VW5tYXNrZWRDb250ZXh0XzEiLCJjYWNoZUNvbnRleHQiLCJ1bm1hc2tlZENvbnRleHQiLCJtYXNrZWRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiY2FjaGVDb250ZXh0XzEiLCJnZXRNYXNrZWRDb250ZXh0IiwiY29udGV4dFR5cGVzIiwiaGFzQ29udGV4dENoYW5nZWQiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dENvbnN1bWVyXzEiLCJjaGlsZENvbnRleHRUeXBlcyIsImlzQ29udGV4dFByb3ZpZGVyXzEiLCJwb3BDb250ZXh0UHJvdmlkZXIiLCJwb3BDb250ZXh0UHJvdmlkZXJfMSIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJkaWRDaGFuZ2UiLCJwcm9jZXNzQ2hpbGRDb250ZXh0JDEiLCJwYXJlbnRDb250ZXh0IiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0IiwiY29udGV4dEtleSIsInByb2Nlc3NDaGlsZENvbnRleHRfMSIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJtZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciIsIm1lcmdlZENvbnRleHQiLCJyZXNldENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCQxIiwiUmVhY3RGaWJlckNvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsIlJlYWN0VHlwZU9mSW50ZXJuYWxDb250ZXh0IiwiTm9Db250ZXh0IiwiQXN5bmNVcGRhdGVzIiwiSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCQxIiwiQ2xhc3NDb21wb25lbnQkNCIsIkhvc3RSb290JDQiLCJIb3N0Q29tcG9uZW50JDQiLCJIb3N0VGV4dCQyIiwiSG9zdFBvcnRhbCQyIiwiWWllbGRDb21wb25lbnQkMSIsIkZyYWdtZW50JDEiLCJOb1dvcmskMSIsIk5vRWZmZWN0JDEiLCJnZXRDb21wb25lbnROYW1lJDUiLCJoYXNCYWRNYXBQb2x5ZmlsbCIsIm5vbkV4dGVuc2libGVPYmplY3QiLCJPYmplY3QiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIk1hcCIsImRlYnVnQ291bnRlciIsIkZpYmVyTm9kZSIsImludGVybmFsQ29udGV4dFRhZyIsInJlZiIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkUHJvcHMiLCJtZW1vaXplZFN0YXRlIiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsInBlbmRpbmdXb3JrUHJpb3JpdHkiLCJjcmVhdGVGaWJlciIsInNob3VsZENvbnN0cnVjdCIsIkNvbXBvbmVudCIsImlzUmVhY3RDb21wb25lbnQiLCJjcmVhdGVXb3JrSW5Qcm9ncmVzcyIsInJlbmRlclByaW9yaXR5IiwiY3JlYXRlSG9zdFJvb3RGaWJlciQxIiwiY3JlYXRlRmliZXJGcm9tRWxlbWVudCIsIl9vd25lciIsImNyZWF0ZUZpYmVyRnJvbUVsZW1lbnRUeXBlIiwiX3NvdXJjZSIsImNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50IiwiZWxlbWVudHMiLCJjcmVhdGVGaWJlckZyb21UZXh0IiwiY29udGVudCIsImRlYnVnT3duZXIiLCJrZXlzIiwiUkVBQ1RfQ09ST1VUSU5FX1RZUEUkMSIsIlJFQUNUX1lJRUxEX1RZUEUkMSIsImNyZWF0ZUZpYmVyRnJvbUVsZW1lbnRUeXBlXzEiLCJjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbiIsImNyZWF0ZUZpYmVyRnJvbUNvcm91dGluZSIsImNvcm91dGluZSIsImhhbmRsZXIiLCJjcmVhdGVGaWJlckZyb21ZaWVsZCIsInlpZWxkTm9kZSIsImNyZWF0ZUZpYmVyRnJvbVBvcnRhbCIsInBvcnRhbCIsImxhcmdlclByaW9yaXR5IiwicDEiLCJwMiIsIlJlYWN0RmliZXIiLCJjcmVhdGVIb3N0Um9vdEZpYmVyIiwiY3JlYXRlRmliZXJSb290JDEiLCJ1bmluaXRpYWxpemVkRmliZXIiLCJyb290IiwiaXNTY2hlZHVsZWQiLCJuZXh0U2NoZWR1bGVkUm9vdCIsInBlbmRpbmdDb250ZXh0IiwiUmVhY3RGaWJlclJvb3QiLCJjcmVhdGVGaWJlclJvb3QiLCJjcmVhdGVDb3JvdXRpbmUiLCJmcmVlemUiLCJjcmVhdGVZaWVsZCIsImlzQ29yb3V0aW5lIiwiaXNZaWVsZCIsIlJFQUNUX1lJRUxEX1RZUEVfMSIsIlJFQUNUX0NPUk9VVElORV9UWVBFXzEiLCJSZWFjdENvcm91dGluZSIsIlJFQUNUX1lJRUxEX1RZUEUiLCJSRUFDVF9DT1JPVVRJTkVfVFlQRSIsIlJFQUNUX1BPUlRBTF9UWVBFJDEiLCJfcmVxdWlyZTMkMiIsImdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMSIsIndhcm5pbmckOCIsImRpZFdhcm5BYm91dE1hcHMiLCJvd25lckhhc0tleVVzZVdhcm5pbmciLCJ3YXJuRm9yTWlzc2luZ0tleSIsIl9zdG9yZSIsInZhbGlkYXRlZCIsImN1cnJlbnRDb21wb25lbnRFcnJvckluZm8iLCJjcmVhdGVXb3JrSW5Qcm9ncmVzcyQyIiwiY3JlYXRlRmliZXJGcm9tRWxlbWVudCQxIiwiY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQkMSIsImNyZWF0ZUZpYmVyRnJvbVRleHQkMSIsImNyZWF0ZUZpYmVyRnJvbUNvcm91dGluZSQxIiwiY3JlYXRlRmliZXJGcm9tWWllbGQkMSIsImNyZWF0ZUZpYmVyRnJvbVBvcnRhbCQxIiwiRnVuY3Rpb25hbENvbXBvbmVudCQyIiwiQ2xhc3NDb21wb25lbnQkNyIsIkhvc3RUZXh0JDQiLCJIb3N0UG9ydGFsJDUiLCJDb3JvdXRpbmVDb21wb25lbnQkMiIsIllpZWxkQ29tcG9uZW50JDMiLCJGcmFnbWVudCQzIiwiTm9FZmZlY3QkMiIsIlBsYWNlbWVudCQzIiwiRGVsZXRpb24kMSIsIklURVJBVE9SX1NZTUJPTCIsIml0ZXJhdG9yIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiZ2V0SXRlcmF0b3JGbiIsIm1heWJlSXRlcmFibGUiLCJpdGVyYXRvckZuIiwiY29lcmNlUmVmIiwibWl4ZWRSZWYiLCJzdHJpbmdSZWYiLCJfc3RyaW5nUmVmIiwicmVmcyIsInRocm93T25JbnZhbGlkT2JqZWN0VHlwZSIsInJldHVybkZpYmVyIiwibmV3Q2hpbGQiLCJhZGRlbmR1bSIsInRvU3RyaW5nIiwiam9pbiIsIndhcm5PbkZ1bmN0aW9uVHlwZSIsIkNoaWxkUmVjb25jaWxlciIsInNob3VsZENsb25lIiwic2hvdWxkVHJhY2tTaWRlRWZmZWN0cyIsImRlbGV0ZUNoaWxkIiwiY2hpbGRUb0RlbGV0ZSIsImRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuIiwiY3VycmVudEZpcnN0Q2hpbGQiLCJtYXBSZW1haW5pbmdDaGlsZHJlbiIsImV4aXN0aW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkIiwidXNlRmliZXIiLCJwcmlvcml0eSIsImNsb25lIiwicGxhY2VDaGlsZCIsIm5ld0ZpYmVyIiwibGFzdFBsYWNlZEluZGV4IiwibmV3SW5kZXgiLCJvbGRJbmRleCIsInBsYWNlU2luZ2xlQ2hpbGQiLCJ1cGRhdGVUZXh0Tm9kZSIsInRleHRDb250ZW50IiwiY3JlYXRlZCIsImV4aXN0aW5nIiwidXBkYXRlRWxlbWVudCIsInVwZGF0ZUNvcm91dGluZSIsInVwZGF0ZVlpZWxkIiwidXBkYXRlUG9ydGFsIiwidXBkYXRlRnJhZ21lbnQiLCJmcmFnbWVudCIsImNyZWF0ZUNoaWxkIiwiX2NyZWF0ZWQiLCJfY3JlYXRlZDIiLCJfY3JlYXRlZDMiLCJfY3JlYXRlZDQiLCJfY3JlYXRlZDUiLCJ1cGRhdGVTbG90Iiwib2xkRmliZXIiLCJ1cGRhdGVGcm9tTWFwIiwibmV3SWR4Iiwid2Fybk9uSW52YWxpZEtleSIsImtub3duS2V5cyIsInJlY29uY2lsZUNoaWxkcmVuQXJyYXkiLCJuZXdDaGlsZHJlbiIsInJlc3VsdGluZ0ZpcnN0Q2hpbGQiLCJwcmV2aW91c05ld0ZpYmVyIiwibmV4dE9sZEZpYmVyIiwiX25ld0ZpYmVyIiwiX25ld0ZpYmVyMiIsImRlbGV0ZSIsImZvckVhY2giLCJyZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yIiwibmV3Q2hpbGRyZW5JdGVyYWJsZSIsImVudHJpZXMiLCJfbmV3Q2hpbGRyZW4iLCJfc3RlcCIsImRvbmUiLCJzdGVwIiwiX25ld0ZpYmVyMyIsIl9uZXdGaWJlcjQiLCJyZWNvbmNpbGVTaW5nbGVUZXh0Tm9kZSIsInJlY29uY2lsZVNpbmdsZUVsZW1lbnQiLCJyZWNvbmNpbGVTaW5nbGVDb3JvdXRpbmUiLCJyZWNvbmNpbGVTaW5nbGVZaWVsZCIsInJlY29uY2lsZVNpbmdsZVBvcnRhbCIsInJlY29uY2lsZUNoaWxkRmliZXJzIiwiaXNPYmplY3QiLCJyZW5kZXIiLCJfaXNNb2NrRnVuY3Rpb24iLCJyZWNvbmNpbGVDaGlsZEZpYmVycyQxIiwicmVjb25jaWxlQ2hpbGRGaWJlcnNJblBsYWNlJDEiLCJtb3VudENoaWxkRmliZXJzSW5QbGFjZSQxIiwiY2xvbmVDaGlsZEZpYmVycyQxIiwiY3VycmVudENoaWxkIiwiUmVhY3RDaGlsZEZpYmVyIiwicmVjb25jaWxlQ2hpbGRGaWJlcnNJblBsYWNlIiwibW91bnRDaGlsZEZpYmVyc0luUGxhY2UiLCJjbG9uZUNoaWxkRmliZXJzIiwiVXBkYXRlJDEiLCJBc3luY1VwZGF0ZXMkMSIsImNhY2hlQ29udGV4dCQxIiwiZ2V0TWFza2VkQ29udGV4dCQyIiwiZ2V0VW5tYXNrZWRDb250ZXh0JDIiLCJpc0NvbnRleHRDb25zdW1lciQxIiwiYWRkVXBkYXRlJDEiLCJhZGRSZXBsYWNlVXBkYXRlJDEiLCJhZGRGb3JjZVVwZGF0ZSQxIiwiYmVnaW5VcGRhdGVRdWV1ZSQyIiwiX3JlcXVpcmU1IiwiaGFzQ29udGV4dENoYW5nZWQkMiIsImlzTW91bnRlZCQxIiwiZmFrZUludGVybmFsSW5zdGFuY2UiLCJpc0FycmF5JDEiLCJfcmVxdWlyZTckMSIsInN0YXJ0UGhhc2VUaW1lciQxIiwic3RvcFBoYXNlVGltZXIkMSIsIndhcm5pbmckOSIsIndhcm5PbkludmFsaWRDYWxsYmFjayIsImNhbGxlck5hbWUiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJSZWFjdEZpYmVyQ2xhc3NDb21wb25lbnQiLCJzY2hlZHVsZVVwZGF0ZSIsImdldFByaW9yaXR5Q29udGV4dCIsIm1lbW9pemVQcm9wcyIsIm1lbW9pemVTdGF0ZSIsInVwZGF0ZXIiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwib2xkU3RhdGUiLCJuZXdTdGF0ZSIsIm5ld0NvbnRleHQiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJzaG91bGRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImNoZWNrQ2xhc3NJbnN0YW5jZSIsInJlbmRlclByZXNlbnQiLCJub0dldEluaXRpYWxTdGF0ZU9uRVM2IiwiZ2V0SW5pdGlhbFN0YXRlIiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJub0dldERlZmF1bHRQcm9wc09uRVM2IiwiZ2V0RGVmYXVsdFByb3BzIiwibm9JbnN0YW5jZVByb3BUeXBlcyIsInByb3BUeXBlcyIsIm5vSW5zdGFuY2VDb250ZXh0VHlwZXMiLCJub0NvbXBvbmVudFNob3VsZFVwZGF0ZSIsImNvbXBvbmVudFNob3VsZFVwZGF0ZSIsIm5vQ29tcG9uZW50RGlkVW5tb3VudCIsImNvbXBvbmVudERpZFVubW91bnQiLCJub0NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzIiwiaGFzTXV0YXRlZFByb3BzIiwibm9JbnN0YW5jZURlZmF1bHRQcm9wcyIsImRlZmF1bHRQcm9wcyIsInJlc2V0SW5wdXRQb2ludGVycyIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsIl9yZWFjdEludGVybmFsSW5zdGFuY2UiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwiY3RvciIsIm5lZWRzQ29udGV4dCIsImNhbGxDb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJ1bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQiLCJjb21wb25lbnREaWRNb3VudCIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJvbGRDb250ZXh0IiwibmV3VW5tYXNrZWRDb250ZXh0IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImJlZ2luVXBkYXRlUXVldWUkMSIsImdldE1hc2tlZENvbnRleHQkMSIsImdldFVubWFza2VkQ29udGV4dCQxIiwiaGFzQ29udGV4dENoYW5nZWQkMSIsInB1c2hDb250ZXh0UHJvdmlkZXIkMSIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QkMSIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIkMSIsIkluZGV0ZXJtaW5hdGVDb21wb25lbnQkMiIsIkZ1bmN0aW9uYWxDb21wb25lbnQkMSIsIkNsYXNzQ29tcG9uZW50JDYiLCJIb3N0Um9vdCQ2IiwiSG9zdENvbXBvbmVudCQ2IiwiSG9zdFRleHQkMyIsIkhvc3RQb3J0YWwkNCIsIkNvcm91dGluZUNvbXBvbmVudCQxIiwiWWllbGRDb21wb25lbnQkMiIsIkZyYWdtZW50JDIiLCJOb1dvcmskMyIsIk9mZnNjcmVlblByaW9yaXR5JDEiLCJQZXJmb3JtZWRXb3JrJDEiLCJQbGFjZW1lbnQkMiIsIkNvbnRlbnRSZXNldCQxIiwiRXJyJDEiLCJSZWYkMSIsIlJlYWN0Q3VycmVudE93bmVyJDIiLCJSZWFjdERlYnVnQ3VycmVudEZpYmVyJDQiLCJfcmVxdWlyZTciLCJ3YXJuaW5nJDciLCJ3YXJuZWRBYm91dFN0YXRlbGVzc1JlZnMiLCJSZWFjdEZpYmVyQmVnaW5Xb3JrIiwiY29uZmlnIiwiaG9zdENvbnRleHQiLCJoeWRyYXRpb25Db250ZXh0Iiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJ1c2VTeW5jU2NoZWR1bGluZyIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJfUmVhY3RGaWJlckNsYXNzQ29tcG8iLCJyZWNvbmNpbGVDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsInJlY29uY2lsZUNoaWxkcmVuQXRQcmlvcml0eSIsImJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsiLCJtYXJrUmVmIiwidXBkYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5leHRQcm9wcyIsInVwZGF0ZUNsYXNzQ29tcG9uZW50IiwiaGFzQ29udGV4dCIsImZpbmlzaENsYXNzQ29tcG9uZW50IiwicHVzaEhvc3RSb290Q29udGV4dCIsInVwZGF0ZUhvc3RSb290IiwidXBkYXRlSG9zdENvbXBvbmVudCIsInByZXZQcm9wcyIsInVwZGF0ZUhvc3RUZXh0IiwibW91bnRJbmRldGVybWluYXRlQ29tcG9uZW50Iiwid2FybmluZ0tleSIsImRlYnVnU291cmNlIiwidXBkYXRlQ29yb3V0aW5lQ29tcG9uZW50IiwibmV4dENvcm91dGluZSIsInVwZGF0ZVBvcnRhbENvbXBvbmVudCIsImJhaWxvdXRPbkxvd1ByaW9yaXR5IiwibmV4dFN0YXRlIiwiYmVnaW5Xb3JrIiwiYmVnaW5GYWlsZWRXb3JrIiwicmVjb25jaWxlQ2hpbGRGaWJlcnMkMiIsInBvcENvbnRleHRQcm92aWRlciQyIiwicG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0JDEiLCJJbmRldGVybWluYXRlQ29tcG9uZW50JDMiLCJGdW5jdGlvbmFsQ29tcG9uZW50JDMiLCJDbGFzc0NvbXBvbmVudCQ4IiwiSG9zdFJvb3QkNyIsIkhvc3RDb21wb25lbnQkNyIsIkhvc3RUZXh0JDUiLCJIb3N0UG9ydGFsJDYiLCJDb3JvdXRpbmVDb21wb25lbnQkMyIsIkNvcm91dGluZUhhbmRsZXJQaGFzZSQxIiwiWWllbGRDb21wb25lbnQkNCIsIkZyYWdtZW50JDQiLCJQbGFjZW1lbnQkNCIsIlJlZiQyIiwiVXBkYXRlJDIiLCJPZmZzY3JlZW5Qcmlvcml0eSQyIiwiUmVhY3RGaWJlckNvbXBsZXRlV29yayIsImNyZWF0ZUluc3RhbmNlIiwiY3JlYXRlVGV4dEluc3RhbmNlIiwiYXBwZW5kSW5pdGlhbENoaWxkIiwiZmluYWxpemVJbml0aWFsQ2hpbGRyZW4iLCJwcmVwYXJlVXBkYXRlIiwiZ2V0Um9vdEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGV4dCIsImdldEhvc3RDb250ZXh0IiwicG9wSG9zdENvbnRhaW5lciIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwibWFya1VwZGF0ZSIsImFwcGVuZEFsbFlpZWxkcyIsInlpZWxkcyIsIm1vdmVDb3JvdXRpbmVUb0hhbmRsZXJQaGFzZSIsImFwcGVuZEFsbENoaWxkcmVuIiwiY29tcGxldGVXb3JrIiwiZmliZXJSb290Iiwicm9vdENvbnRhaW5lckluc3RhbmNlIiwiY3VycmVudEhvc3RDb250ZXh0IiwidXBkYXRlUGF5bG9hZCIsIl9jdXJyZW50SG9zdENvbnRleHQiLCJfaW5zdGFuY2UiLCJuZXdUZXh0IiwiX3Jvb3RDb250YWluZXJJbnN0YW5jZSIsIl9jdXJyZW50SG9zdENvbnRleHQyIiwid2FybmluZyQxMCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJoYXNMb2dnZWRFcnJvciIsImNhdGNoRXJyb3JzIiwiYXJnIiwiaW5qZWN0SW50ZXJuYWxzJDEiLCJpbnRlcm5hbHMiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJob29rIiwic3VwcG9ydHNGaWJlciIsInJlbmRlcmVySUQiLCJpbmplY3QiLCJvbkNvbW1pdFJvb3QkMSIsIm9uQ29tbWl0VW5tb3VudCQxIiwiaW5qZWN0SW50ZXJuYWxzXzEiLCJvbkNvbW1pdFJvb3RfMSIsIm9uQ29tbWl0VW5tb3VudF8xIiwiUmVhY3RGaWJlckRldlRvb2xzSG9vayIsImluamVjdEludGVybmFscyIsIm9uQ29tbWl0Um9vdCIsIm9uQ29tbWl0VW5tb3VudCIsIkNsYXNzQ29tcG9uZW50JDkiLCJIb3N0Um9vdCQ4IiwiSG9zdENvbXBvbmVudCQ4IiwiSG9zdFRleHQkNiIsIkhvc3RQb3J0YWwkNyIsIkNvcm91dGluZUNvbXBvbmVudCQ0IiwiY29tbWl0Q2FsbGJhY2tzJDEiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2skMiIsImhhc0NhdWdodEVycm9yJDEiLCJjbGVhckNhdWdodEVycm9yJDEiLCJQbGFjZW1lbnQkNSIsIlVwZGF0ZSQzIiwiQ2FsbGJhY2skMSIsIkNvbnRlbnRSZXNldCQyIiwiX3JlcXVpcmU1JDEiLCJzdGFydFBoYXNlVGltZXIkMiIsInN0b3BQaGFzZVRpbWVyJDIiLCJSZWFjdEZpYmVyQ29tbWl0V29yayIsImNhcHR1cmVFcnJvciIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZCIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJjYWxsQ29tcG9uZW50V2lsbFVubW91bnRXaXRoVGltZXJJbkRldiIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50IiwidW5tb3VudEVycm9yIiwic2FmZWx5RGV0YWNoUmVmIiwicmVmRXJyb3IiLCJnZXRIb3N0UGFyZW50RmliZXIiLCJpc0hvc3RQYXJlbnQiLCJnZXRIb3N0U2libGluZyIsInNpYmxpbmdzIiwiY29tbWl0UGxhY2VtZW50IiwicGFyZW50RmliZXIiLCJpc0NvbnRhaW5lciIsImJlZm9yZSIsImNvbW1pdE5lc3RlZFVubW91bnRzIiwiY29tbWl0VW5tb3VudCIsInVubW91bnRIb3N0Q29tcG9uZW50cyIsImN1cnJlbnRQYXJlbnRJc1ZhbGlkIiwiY3VycmVudFBhcmVudElzQ29udGFpbmVyIiwiZmluZFBhcmVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsInRleHRJbnN0YW5jZSIsIm9sZFRleHQiLCJjb21taXRMaWZlQ3ljbGVzIiwiX2luc3RhbmNlMiIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImN1cnJlbnRSZWYiLCJjcmVhdGVDdXJzb3IkMiIsInBvcCQyIiwicHVzaCQyIiwiTk9fQ09OVEVYVCIsIlJlYWN0RmliZXJIb3N0Q29udGV4dCIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJjb250ZXh0RmliZXJTdGFja0N1cnNvciIsInJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yIiwicmVxdWlyZWRDb250ZXh0IiwibmV4dFJvb3RJbnN0YW5jZSIsIm5leHRSb290Q29udGV4dCIsInJvb3RJbnN0YW5jZSIsIm5leHRDb250ZXh0IiwicmVzZXRIb3N0Q29udGFpbmVyIiwiSG9zdENvbXBvbmVudCQ5IiwiSG9zdFRleHQkNyIsIkhvc3RSb290JDkiLCJEZWxldGlvbiQyIiwiUGxhY2VtZW50JDYiLCJjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbiQxIiwiUmVhY3RGaWJlckh5ZHJhdGlvbkNvbnRleHQiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiaHlkcmF0aW9uUGFyZW50RmliZXIiLCJuZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiaXNIeWRyYXRpbmciLCJwYXJlbnRJbnN0YW5jZSIsImRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZSIsImluc2VydE5vbkh5ZHJhdGVkSW5zdGFuY2UiLCJ0ZXh0IiwiY2FuSHlkcmF0ZSIsIm5leHRJbnN0YW5jZSIsInBvcFRvTmV4dEhvc3RQYXJlbnQiLCJSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uJDIiLCJkZWJ1Z1Rvb2wiLCJSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEiLCJwb3BDb250ZXh0UHJvdmlkZXIkMSIsInJlc2V0JDEiLCJnZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyJDIiLCJsb2dDYXB0dXJlZEVycm9yJDEiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2skMSIsIlJlYWN0Q3VycmVudE93bmVyJDEiLCJjcmVhdGVXb3JrSW5Qcm9ncmVzcyQxIiwibGFyZ2VyUHJpb3JpdHkkMSIsIk5vV29yayQyIiwiU3luY2hyb25vdXNQcmlvcml0eSQxIiwiVGFza1ByaW9yaXR5JDEiLCJQbGFjZW1lbnQkMSIsIkhvc3RSb290JDUiLCJIb3N0Q29tcG9uZW50JDUiLCJIb3N0UG9ydGFsJDMiLCJDbGFzc0NvbXBvbmVudCQ1IiwiZ2V0VXBkYXRlUHJpb3JpdHkkMSIsIl9yZXF1aXJlMTQiLCJyZXNldENvbnRleHQkMSIsIndhcm5pbmckNiIsIlJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24kMSIsIlJlYWN0RGVidWdDdXJyZW50RmliZXIkMyIsIl9yZXF1aXJlMTUiLCJ3YXJuQWJvdXRVcGRhdGVPblVubW91bnRlZCIsImNvbnN0cnVjdG9yIiwid2FybkFib3V0SW52YWxpZFVwZGF0ZXMiLCJ0aW1lSGV1cmlzdGljRm9yVW5pdE9mV29yayIsIlJlYWN0RmliZXJTY2hlZHVsZXIiLCJfUmVhY3RGaWJlckJlZ2luV29yayIsIl9SZWFjdEZpYmVyQ29tcGxldGVXbyIsIl9SZWFjdEZpYmVyQ29tbWl0V29yayIsInNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwicHJpb3JpdHlDb250ZXh0IiwiaXNQZXJmb3JtaW5nV29yayIsImRlYWRsaW5lSGFzRXhwaXJlZCIsImlzQmF0Y2hpbmdVcGRhdGVzIiwiaXNVbmJhdGNoaW5nVXBkYXRlcyIsIm5leHRVbml0T2ZXb3JrIiwibmV4dFByaW9yaXR5TGV2ZWwiLCJwZW5kaW5nQ29tbWl0IiwibGFzdFNjaGVkdWxlZFJvb3QiLCJpc0NhbGxiYWNrU2NoZWR1bGVkIiwiY2FwdHVyZWRFcnJvcnMiLCJmYWlsZWRCb3VuZGFyaWVzIiwiY29tbWl0UGhhc2VCb3VuZGFyaWVzIiwiZmlyc3RVbmNhdWdodEVycm9yIiwiZGlkRmF0YWwiLCJpc1VubW91bnRpbmciLCJORVNURURfVVBEQVRFX0xJTUlUIiwibmVzdGVkVXBkYXRlQ291bnQiLCJuZXh0UmVuZGVyZWRUcmVlIiwicmVzZXRDb250ZXh0U3RhY2siLCJyZXNldE5leHRVbml0T2ZXb3JrIiwiaGlnaGVzdFByaW9yaXR5Um9vdCIsImhpZ2hlc3RQcmlvcml0eUxldmVsIiwiY29tbWl0QWxsSG9zdEVmZmVjdHMiLCJfY3VycmVudCIsIl9jdXJyZW50MiIsImNvbW1pdEFsbExpZmVDeWNsZXMiLCJjb21taXRFcnJvckhhbmRsaW5nIiwiY29tbWl0QWxsV29yayIsIl9lcnJvciIsIl9kaWRFcnJvciIsIl9lcnJvcjIiLCJvbkNvbW1pdFdvcmsiLCJzY2hlZHVsZUVycm9yUmVjb3ZlcnkiLCJyZXNldFdvcmtQcmlvcml0eSIsIm5ld1ByaW9yaXR5IiwiY29tcGxldGVVbml0T2ZXb3JrIiwic2libGluZ0ZpYmVyIiwib25Db21wbGV0ZVdvcmsiLCJwZXJmb3JtVW5pdE9mV29yayIsIm9uQmVnaW5Xb3JrIiwicGVyZm9ybUZhaWxlZFVuaXRPZldvcmsiLCJwZXJmb3JtRGVmZXJyZWRXb3JrIiwiZGVhZGxpbmUiLCJwZXJmb3JtV29yayIsImhhbmRsZUNvbW1pdFBoYXNlRXJyb3JzIiwic2l6ZSIsImhhc0NhcHR1cmVkRXJyb3IiLCJ3b3JrTG9vcCIsIm1pblByaW9yaXR5TGV2ZWwiLCJsb29wIiwidGltZVJlbWFpbmluZyIsInBlcmZvcm1Xb3JrQ2F0Y2hCbG9jayIsImZhaWxlZFdvcmsiLCJib3VuZGFyeSIsInVud2luZENvbnRleHRzIiwicHJldmlvdXNQcmlvcml0eUNvbnRleHQiLCJlcnJvclRvVGhyb3ciLCJpc0ZhaWxlZEJvdW5kYXJ5IiwiY29tcG9uZW50RGlkQ2F0Y2giLCJfY29tcG9uZW50U3RhY2siLCJfY29tcG9uZW50TmFtZSIsImVycm9yQm91bmRhcnkiLCJlZmZlY3RmdWxGaWJlciIsImZyb20iLCJ0byIsInNjaGVkdWxlUm9vdCIsInNjaGVkdWxlVXBkYXRlSW1wbCIsImlzRXJyb3JSZWNvdmVyeSIsInNob3VsZENvbnRpbnVlIiwiZm9yY2VBc3luYyIsInByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwicHJldmlvdXNJc1VuYmF0Y2hpbmdVcGRhdGVzIiwiZmx1c2hTeW5jIiwiYmF0Y2giLCJkZWZlcnJlZFVwZGF0ZXMiLCJ3YXJuaW5nJDEiLCJSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uIiwiUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciIsImdldENvbXBvbmVudE5hbWUiLCJnZXRDb250ZXh0Rm9yU3VidHJlZSIsInBhcmVudENvbXBvbmVudCIsIl9jbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwib2JqZWN0cyIsInVuaXF1ZUlEIiwiZW1wdHlPYmplY3QkMyIsIlJlYWN0TmF0aXZlUHJvcFJlZ2lzdHJ5IiwicmVnaXN0ZXIiLCJpZCIsImdldEJ5SUQiLCJ3YXJuIiwiUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnlfMSIsImVtcHR5T2JqZWN0JDIiLCJyZW1vdmVkS2V5cyIsInJlbW92ZWRLZXlDb3VudCIsImRlZmF1bHREaWZmZXIiLCJwcmV2UHJvcCIsIm5leHRQcm9wIiwicmVzb2x2ZU9iamVjdCIsImlkT3JPYmplY3QiLCJyZXN0b3JlRGVsZXRlZFZhbHVlc0luTmVzdGVkQXJyYXkiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJvYmoiLCJwcm9wS2V5IiwiYXR0cmlidXRlQ29uZmlnIiwiZGlmZiIsInByb2Nlc3MiLCJuZXh0VmFsdWUiLCJkaWZmTmVzdGVkQXJyYXlQcm9wZXJ0eSIsInByZXZBcnJheSIsIm5leHRBcnJheSIsIm1pbkxlbmd0aCIsImRpZmZOZXN0ZWRQcm9wZXJ0eSIsImNsZWFyTmVzdGVkUHJvcGVydHkiLCJhZGROZXN0ZWRQcm9wZXJ0eSIsImRpZmZQcm9wZXJ0aWVzIiwiYWRkUHJvcGVydGllcyIsImNsZWFyUHJvcGVydGllcyIsIlJlYWN0TmF0aXZlQXR0cmlidXRlUGF5bG9hZCIsImNyZWF0ZSIsIlJlYWN0TmF0aXZlQXR0cmlidXRlUGF5bG9hZF8xIiwibW91bnRTYWZlQ2FsbGJhY2skMSIsIl9faXNNb3VudGVkIiwidGhyb3dPblN0eWxlc1Byb3AiLCJzdHlsZXMiLCJtc2ciLCJ3YXJuRm9yU3R5bGVQcm9wcyQxIiwic3R5bGUiLCJOYXRpdmVNZXRob2RzTWl4aW5VdGlscyIsIm1vdW50U2FmZUNhbGxiYWNrIiwid2FybkZvclN0eWxlUHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2skMSIsIlJlYWN0TmF0aXZlRmliZXJIb3N0Q29tcG9uZW50Iiwidmlld0NvbmZpZyIsIl9jaGlsZHJlbiIsImJsdXIiLCJibHVyVGV4dElucHV0IiwiZm9jdXMiLCJmb2N1c1RleHRJbnB1dCIsIm1lYXN1cmVJbldpbmRvdyIsIm1lYXN1cmVMYXlvdXQiLCJyZWxhdGl2ZVRvTmF0aXZlTm9kZSIsIm9uU3VjY2VzcyIsIm9uRmFpbCIsInNldE5hdGl2ZVByb3BzIiwibmF0aXZlUHJvcHMiLCJ1cGRhdGVWaWV3IiwidWlWaWV3Q2xhc3NOYW1lIiwiUmVhY3ROYXRpdmVGaWJlckhvc3RDb21wb25lbnRfMSIsIklOSVRJQUxfVEFHX0NPVU5UIiwiUmVhY3ROYXRpdmVUYWdIYW5kbGVzIiwidGFnc1N0YXJ0QXQiLCJ0YWdDb3VudCIsImFsbG9jYXRlVGFnIiwicmVhY3RUYWdJc05hdGl2ZVRvcFJvb3RJRCIsImFzc2VydFJvb3RUYWciLCJyZWFjdFRhZyIsIlJlYWN0TmF0aXZlVGFnSGFuZGxlc18xIiwidmlld0NvbmZpZ0NhbGxiYWNrcyIsInZpZXdDb25maWdzIiwiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkiLCJSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeV8xIiwicHJlY2FjaGVGaWJlck5vZGUkMSIsInVuY2FjaGVGaWJlck5vZGUkMSIsInVwZGF0ZUZpYmVyUHJvcHMkMSIsInJlY3Vyc2l2ZWx5VW5jYWNoZUZpYmVyTm9kZSIsIk5hdGl2ZVJlbmRlcmVyIiwiX1JlYWN0RmliZXJTY2hlZHVsZXIiLCJzY2hlZHVsZVRvcExldmVsVXBkYXRlIiwiY3JlYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyIiwiY29udGFpbmVyIiwib25Nb3VudENvbnRhaW5lciIsIm9uVW5tb3VudENvbnRhaW5lciIsIm9uVXBkYXRlQ29udGFpbmVyIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiY29udGFpbmVyRmliZXIiLCJmaW5kSG9zdEluc3RhbmNlIiwiaG9zdEZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJjaGlsZFRhZyIsImluZGV4T2YiLCJzcGxpY2UiLCJtYW5hZ2VDaGlsZHJlbiIsInNldENoaWxkcmVuIiwiaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSIsInVwZGF0ZVBheWxvYWRUT0RPIiwiaGFzT3duUHJvcGVydHkiLCJjcmVhdGVWaWV3IiwibmF0aXZlVGFncyIsIm1hcCIsImJlZm9yZUNoaWxkIiwiYmVmb3JlQ2hpbGRJbmRleCIsIl9iZWZvcmVDaGlsZEluZGV4IiwicmVxdWVzdElkbGVDYWxsYmFjayIsIlJlYWN0TmF0aXZlRmliZXJSZW5kZXJlciIsImZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoJDEiLCJIb3N0Q29tcG9uZW50JDEwIiwiZ2V0SW5zcGVjdG9yRGF0YUZvclZpZXdUYWciLCJ0cmF2ZXJzZU93bmVyVHJlZVVwIiwiaGllcmFyY2h5IiwidW5zaGlmdCIsImdldE93bmVySGllcmFyY2h5IiwibGFzdE5vbkhvc3RJbnN0YW5jZSIsImdldEhvc3RQcm9wcyIsImhvc3QiLCJnZXRIb3N0Tm9kZSIsImZpbmROb2RlSGFuZGxlIiwiaG9zdE5vZGUiLCJjcmVhdGVIaWVyYXJjaHkiLCJmaWJlckhpZXJhcmNoeSIsImdldEluc3BlY3RvckRhdGEiLCJ2aWV3VGFnIiwiY2xvc2VzdEluc3RhbmNlIiwic2VsZWN0aW9uIiwiUmVhY3ROYXRpdmVGaWJlckluc3BlY3RvciIsIlJlYWN0VmVyc2lvbiIsIlJlYWN0Q3VycmVudE93bmVyJDMiLCJ3YXJuaW5nJDExIiwiY29tcG9uZW50T3JIYW5kbGUiLCJmaW5kTm9kZUhhbmRsZV8xIiwiZmluZE51bWVyaWNOb2RlSGFuZGxlIiwiZXZlbnRQbHVnaW5PcmRlciIsIm5hbWVzVG9QbHVnaW5zIiwicmVjb21wdXRlUGx1Z2luT3JkZXJpbmciLCJwbHVnaW5OYW1lIiwicGx1Z2luTW9kdWxlIiwicGx1Z2luSW5kZXgiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwicGx1Z2lucyIsImV4dHJhY3RFdmVudHMiLCJwdWJsaXNoZWRFdmVudHMiLCJldmVudFR5cGVzIiwiZXZlbnROYW1lIiwicHVibGlzaEV2ZW50Rm9yUGx1Z2luIiwiZGlzcGF0Y2hDb25maWciLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInBoYXNlTmFtZSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUiLCJwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmNpZXMiLCJsb3dlckNhc2VkTmFtZSIsInRvTG93ZXJDYXNlIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsIm9uZGJsY2xpY2siLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyIsImlzT3JkZXJpbmdEaXJ0eSIsIkV2ZW50UGx1Z2luUmVnaXN0cnlfMSIsImFjY3VtdWxhdGVJbnRvIiwiY29uY2F0IiwiYWNjdW11bGF0ZUludG9fMSIsImZvckVhY2hBY2N1bXVsYXRlZCIsImFyciIsImNiIiwic2NvcGUiLCJmb3JFYWNoQWNjdW11bGF0ZWRfMSIsImV2ZW50UXVldWUiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkIiwiZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwiLCJpc0ludGVyYWN0aXZlIiwic2hvdWxkUHJldmVudE1vdXNlRXZlbnQiLCJkaXNhYmxlZCIsIkV2ZW50UGx1Z2luSHViIiwiZ2V0TGlzdGVuZXIiLCJ0YXJnZXRJbnN0IiwibmF0aXZlRXZlbnQiLCJuYXRpdmVFdmVudFRhcmdldCIsImV2ZW50cyIsInBvc3NpYmxlUGx1Z2luIiwiZXh0cmFjdGVkRXZlbnRzIiwiZW5xdWV1ZUV2ZW50cyIsInByb2Nlc3NFdmVudFF1ZXVlIiwicHJvY2Vzc2luZ0V2ZW50UXVldWUiLCJFdmVudFBsdWdpbkh1Yl8xIiwiSG9zdENvbXBvbmVudCQxMSIsImdldFBhcmVudCIsImdldExvd2VzdENvbW1vbkFuY2VzdG9yIiwiaW5zdEEiLCJpbnN0QiIsImRlcHRoQSIsInRlbXBBIiwiZGVwdGhCIiwidGVtcEIiLCJkZXB0aCIsImlzQW5jZXN0b3IiLCJnZXRQYXJlbnRJbnN0YW5jZSIsInRyYXZlcnNlVHdvUGhhc2UiLCJwYXRoIiwidHJhdmVyc2VFbnRlckxlYXZlIiwiYXJnRnJvbSIsImFyZ1RvIiwiY29tbW9uIiwicGF0aEZyb20iLCJwYXRoVG8iLCJSZWFjdFRyZWVUcmF2ZXJzYWwiLCJ3YXJuaW5nJDEyIiwibGlzdGVuZXJBdFBoYXNlIiwicHJvcGFnYXRpb25QaGFzZSIsImFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlIiwiX3RhcmdldEluc3QiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldCIsInBhcmVudEluc3QiLCJhY2N1bXVsYXRlRGlzcGF0Y2hlcyIsImlnbm9yZWREaXJlY3Rpb24iLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImxlYXZlIiwiZW50ZXIiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsIkV2ZW50UHJvcGFnYXRvcnMiLCJFdmVudFByb3BhZ2F0b3JzXzEiLCJkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eSIsImlzUHJveHlTdXBwb3J0ZWQiLCJQcm94eSIsIkVWRU5UX1BPT0xfU0laRSIsIndhcm5pbmckMTMiLCJzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllcyIsIkV2ZW50SW50ZXJmYWNlIiwidGhhdFJldHVybnNOdWxsIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1RydXN0ZWQiLCJTeW50aGV0aWNFdmVudCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiSW50ZXJmYWNlIiwicHJvcE5hbWUiLCJub3JtYWxpemUiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zRmFsc2UiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZGVzdHJ1Y3RvciIsImdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24iLCJhdWdtZW50Q2xhc3MiLCJDbGFzcyIsIlN1cGVyIiwiRSIsImFkZEV2ZW50UG9vbGluZ1RvIiwiY29uc3RydWN0IiwiYXJncyIsInRoYXQiLCJwcm9wIiwiU3ludGhldGljRXZlbnRfMSIsImdldFZhbCIsImlzRnVuY3Rpb24iLCJjb25maWd1cmFibGUiLCJ2YWwiLCJhY3Rpb24iLCJyZXN1bHQiLCJnZXRQb29sZWRFdmVudCIsIm5hdGl2ZUluc3QiLCJFdmVudENvbnN0cnVjdG9yIiwiZXZlbnRQb29sIiwicmVsZWFzZVBvb2xlZEV2ZW50IiwiZ2V0UG9vbGVkIiwiY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzIiwiY3VzdG9tRGlyZWN0RXZlbnRUeXBlcyIsIlJlYWN0TmF0aXZlQnJpZGdlRXZlbnRQbHVnaW4iLCJidWJibGVEaXNwYXRjaENvbmZpZyIsImRpcmVjdERpc3BhdGNoQ29uZmlnIiwicHJvY2Vzc0V2ZW50VHlwZXMiLCJidWJibGluZ0V2ZW50VHlwZXMiLCJkaXJlY3RFdmVudFR5cGVzIiwiX3RvcExldmVsVHlwZSIsIl90b3BMZXZlbFR5cGUyIiwiUmVhY3ROYXRpdmVCcmlkZ2VFdmVudFBsdWdpbl8xIiwicnVuRXZlbnRRdWV1ZUluQmF0Y2giLCJSZWFjdEV2ZW50RW1pdHRlck1peGluIiwiaGFuZGxlVG9wTGV2ZWwiLCJSZWFjdEV2ZW50RW1pdHRlck1peGluXzEiLCJ3YXJuaW5nJDE0IiwiRU1QVFlfTkFUSVZFX0VWRU5UIiwidG91Y2hTdWJzZXF1ZW5jZSIsInRvdWNoZXMiLCJpbmRpY2VzIiwicmVtb3ZlVG91Y2hlc0F0SW5kaWNlcyIsInJpcHBlZE91dCIsInRlbXAiLCJmaWxsQXQiLCJqIiwiY3VyIiwiUmVhY3ROYXRpdmVFdmVudEVtaXR0ZXIiLCJyZWdpc3RyYXRpb25OYW1lcyIsIl9yZWNlaXZlUm9vdE5vZGVJREV2ZW50Iiwicm9vdE5vZGVJRCIsIm5hdGl2ZUV2ZW50UGFyYW0iLCJyZWNlaXZlRXZlbnQiLCJyZWNlaXZlVG91Y2hlcyIsImV2ZW50VG9wTGV2ZWxUeXBlIiwiY2hhbmdlZEluZGljZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImpqIiwidG91Y2giLCJSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlcl8xIiwiUmVhY3ROYXRpdmVFdmVudFBsdWdpbk9yZGVyIiwiUmVhY3ROYXRpdmVFdmVudFBsdWdpbk9yZGVyXzEiLCJSZWFjdE5hdGl2ZUdsb2JhbFJlc3BvbmRlckhhbmRsZXIiLCJvbkNoYW5nZSIsImJsb2NrTmF0aXZlUmVzcG9uZGVyIiwic2V0SlNSZXNwb25kZXIiLCJjbGVhckpTUmVzcG9uZGVyIiwiUmVhY3ROYXRpdmVHbG9iYWxSZXNwb25kZXJIYW5kbGVyXzEiLCJSZXNwb25kZXJFdmVudEludGVyZmFjZSIsInRvdWNoSGlzdG9yeSIsIlJlc3BvbmRlclN5bnRoZXRpY0V2ZW50IiwiZGlzcGF0Y2hNYXJrZXIiLCJSZXNwb25kZXJTeW50aGV0aWNFdmVudF8xIiwiaXNFbmRpc2gkMiIsImlzTW92ZWlzaCQyIiwiaXNTdGFydGlzaCQyIiwid2FybmluZyQxNSIsIk1BWF9UT1VDSF9CQU5LIiwidG91Y2hCYW5rIiwibnVtYmVyQWN0aXZlVG91Y2hlcyIsImluZGV4T2ZTaW5nbGVBY3RpdmVUb3VjaCIsIm1vc3RSZWNlbnRUaW1lU3RhbXAiLCJ0aW1lc3RhbXBGb3JUb3VjaCIsInRpbWVzdGFtcCIsImNyZWF0ZVRvdWNoUmVjb3JkIiwidG91Y2hBY3RpdmUiLCJzdGFydFBhZ2VYIiwicGFnZVgiLCJzdGFydFBhZ2VZIiwicGFnZVkiLCJzdGFydFRpbWVTdGFtcCIsImN1cnJlbnRQYWdlWCIsImN1cnJlbnRQYWdlWSIsImN1cnJlbnRUaW1lU3RhbXAiLCJwcmV2aW91c1BhZ2VYIiwicHJldmlvdXNQYWdlWSIsInByZXZpb3VzVGltZVN0YW1wIiwicmVzZXRUb3VjaFJlY29yZCIsInRvdWNoUmVjb3JkIiwiZ2V0VG91Y2hJZGVudGlmaWVyIiwiX3JlZiIsImlkZW50aWZpZXIiLCJyZWNvcmRUb3VjaFN0YXJ0IiwicmVjb3JkVG91Y2hNb3ZlIiwicHJpbnRUb3VjaCIsInByaW50VG91Y2hCYW5rIiwicmVjb3JkVG91Y2hFbmQiLCJKU09OIiwic3RyaW5naWZ5IiwicHJpbnRlZCIsIlJlc3BvbmRlclRvdWNoSGlzdG9yeVN0b3JlIiwicmVjb3JkVG91Y2hUcmFjayIsInRvdWNoVHJhY2tUb0NoZWNrIiwiYWN0aXZlUmVjb3JkIiwiUmVzcG9uZGVyVG91Y2hIaXN0b3J5U3RvcmVfMSIsImFjY3VtdWxhdGUiLCJhY2N1bXVsYXRlXzEiLCJpc1N0YXJ0aXNoJDEiLCJpc01vdmVpc2gkMSIsImlzRW5kaXNoJDEiLCJleGVjdXRlRGlyZWN0RGlzcGF0Y2gkMSIsImhhc0Rpc3BhdGNoZXMkMSIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUkMSIsInJlc3BvbmRlckluc3QiLCJ0cmFja2VkVG91Y2hDb3VudCIsInByZXZpb3VzQWN0aXZlVG91Y2hlcyIsImNoYW5nZVJlc3BvbmRlciIsIm5leHRSZXNwb25kZXJJbnN0IiwiYmxvY2tIb3N0UmVzcG9uZGVyIiwib2xkUmVzcG9uZGVySW5zdCIsIlJlc3BvbmRlckV2ZW50UGx1Z2luIiwiR2xvYmFsUmVzcG9uZGVySGFuZGxlciIsInN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwiYnViYmxlZCIsImNhcHR1cmVkIiwic2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyIiwic2VsZWN0aW9uQ2hhbmdlU2hvdWxkU2V0UmVzcG9uZGVyIiwibW92ZVNob3VsZFNldFJlc3BvbmRlciIsInJlc3BvbmRlclN0YXJ0IiwicmVzcG9uZGVyTW92ZSIsInJlc3BvbmRlckVuZCIsInJlc3BvbmRlclJlbGVhc2UiLCJyZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QiLCJyZXNwb25kZXJHcmFudCIsInJlc3BvbmRlclJlamVjdCIsInJlc3BvbmRlclRlcm1pbmF0ZSIsInNldFJlc3BvbmRlckFuZEV4dHJhY3RUcmFuc2ZlciIsInNob3VsZFNldEV2ZW50VHlwZSIsImJ1YmJsZVNob3VsZFNldEZyb20iLCJza2lwT3ZlckJ1YmJsZVNob3VsZFNldEZyb20iLCJzaG91bGRTZXRFdmVudCIsIndhbnRzUmVzcG9uZGVySW5zdCIsImV4dHJhY3RlZCIsImdyYW50RXZlbnQiLCJ0ZXJtaW5hdGlvblJlcXVlc3RFdmVudCIsInNob3VsZFN3aXRjaCIsInRlcm1pbmF0ZUV2ZW50IiwicmVqZWN0RXZlbnQiLCJjYW5UcmlnZ2VyVHJhbnNmZXIiLCJ0b3BMZXZlbEluc3QiLCJyZXNwb25kZXJJZ25vcmVTY3JvbGwiLCJub1Jlc3BvbmRlclRvdWNoZXMiLCJhY3RpdmVUb3VjaCIsIl9nZXRSZXNwb25kZXIiLCJpc1Jlc3BvbmRlclRvdWNoU3RhcnQiLCJpc1Jlc3BvbmRlclRvdWNoTW92ZSIsImlzUmVzcG9uZGVyVG91Y2hFbmQiLCJpbmNyZW1lbnRhbFRvdWNoIiwiZ2VzdHVyZSIsImlzUmVzcG9uZGVyVGVybWluYXRlIiwiaXNSZXNwb25kZXJSZWxlYXNlIiwiZmluYWxUb3VjaCIsImZpbmFsRXZlbnQiLCJHbG9iYWxJbnRlcmFjdGlvbkhhbmRsZXIiLCJpbmplY3RHbG9iYWxSZXNwb25kZXJIYW5kbGVyIiwiaW5qZWN0R2xvYmFsSW50ZXJhY3Rpb25IYW5kbGVyIiwiUmVzcG9uZGVyRXZlbnRQbHVnaW5fMSIsIl9jbGFzc0NhbGxDaGVjayQyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIndyaXRhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJtb3VudFNhZmVDYWxsYmFjayQyIiwiUmVhY3ROYXRpdmVDb21wb25lbnQiLCJfUmVhY3QkQ29tcG9uZW50IiwibWF5YmVJbnN0YW5jZSIsIlJlYWN0TmF0aXZlQ29tcG9uZW50XzEiLCJtb3VudFNhZmVDYWxsYmFjayQzIiwidGhyb3dPblN0eWxlc1Byb3AkMSIsIndhcm5Gb3JTdHlsZVByb3BzJDIiLCJOYXRpdmVNZXRob2RzTWl4aW4iLCJOYXRpdmVNZXRob2RzTWl4aW5fREVWIiwiTmF0aXZlTWV0aG9kc01peGluXzEiLCJUb3VjaEhpc3RvcnlNYXRoIiwiY2VudHJvaWREaW1lbnNpb24iLCJ0b3VjaGVzQ2hhbmdlZEFmdGVyIiwiaXNYQXhpcyIsIm9mQ3VycmVudCIsInRvdGFsIiwib25lVG91Y2hEYXRhIiwidG91Y2hUcmFjayIsInRvQWRkIiwibm9DZW50cm9pZCIsImN1cnJlbnRDZW50cm9pZFhPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXIiLCJjdXJyZW50Q2VudHJvaWRZT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyIiwicHJldmlvdXNDZW50cm9pZFhPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXIiLCJwcmV2aW91c0NlbnRyb2lkWU9mVG91Y2hlc0NoYW5nZWRBZnRlciIsImN1cnJlbnRDZW50cm9pZFgiLCJjdXJyZW50Q2VudHJvaWRZIiwiVG91Y2hIaXN0b3J5TWF0aF8xIiwiY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyIsImNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3NfMSIsInRha2VTbmFwc2hvdCIsInZpZXciLCJvcHRpb25zIiwiX190YWtlU25hcHNob3QiLCJ0YWtlU25hcHNob3RfMSIsInJvb3RzIiwiUmVhY3ROYXRpdmVGaWJlciIsIk5hdGl2ZUNvbXBvbmVudCIsImNvbnRhaW5lclRhZyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlQW5kUmVtb3ZlQ29udGFpbmVyIiwicmVtb3ZlUm9vdFZpZXciLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsIlJlYWN0RGVidWdUb29sIiwiYWRkSG9vayIsInJlbW92ZUhvb2siLCJSZWFjdFBlcmYiLCJzdGFydCIsInN0b3AiLCJwcmludEluY2x1c2l2ZSIsInByaW50V2FzdGVkIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIlJlYWN0TmF0aXZlRmliZXJFbnRyeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVNBLGEsZ09BRUFBLFNBQVcsVUFBVyxDQUNsQixHQUFJQyxXQUFZQyxRQUFRLG9CQUFSLENBQWhCLENBQStDQyxXQUFhRCxRQUFRLGtCQUFSLENBQTVELENBQXlGRSxrQkFBb0JGLFFBQVEsbUJBQVIsQ0FBN0csQ0FBMklH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QUFFLENBSm5CLENBTG9FLENBQW5GLEVBV0k3dEIsZ0JBQWdCLENBQ2hCOHRCLHdCQUF5Qmg3QywyQkFBMkJELDBCQURwQyxDQUVoQms3Qyx3QkFBeUI5WSx5QkFBeUJsQixnQkFGbEMsQ0FHaEJxQiwyQkFBNEJpQiwwQkFBMEJqQiwwQkFIdEMsQ0FJaEI0WSxXQUFZLENBSkksQ0FLaEJDLFFBQVMzWCxZQUxPLENBTWhCNFgsb0JBQXFCLGNBTkwsQ0FBaEIsQ0FYSixDQW1CQSxHQUFJQyx1QkFBd0JwQixnQkFBNUIsQ0FDQXFCLE9BQU9DLE9BQVAsQ0FBaUJGLHFCQUFqQixDQUNILENBajVIVSxFQUFYIiwiZmlsZSI6IlJlYWN0TmF0aXZlRmliZXItZGV2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbm9mbG93XG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3ROYXRpdmVGaWJlci1kZXZcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbl9fREVWX18gJiYgZnVuY3Rpb24oKSB7XG4gICAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksIHJlcXVpcmUkJDAgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKSwgRXhjZXB0aW9uc01hbmFnZXIgPSByZXF1aXJlKFwiRXhjZXB0aW9uc01hbmFnZXJcIiksIGVtcHR5T2JqZWN0ID0gcmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLCByZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKSwgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKFwicHJvcC10eXBlcy9jaGVja1Byb3BUeXBlc1wiKSwgc2hhbGxvd0VxdWFsID0gcmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSwgZGVlcERpZmZlciA9IHJlcXVpcmUoXCJkZWVwRGlmZmVyXCIpLCBmbGF0dGVuU3R5bGUgPSByZXF1aXJlKFwiZmxhdHRlblN0eWxlXCIpLCBUZXh0SW5wdXRTdGF0ZSA9IHJlcXVpcmUoXCJUZXh0SW5wdXRTdGF0ZVwiKSwgVUlNYW5hZ2VyID0gcmVxdWlyZShcIlVJTWFuYWdlclwiKSwgZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2ID0gcmVxdWlyZShcImRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldlwiKTtcbiAgICByZXF1aXJlKFwiSW5pdGlhbGl6ZUNvcmVcIik7XG4gICAgdmFyIFJDVEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCJSQ1RFdmVudEVtaXR0ZXJcIiksIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSwgZGVmYXVsdFNob3dEaWFsb2cgPSBmdW5jdGlvbihjYXB0dXJlZEVycm9yKSB7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9LCBzaG93RGlhbG9nID0gZGVmYXVsdFNob3dEaWFsb2c7XG4gICAgZnVuY3Rpb24gbG9nQ2FwdHVyZWRFcnJvcihjYXB0dXJlZEVycm9yKSB7XG4gICAgICAgIGlmICghMSAhPT0gc2hvd0RpYWxvZyhjYXB0dXJlZEVycm9yKSkge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSAoY2FwdHVyZWRFcnJvci5lcnJvciwgY2FwdHVyZWRFcnJvci5jb21wb25lbnROYW1lKSwgY29tcG9uZW50U3RhY2sgPSBjYXB0dXJlZEVycm9yLmNvbXBvbmVudFN0YWNrLCBlcnJvckJvdW5kYXJ5TmFtZSA9IGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeU5hbWUsIGVycm9yQm91bmRhcnlGb3VuZCA9IGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeUZvdW5kLCB3aWxsUmV0cnkgPSBjYXB0dXJlZEVycm9yLndpbGxSZXRyeSwgY29tcG9uZW50TmFtZU1lc3NhZ2UgPSBjb21wb25lbnROYW1lID8gXCJUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gdGhlIDxcIiArIGNvbXBvbmVudE5hbWUgKyBcIj4gY29tcG9uZW50OlwiIDogXCJUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gb25lIG9mIHlvdXIgUmVhY3QgY29tcG9uZW50czpcIiwgZXJyb3JCb3VuZGFyeU1lc3NhZ2UgPSB2b2lkIDA7XG4gICAgICAgICAgICBlcnJvckJvdW5kYXJ5TWVzc2FnZSA9IGVycm9yQm91bmRhcnlGb3VuZCAmJiBlcnJvckJvdW5kYXJ5TmFtZSA/IHdpbGxSZXRyeSA/IFwiUmVhY3Qgd2lsbCB0cnkgdG8gcmVjcmVhdGUgdGhpcyBjb21wb25lbnQgdHJlZSBmcm9tIHNjcmF0Y2ggXCIgKyBcInVzaW5nIHRoZSBlcnJvciBib3VuZGFyeSB5b3UgcHJvdmlkZWQsIFwiICsgZXJyb3JCb3VuZGFyeU5hbWUgKyBcIi5cIiA6IFwiVGhpcyBlcnJvciB3YXMgaW5pdGlhbGx5IGhhbmRsZWQgYnkgdGhlIGVycm9yIGJvdW5kYXJ5IFwiICsgZXJyb3JCb3VuZGFyeU5hbWUgKyBcIi5cXG5cIiArIFwiUmVjcmVhdGluZyB0aGUgdHJlZSBmcm9tIHNjcmF0Y2ggZmFpbGVkIHNvIFJlYWN0IHdpbGwgdW5tb3VudCB0aGUgdHJlZS5cIiA6IFwiQ29uc2lkZXIgYWRkaW5nIGFuIGVycm9yIGJvdW5kYXJ5IHRvIHlvdXIgdHJlZSB0byBjdXN0b21pemUgZXJyb3IgaGFuZGxpbmcgYmVoYXZpb3IuXFxuXCIgKyBcIllvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBlcnJvciBib3VuZGFyaWVzIGF0IGh0dHBzOi8vZmIubWUvcmVhY3QtZXJyb3ItYm91bmRhcmllcy5cIjtcbiAgICAgICAgICAgIHZhciBjb21iaW5lZE1lc3NhZ2UgPSBcIlwiICsgY29tcG9uZW50TmFtZU1lc3NhZ2UgKyBjb21wb25lbnRTdGFjayArIFwiXFxuXFxuXCIgKyBlcnJvckJvdW5kYXJ5TWVzc2FnZTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY29tYmluZWRNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgaW5qZWN0aW9uID0ge1xuICAgICAgICBpbmplY3REaWFsb2c6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICBpbnZhcmlhbnQoc2hvd0RpYWxvZyA9PT0gZGVmYXVsdFNob3dEaWFsb2csIFwiVGhlIGN1c3RvbSBkaWFsb2cgd2FzIGFscmVhZHkgaW5qZWN0ZWQuXCIpLCBcbiAgICAgICAgICAgIGludmFyaWFudChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGZuLCBcIkluamVjdGVkIHNob3dEaWFsb2coKSBtdXN0IGJlIGEgZnVuY3Rpb24uXCIpLCBcbiAgICAgICAgICAgIHNob3dEaWFsb2cgPSBmbjtcbiAgICAgICAgfVxuICAgIH0sIGxvZ0NhcHR1cmVkRXJyb3JfMSA9IGxvZ0NhcHR1cmVkRXJyb3IsIFJlYWN0RmliZXJFcnJvckxvZ2dlciA9IHtcbiAgICAgICAgaW5qZWN0aW9uOiBpbmplY3Rpb24sXG4gICAgICAgIGxvZ0NhcHR1cmVkRXJyb3I6IGxvZ0NhcHR1cmVkRXJyb3JfMVxuICAgIH0sIFJlYWN0RXJyb3JVdGlscyA9IHtcbiAgICAgICAgX2NhdWdodEVycm9yOiBudWxsLFxuICAgICAgICBfaGFzQ2F1Z2h0RXJyb3I6ICExLFxuICAgICAgICBfcmV0aHJvd0Vycm9yOiBudWxsLFxuICAgICAgICBfaGFzUmV0aHJvd0Vycm9yOiAhMSxcbiAgICAgICAgaW5qZWN0aW9uOiB7XG4gICAgICAgICAgICBpbmplY3RFcnJvclV0aWxzOiBmdW5jdGlvbihpbmplY3RlZEVycm9yVXRpbHMpIHtcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoXCJmdW5jdGlvblwiID09IHR5cGVvZiBpbmplY3RlZEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrLCBcIkluamVjdGVkIGludm9rZUd1YXJkZWRDYWxsYmFjaygpIG11c3QgYmUgYSBmdW5jdGlvbi5cIiksIFxuICAgICAgICAgICAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayA9IGluamVjdGVkRXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjazogZnVuY3Rpb24obmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgICAgICAgaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KFJlYWN0RXJyb3JVdGlscywgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOiBmdW5jdGlvbihuYW1lLCBmdW5jLCBjb250ZXh0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgICAgICBpZiAoUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBSZWFjdEVycm9yVXRpbHMuaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IFJlYWN0RXJyb3JVdGlscy5jbGVhckNhdWdodEVycm9yKCk7XG4gICAgICAgICAgICAgICAgUmVhY3RFcnJvclV0aWxzLl9oYXNSZXRocm93RXJyb3IgfHwgKFJlYWN0RXJyb3JVdGlscy5faGFzUmV0aHJvd0Vycm9yID0gITAsIFJlYWN0RXJyb3JVdGlscy5fcmV0aHJvd0Vycm9yID0gZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXRocm93Q2F1Z2h0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJldGhyb3dDYXVnaHRFcnJvci5hcHBseShSZWFjdEVycm9yVXRpbHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc0NhdWdodEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdEVycm9yVXRpbHMuX2hhc0NhdWdodEVycm9yO1xuICAgICAgICB9LFxuICAgICAgICBjbGVhckNhdWdodEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChSZWFjdEVycm9yVXRpbHMuX2hhc0NhdWdodEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gUmVhY3RFcnJvclV0aWxzLl9jYXVnaHRFcnJvcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3RFcnJvclV0aWxzLl9jYXVnaHRFcnJvciA9IG51bGwsIFJlYWN0RXJyb3JVdGlscy5faGFzQ2F1Z2h0RXJyb3IgPSAhMSwgXG4gICAgICAgICAgICAgICAgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnZhcmlhbnQoITEsIFwiY2xlYXJDYXVnaHRFcnJvciB3YXMgY2FsbGVkIGJ1dCBubyBlcnJvciB3YXMgY2FwdHVyZWQuIFRoaXMgZXJyb3IgXCIgKyBcImlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKTtcbiAgICAgICAgfVxuICAgIH0sIGludm9rZUd1YXJkZWRDYWxsYmFjayA9IGZ1bmN0aW9uKG5hbWUsIGZ1bmMsIGNvbnRleHQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgUmVhY3RFcnJvclV0aWxzLl9oYXNDYXVnaHRFcnJvciA9ICExLCBSZWFjdEVycm9yVXRpbHMuX2NhdWdodEVycm9yID0gbnVsbDtcbiAgICAgICAgdmFyIGZ1bmNBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgZnVuY0FyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgUmVhY3RFcnJvclV0aWxzLl9jYXVnaHRFcnJvciA9IGVycm9yLCBSZWFjdEVycm9yVXRpbHMuX2hhc0NhdWdodEVycm9yID0gITA7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiB3aW5kb3cuZGlzcGF0Y2hFdmVudCAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgIHZhciBmYWtlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJyZWFjdFwiKTtcbiAgICAgICAgaW52b2tlR3VhcmRlZENhbGxiYWNrID0gZnVuY3Rpb24obmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgICAgICAgdmFyIGRpZEVycm9yID0gITAsIGZ1bmNBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICBmYWtlTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2dFR5cGUsIGNhbGxDYWxsYmFjaywgITEpLCBmdW5jLmFwcGx5KGNvbnRleHQsIGZ1bmNBcmdzKSwgXG4gICAgICAgICAgICAgICAgZGlkRXJyb3IgPSAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlcnJvciA9IHZvaWQgMCwgZGlkU2V0RXJyb3IgPSAhMSwgaXNDcm9zc09yaWdpbkVycm9yID0gITE7XG4gICAgICAgICAgICBmdW5jdGlvbiBvbkVycm9yKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBldmVudC5lcnJvciwgZGlkU2V0RXJyb3IgPSAhMCwgbnVsbCA9PT0gZXJyb3IgJiYgMCA9PT0gZXZlbnQuY29sbm8gJiYgMCA9PT0gZXZlbnQubGluZW5vICYmIChpc0Nyb3NzT3JpZ2luRXJyb3IgPSAhMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXZ0VHlwZSA9IFwicmVhY3QtXCIgKyAobmFtZSB8fCBcImludm9rZWd1YXJkZWRjYWxsYmFja1wiKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25FcnJvciksIGZha2VOb2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgY2FsbENhbGxiYWNrLCAhMSk7XG4gICAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICAgICAgICAgIGV2dC5pbml0RXZlbnQoZXZ0VHlwZSwgITEsICExKSwgZmFrZU5vZGUuZGlzcGF0Y2hFdmVudChldnQpLCBkaWRFcnJvciA/IChkaWRTZXRFcnJvciA/IGlzQ3Jvc3NPcmlnaW5FcnJvciAmJiAoZXJyb3IgPSBuZXcgRXJyb3IoXCJBIGNyb3NzLW9yaWdpbiBlcnJvciB3YXMgdGhyb3duLiBSZWFjdCBkb2Vzbid0IGhhdmUgYWNjZXNzIHRvIFwiICsgXCJ0aGUgYWN0dWFsIGVycm9yIG9iamVjdCBpbiBkZXZlbG9wbWVudC4gXCIgKyBcIlNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWNyb3Nzb3JpZ2luLWVycm9yIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKSkgOiBlcnJvciA9IG5ldyBFcnJvcihcIkFuIGVycm9yIHdhcyB0aHJvd24gaW5zaWRlIG9uZSBvZiB5b3VyIGNvbXBvbmVudHMsIGJ1dCBSZWFjdCBcIiArIFwiZG9lc24ndCBrbm93IHdoYXQgaXQgd2FzLiBUaGlzIGlzIGxpa2VseSBkdWUgdG8gYnJvd3NlciBcIiArICdmbGFraW5lc3MuIFJlYWN0IGRvZXMgaXRzIGJlc3QgdG8gcHJlc2VydmUgdGhlIFwiUGF1c2Ugb24gJyArICdleGNlcHRpb25zXCIgYmVoYXZpb3Igb2YgdGhlIERldlRvb2xzLCB3aGljaCByZXF1aXJlcyBzb21lICcgKyBcIkRFVi1tb2RlIG9ubHkgdHJpY2tzLiBJdCdzIHBvc3NpYmxlIHRoYXQgdGhlc2UgZG9uJ3Qgd29yayBpbiBcIiArIFwieW91ciBicm93c2VyLiBUcnkgdHJpZ2dlcmluZyB0aGUgZXJyb3IgaW4gcHJvZHVjdGlvbiBtb2RlLCBcIiArIFwib3Igc3dpdGNoaW5nIHRvIGEgbW9kZXJuIGJyb3dzZXIuIElmIHlvdSBzdXNwZWN0IHRoYXQgdGhpcyBpcyBcIiArIFwiYWN0dWFsbHkgYW4gaXNzdWUgd2l0aCBSZWFjdCwgcGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpLCBcbiAgICAgICAgICAgIFJlYWN0RXJyb3JVdGlscy5faGFzQ2F1Z2h0RXJyb3IgPSAhMCwgUmVhY3RFcnJvclV0aWxzLl9jYXVnaHRFcnJvciA9IGVycm9yKSA6IChSZWFjdEVycm9yVXRpbHMuX2hhc0NhdWdodEVycm9yID0gITEsIFxuICAgICAgICAgICAgUmVhY3RFcnJvclV0aWxzLl9jYXVnaHRFcnJvciA9IG51bGwpLCB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIG9uRXJyb3IpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgQ29tcG9uZW50VHJlZSwgcmV0aHJvd0NhdWdodEVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChSZWFjdEVycm9yVXRpbHMuX2hhc1JldGhyb3dFcnJvcikge1xuICAgICAgICAgICAgdmFyIGVycm9yID0gUmVhY3RFcnJvclV0aWxzLl9yZXRocm93RXJyb3I7XG4gICAgICAgICAgICB0aHJvdyBSZWFjdEVycm9yVXRpbHMuX3JldGhyb3dFcnJvciA9IG51bGwsIFJlYWN0RXJyb3JVdGlscy5faGFzUmV0aHJvd0Vycm9yID0gITEsIFxuICAgICAgICAgICAgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9LCBSZWFjdEVycm9yVXRpbHNfMSA9IFJlYWN0RXJyb3JVdGlscywgd2FybmluZyA9IHJlcXVpcmUkJDAsIGluamVjdGlvbiQxID0ge1xuICAgICAgICBpbmplY3RDb21wb25lbnRUcmVlOiBmdW5jdGlvbihJbmplY3RlZCkge1xuICAgICAgICAgICAgQ29tcG9uZW50VHJlZSA9IEluamVjdGVkLCB3YXJuaW5nKEluamVjdGVkICYmIEluamVjdGVkLmdldE5vZGVGcm9tSW5zdGFuY2UgJiYgSW5qZWN0ZWQuZ2V0SW5zdGFuY2VGcm9tTm9kZSwgXCJFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RDb21wb25lbnRUcmVlKC4uLik6IEluamVjdGVkIFwiICsgXCJtb2R1bGUgaXMgbWlzc2luZyBnZXROb2RlRnJvbUluc3RhbmNlIG9yIGdldEluc3RhbmNlRnJvbU5vZGUuXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBpc0VuZGlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIFwidG9wTW91c2VVcFwiID09PSB0b3BMZXZlbFR5cGUgfHwgXCJ0b3BUb3VjaEVuZFwiID09PSB0b3BMZXZlbFR5cGUgfHwgXCJ0b3BUb3VjaENhbmNlbFwiID09PSB0b3BMZXZlbFR5cGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIFwidG9wTW91c2VNb3ZlXCIgPT09IHRvcExldmVsVHlwZSB8fCBcInRvcFRvdWNoTW92ZVwiID09PSB0b3BMZXZlbFR5cGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSB7XG4gICAgICAgIHJldHVybiBcInRvcE1vdXNlRG93blwiID09PSB0b3BMZXZlbFR5cGUgfHwgXCJ0b3BUb3VjaFN0YXJ0XCIgPT09IHRvcExldmVsVHlwZTtcbiAgICB9XG4gICAgdmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzO1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgbGlzdGVuZXJzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSwgbGlzdGVuZXJzTGVuID0gbGlzdGVuZXJzSXNBcnIgPyBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGggOiBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwLCBpbnN0YW5jZXNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJbnN0YW5jZXMpLCBpbnN0YW5jZXNMZW4gPSBpbnN0YW5jZXNJc0FyciA/IGRpc3BhdGNoSW5zdGFuY2VzLmxlbmd0aCA6IGRpc3BhdGNoSW5zdGFuY2VzID8gMSA6IDA7XG4gICAgICAgIHdhcm5pbmcoaW5zdGFuY2VzSXNBcnIgPT09IGxpc3RlbmVyc0lzQXJyICYmIGluc3RhbmNlc0xlbiA9PT0gbGlzdGVuZXJzTGVuLCBcIkV2ZW50UGx1Z2luVXRpbHM6IEludmFsaWQgYGV2ZW50YC5cIik7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgbGlzdGVuZXIsIGluc3QpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBldmVudC50eXBlIHx8IFwidW5rbm93bi1ldmVudFwiO1xuICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gRXZlbnRQbHVnaW5VdGlscy5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpLCBSZWFjdEVycm9yVXRpbHNfMS5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IodHlwZSwgbGlzdGVuZXIsIHZvaWQgMCwgZXZlbnQpLCBcbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCwgc2ltdWxhdGVkKSB7XG4gICAgICAgIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJbnN0YW5jZXMgPSBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXM7XG4gICAgICAgIGlmICh2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCksIEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aCAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTsgaSsrKSBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgZGlzcGF0Y2hMaXN0ZW5lcnNbaV0sIGRpc3BhdGNoSW5zdGFuY2VzW2ldKTsgZWxzZSBkaXNwYXRjaExpc3RlbmVycyAmJiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgZGlzcGF0Y2hMaXN0ZW5lcnMsIGRpc3BhdGNoSW5zdGFuY2VzKTtcbiAgICAgICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbCwgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpIHtcbiAgICAgICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgICAgICAgaWYgKHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KSwgQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOyBpKyspIGlmIChkaXNwYXRjaExpc3RlbmVyc1tpXShldmVudCwgZGlzcGF0Y2hJbnN0YW5jZXNbaV0pKSByZXR1cm4gZGlzcGF0Y2hJbnN0YW5jZXNbaV07XG4gICAgICAgIH0gZWxzZSBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMgJiYgZGlzcGF0Y2hMaXN0ZW5lcnMoZXZlbnQsIGRpc3BhdGNoSW5zdGFuY2VzKSkgcmV0dXJuIGRpc3BhdGNoSW5zdGFuY2VzO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuICAgICAgICB2YXIgcmV0ID0gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpO1xuICAgICAgICByZXR1cm4gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gbnVsbCwgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbCwgcmV0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBleGVjdXRlRGlyZWN0RGlzcGF0Y2goZXZlbnQpIHtcbiAgICAgICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICAgICAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lciA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJbnN0YW5jZSA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgICAgICAgaW52YXJpYW50KCFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpLCBcImV4ZWN1dGVEaXJlY3REaXNwYXRjaCguLi4pOiBJbnZhbGlkIGBldmVudGAuXCIpLCBcbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGRpc3BhdGNoTGlzdGVuZXIgPyBFdmVudFBsdWdpblV0aWxzLmdldE5vZGVGcm9tSW5zdGFuY2UoZGlzcGF0Y2hJbnN0YW5jZSkgOiBudWxsO1xuICAgICAgICB2YXIgcmVzID0gZGlzcGF0Y2hMaXN0ZW5lciA/IGRpc3BhdGNoTGlzdGVuZXIoZXZlbnQpIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsLCBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsLCBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBudWxsLCBcbiAgICAgICAgcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNEaXNwYXRjaGVzKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiAhIWV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICB9XG4gICAgdmFyIEV2ZW50UGx1Z2luVXRpbHMgPSB7XG4gICAgICAgIGlzRW5kaXNoOiBpc0VuZGlzaCxcbiAgICAgICAgaXNNb3ZlaXNoOiBpc01vdmVpc2gsXG4gICAgICAgIGlzU3RhcnRpc2g6IGlzU3RhcnRpc2gsXG4gICAgICAgIGV4ZWN1dGVEaXJlY3REaXNwYXRjaDogZXhlY3V0ZURpcmVjdERpc3BhdGNoLFxuICAgICAgICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXI6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcixcbiAgICAgICAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZTogZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSxcbiAgICAgICAgaGFzRGlzcGF0Y2hlczogaGFzRGlzcGF0Y2hlcyxcbiAgICAgICAgZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudFRyZWUuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZShub2RlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SW5zdGFuY2VGcm9tTm9kZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Tm9kZUZyb21JbnN0YW5jZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShub2RlKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5qZWN0aW9uOiBpbmplY3Rpb24kMVxuICAgIH0sIEV2ZW50UGx1Z2luVXRpbHNfMSA9IEV2ZW50UGx1Z2luVXRpbHMsIGZpYmVySG9zdENvbXBvbmVudCA9IG51bGwsIFJlYWN0Q29udHJvbGxlZENvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgICAgICAgaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDogZnVuY3Rpb24oaG9zdENvbXBvbmVudEltcGwpIHtcbiAgICAgICAgICAgIGZpYmVySG9zdENvbXBvbmVudCA9IGhvc3RDb21wb25lbnRJbXBsO1xuICAgICAgICB9XG4gICAgfSwgcmVzdG9yZVRhcmdldCA9IG51bGwsIHJlc3RvcmVRdWV1ZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gcmVzdG9yZVN0YXRlT2ZUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gRXZlbnRQbHVnaW5VdGlsc18xLmdldEluc3RhbmNlRnJvbU5vZGUodGFyZ2V0KTtcbiAgICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGludmFyaWFudChmaWJlckhvc3RDb21wb25lbnQgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBmaWJlckhvc3RDb21wb25lbnQucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSwgXCJGaWJlciBuZWVkcyB0byBiZSBpbmplY3RlZCB0byBoYW5kbGUgYSBmaWJlciB0YXJnZXQgZm9yIGNvbnRyb2xsZWQgXCIgKyBcImV2ZW50cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIik7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSBFdmVudFBsdWdpblV0aWxzXzEuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZShpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSk7XG4gICAgICAgICAgICBmaWJlckhvc3RDb21wb25lbnQucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSwgaW50ZXJuYWxJbnN0YW5jZS50eXBlLCBwcm9wcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIFJlYWN0Q29udHJvbGxlZENvbXBvbmVudCA9IHtcbiAgICAgICAgaW5qZWN0aW9uOiBSZWFjdENvbnRyb2xsZWRDb21wb25lbnRJbmplY3Rpb24sXG4gICAgICAgIGVucXVldWVTdGF0ZVJlc3RvcmU6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgcmVzdG9yZVRhcmdldCA/IHJlc3RvcmVRdWV1ZSA/IHJlc3RvcmVRdWV1ZS5wdXNoKHRhcmdldCkgOiByZXN0b3JlUXVldWUgPSBbIHRhcmdldCBdIDogcmVzdG9yZVRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzdG9yZVN0YXRlSWZOZWVkZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHJlc3RvcmVUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gcmVzdG9yZVRhcmdldCwgcXVldWVkVGFyZ2V0cyA9IHJlc3RvcmVRdWV1ZTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdG9yZVRhcmdldCA9IG51bGwsIHJlc3RvcmVRdWV1ZSA9IG51bGwsIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KHRhcmdldCksIHF1ZXVlZFRhcmdldHMpIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWVkVGFyZ2V0cy5sZW5ndGg7IGkrKykgcmVzdG9yZVN0YXRlT2ZUYXJnZXQocXVldWVkVGFyZ2V0c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBSZWFjdENvbnRyb2xsZWRDb21wb25lbnRfMSA9IFJlYWN0Q29udHJvbGxlZENvbXBvbmVudCwgZmliZXJCYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uKGZuLCBib29ra2VlcGluZykge1xuICAgICAgICByZXR1cm4gZm4oYm9va2tlZXBpbmcpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoZm4sIGJvb2trZWVwaW5nKSB7XG4gICAgICAgIHJldHVybiBmaWJlckJhdGNoZWRVcGRhdGVzKGZuLCBib29ra2VlcGluZyk7XG4gICAgfVxuICAgIHZhciBpc05lc3RpbmdCYXRjaGVkID0gITE7XG4gICAgZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXNXaXRoQ29udHJvbGxlZENvbXBvbmVudHMoZm4sIGJvb2trZWVwaW5nKSB7XG4gICAgICAgIGlmIChpc05lc3RpbmdCYXRjaGVkKSByZXR1cm4gYmF0Y2hlZFVwZGF0ZXMoZm4sIGJvb2trZWVwaW5nKTtcbiAgICAgICAgaXNOZXN0aW5nQmF0Y2hlZCA9ICEwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGJhdGNoZWRVcGRhdGVzKGZuLCBib29ra2VlcGluZyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpc05lc3RpbmdCYXRjaGVkID0gITEsIFJlYWN0Q29udHJvbGxlZENvbXBvbmVudF8xLnJlc3RvcmVTdGF0ZUlmTmVlZGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIFJlYWN0R2VuZXJpY0JhdGNoaW5nSW5qZWN0aW9uID0ge1xuICAgICAgICBpbmplY3RGaWJlckJhdGNoZWRVcGRhdGVzOiBmdW5jdGlvbihfYmF0Y2hlZFVwZGF0ZXMpIHtcbiAgICAgICAgICAgIGZpYmVyQmF0Y2hlZFVwZGF0ZXMgPSBfYmF0Y2hlZFVwZGF0ZXM7XG4gICAgICAgIH1cbiAgICB9LCBSZWFjdEdlbmVyaWNCYXRjaGluZyA9IHtcbiAgICAgICAgYmF0Y2hlZFVwZGF0ZXM6IGJhdGNoZWRVcGRhdGVzV2l0aENvbnRyb2xsZWRDb21wb25lbnRzLFxuICAgICAgICBpbmplY3Rpb246IFJlYWN0R2VuZXJpY0JhdGNoaW5nSW5qZWN0aW9uXG4gICAgfSwgUmVhY3RHZW5lcmljQmF0Y2hpbmdfMSA9IFJlYWN0R2VuZXJpY0JhdGNoaW5nO1xuICAgIGZ1bmN0aW9uIFJlYWN0TmF0aXZlRmliZXJFcnJvckRpYWxvZyhjYXB0dXJlZEVycm9yKSB7XG4gICAgICAgIHZhciBjb21wb25lbnRTdGFjayA9IGNhcHR1cmVkRXJyb3IuY29tcG9uZW50U3RhY2ssIGVycm9yID0gY2FwdHVyZWRFcnJvci5lcnJvciwgZXJyb3JUb0hhbmRsZSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gZXJyb3IubWVzc2FnZSwgbmFtZSA9IGVycm9yLm5hbWUsIHN1bW1hcnkgPSBtZXNzYWdlID8gbmFtZSArIFwiOiBcIiArIG1lc3NhZ2UgOiBuYW1lO1xuICAgICAgICAgICAgZXJyb3JUb0hhbmRsZSA9IGVycm9yO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlcnJvclRvSGFuZGxlLm1lc3NhZ2UgPSBzdW1tYXJ5ICsgXCJcXG5cXG5UaGlzIGVycm9yIGlzIGxvY2F0ZWQgYXQ6XCIgKyBjb21wb25lbnRTdGFjaztcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH0gZWxzZSBlcnJvclRvSGFuZGxlID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZXJyb3IgPyBuZXcgRXJyb3IoZXJyb3IgKyBcIlxcblxcblRoaXMgZXJyb3IgaXMgbG9jYXRlZCBhdDpcIiArIGNvbXBvbmVudFN0YWNrKSA6IG5ldyBFcnJvcihcIlVuc3BlY2lmaWVkIGVycm9yIGF0OlwiICsgY29tcG9uZW50U3RhY2spO1xuICAgICAgICByZXR1cm4gRXhjZXB0aW9uc01hbmFnZXIuaGFuZGxlRXhjZXB0aW9uKGVycm9yVG9IYW5kbGUsICExKSwgITE7XG4gICAgfVxuICAgIHZhciBzaG93RGlhbG9nJDEgPSBSZWFjdE5hdGl2ZUZpYmVyRXJyb3JEaWFsb2csIFJlYWN0TmF0aXZlRmliZXJFcnJvckRpYWxvZ18xID0ge1xuICAgICAgICBzaG93RGlhbG9nOiBzaG93RGlhbG9nJDFcbiAgICB9LCBSRUFDVF9QT1JUQUxfVFlQRSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5mb3IgJiYgU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSB8fCA2MDEwNiwgY3JlYXRlUG9ydGFsID0gZnVuY3Rpb24oY2hpbGRyZW4sIGNvbnRhaW5lckluZm8sIGltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1szXSA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAkJHR5cGVvZjogUkVBQ1RfUE9SVEFMX1RZUEUsXG4gICAgICAgICAgICBrZXk6IG51bGwgPT0ga2V5ID8gbnVsbCA6IFwiXCIgKyBrZXksXG4gICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgICAgICBjb250YWluZXJJbmZvOiBjb250YWluZXJJbmZvLFxuICAgICAgICAgICAgaW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uXG4gICAgICAgIH07XG4gICAgfSwgaXNQb3J0YWwgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgPT0gdHlwZW9mIG9iamVjdCAmJiBudWxsICE9PSBvYmplY3QgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbiAgICB9LCBSRUFDVF9QT1JUQUxfVFlQRV8xID0gUkVBQ1RfUE9SVEFMX1RZUEUsIFJlYWN0UG9ydGFsID0ge1xuICAgICAgICBjcmVhdGVQb3J0YWw6IGNyZWF0ZVBvcnRhbCxcbiAgICAgICAgaXNQb3J0YWw6IGlzUG9ydGFsLFxuICAgICAgICBSRUFDVF9QT1JUQUxfVFlQRTogUkVBQ1RfUE9SVEFMX1RZUEVfMVxuICAgIH0sIGluc3RhbmNlQ2FjaGUgPSB7fSwgaW5zdGFuY2VQcm9wcyA9IHt9O1xuICAgIGZ1bmN0aW9uIHByZWNhY2hlRmliZXJOb2RlKGhvc3RJbnN0LCB0YWcpIHtcbiAgICAgICAgaW5zdGFuY2VDYWNoZVt0YWddID0gaG9zdEluc3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVuY2FjaGVGaWJlck5vZGUodGFnKSB7XG4gICAgICAgIGRlbGV0ZSBpbnN0YW5jZUNhY2hlW3RhZ10sIGRlbGV0ZSBpbnN0YW5jZVByb3BzW3RhZ107XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbVRhZyh0YWcpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlQ2FjaGVbdGFnXSB8fCBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRUYWdGcm9tSW5zdGFuY2UoaW5zdCkge1xuICAgICAgICB2YXIgdGFnID0gaW5zdC5zdGF0ZU5vZGUuX25hdGl2ZVRhZztcbiAgICAgICAgcmV0dXJuIGludmFyaWFudCh0YWcsIFwiQWxsIG5hdGl2ZSBpbnN0YW5jZXMgc2hvdWxkIGhhdmUgYSB0YWcuXCIpLCB0YWc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoc3RhdGVOb2RlKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZVByb3BzW3N0YXRlTm9kZS5fbmF0aXZlVGFnXSB8fCBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVGaWJlclByb3BzKHRhZywgcHJvcHMpIHtcbiAgICAgICAgaW5zdGFuY2VQcm9wc1t0YWddID0gcHJvcHM7XG4gICAgfVxuICAgIHZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudFRyZWUgPSB7XG4gICAgICAgIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOiBnZXRJbnN0YW5jZUZyb21UYWcsXG4gICAgICAgIGdldEluc3RhbmNlRnJvbU5vZGU6IGdldEluc3RhbmNlRnJvbVRhZyxcbiAgICAgICAgZ2V0Tm9kZUZyb21JbnN0YW5jZTogZ2V0VGFnRnJvbUluc3RhbmNlLFxuICAgICAgICBwcmVjYWNoZUZpYmVyTm9kZTogcHJlY2FjaGVGaWJlck5vZGUsXG4gICAgICAgIHVuY2FjaGVGaWJlck5vZGU6IHVuY2FjaGVGaWJlck5vZGUsXG4gICAgICAgIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUsXG4gICAgICAgIHVwZGF0ZUZpYmVyUHJvcHM6IHVwZGF0ZUZpYmVyUHJvcHNcbiAgICB9LCBSZWFjdE5hdGl2ZUNvbXBvbmVudFRyZWVfMSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50VHJlZSwgY29tbW9uanNHbG9iYWwgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6IHt9LCBSZWFjdEZlYXR1cmVGbGFncyA9IHtcbiAgICAgICAgZW5hYmxlQXN5bmNTdWJ0cmVlQVBJOiAhMFxuICAgIH0sIFJlYWN0RmVhdHVyZUZsYWdzXzEgPSBSZWFjdEZlYXR1cmVGbGFncywgUmVhY3RUeXBlT2ZTaWRlRWZmZWN0ID0ge1xuICAgICAgICBOb0VmZmVjdDogMCxcbiAgICAgICAgUGVyZm9ybWVkV29yazogMSxcbiAgICAgICAgUGxhY2VtZW50OiAyLFxuICAgICAgICBVcGRhdGU6IDQsXG4gICAgICAgIFBsYWNlbWVudEFuZFVwZGF0ZTogNixcbiAgICAgICAgRGVsZXRpb246IDgsXG4gICAgICAgIENvbnRlbnRSZXNldDogMTYsXG4gICAgICAgIENhbGxiYWNrOiAzMixcbiAgICAgICAgRXJyOiA2NCxcbiAgICAgICAgUmVmOiAxMjhcbiAgICB9LCBSZWFjdFByaW9yaXR5TGV2ZWwgPSB7XG4gICAgICAgIE5vV29yazogMCxcbiAgICAgICAgU3luY2hyb25vdXNQcmlvcml0eTogMSxcbiAgICAgICAgVGFza1ByaW9yaXR5OiAyLFxuICAgICAgICBIaWdoUHJpb3JpdHk6IDMsXG4gICAgICAgIExvd1ByaW9yaXR5OiA0LFxuICAgICAgICBPZmZzY3JlZW5Qcmlvcml0eTogNVxuICAgIH0sIFJlYWN0VHlwZU9mV29yayA9IHtcbiAgICAgICAgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDogMCxcbiAgICAgICAgRnVuY3Rpb25hbENvbXBvbmVudDogMSxcbiAgICAgICAgQ2xhc3NDb21wb25lbnQ6IDIsXG4gICAgICAgIEhvc3RSb290OiAzLFxuICAgICAgICBIb3N0UG9ydGFsOiA0LFxuICAgICAgICBIb3N0Q29tcG9uZW50OiA1LFxuICAgICAgICBIb3N0VGV4dDogNixcbiAgICAgICAgQ29yb3V0aW5lQ29tcG9uZW50OiA3LFxuICAgICAgICBDb3JvdXRpbmVIYW5kbGVyUGhhc2U6IDgsXG4gICAgICAgIFlpZWxkQ29tcG9uZW50OiA5LFxuICAgICAgICBGcmFnbWVudDogMTBcbiAgICB9LCBDYWxsYmFja0VmZmVjdCA9IFJlYWN0VHlwZU9mU2lkZUVmZmVjdC5DYWxsYmFjaywgTm9Xb3JrID0gUmVhY3RQcmlvcml0eUxldmVsLk5vV29yaywgU3luY2hyb25vdXNQcmlvcml0eSA9IFJlYWN0UHJpb3JpdHlMZXZlbC5TeW5jaHJvbm91c1ByaW9yaXR5LCBUYXNrUHJpb3JpdHkgPSBSZWFjdFByaW9yaXR5TGV2ZWwuVGFza1ByaW9yaXR5LCBDbGFzc0NvbXBvbmVudCA9IFJlYWN0VHlwZU9mV29yay5DbGFzc0NvbXBvbmVudCwgSG9zdFJvb3QgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFJvb3QsIHdhcm5pbmckMiA9IHJlcXVpcmUkJDAsIF9xdWV1ZTEgPSB2b2lkIDAsIF9xdWV1ZTIgPSB2b2lkIDA7XG4gICAgZnVuY3Rpb24gY29tcGFyZVByaW9yaXR5KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgIT09IFRhc2tQcmlvcml0eSAmJiBhICE9PSBTeW5jaHJvbm91c1ByaW9yaXR5IHx8IGIgIT09IFRhc2tQcmlvcml0eSAmJiBiICE9PSBTeW5jaHJvbm91c1ByaW9yaXR5ID8gYSA9PT0gTm9Xb3JrICYmIGIgIT09IE5vV29yayA/IC0yNTUgOiBhICE9PSBOb1dvcmsgJiYgYiA9PT0gTm9Xb3JrID8gMjU1IDogYSAtIGIgOiAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVVcGRhdGVRdWV1ZSgpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0ge1xuICAgICAgICAgICAgZmlyc3Q6IG51bGwsXG4gICAgICAgICAgICBsYXN0OiBudWxsLFxuICAgICAgICAgICAgaGFzRm9yY2VVcGRhdGU6ICExLFxuICAgICAgICAgICAgY2FsbGJhY2tMaXN0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBxdWV1ZS5pc1Byb2Nlc3NpbmcgPSAhMSwgcXVldWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb25lVXBkYXRlKHVwZGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJpb3JpdHlMZXZlbDogdXBkYXRlLnByaW9yaXR5TGV2ZWwsXG4gICAgICAgICAgICBwYXJ0aWFsU3RhdGU6IHVwZGF0ZS5wYXJ0aWFsU3RhdGUsXG4gICAgICAgICAgICBjYWxsYmFjazogdXBkYXRlLmNhbGxiYWNrLFxuICAgICAgICAgICAgaXNSZXBsYWNlOiB1cGRhdGUuaXNSZXBsYWNlLFxuICAgICAgICAgICAgaXNGb3JjZWQ6IHVwZGF0ZS5pc0ZvcmNlZCxcbiAgICAgICAgICAgIGlzVG9wTGV2ZWxVbm1vdW50OiB1cGRhdGUuaXNUb3BMZXZlbFVubW91bnQsXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluc2VydFVwZGF0ZUludG9RdWV1ZShxdWV1ZSwgdXBkYXRlLCBpbnNlcnRBZnRlciwgaW5zZXJ0QmVmb3JlKSB7XG4gICAgICAgIG51bGwgIT09IGluc2VydEFmdGVyID8gaW5zZXJ0QWZ0ZXIubmV4dCA9IHVwZGF0ZSA6ICh1cGRhdGUubmV4dCA9IHF1ZXVlLmZpcnN0LCBxdWV1ZS5maXJzdCA9IHVwZGF0ZSksIFxuICAgICAgICBudWxsICE9PSBpbnNlcnRCZWZvcmUgPyB1cGRhdGUubmV4dCA9IGluc2VydEJlZm9yZSA6IHF1ZXVlLmxhc3QgPSB1cGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRJbnNlcnRpb25Qb3NpdGlvbihxdWV1ZSwgdXBkYXRlKSB7XG4gICAgICAgIHZhciBwcmlvcml0eUxldmVsID0gdXBkYXRlLnByaW9yaXR5TGV2ZWwsIGluc2VydEFmdGVyID0gbnVsbCwgaW5zZXJ0QmVmb3JlID0gbnVsbDtcbiAgICAgICAgaWYgKG51bGwgIT09IHF1ZXVlLmxhc3QgJiYgY29tcGFyZVByaW9yaXR5KHF1ZXVlLmxhc3QucHJpb3JpdHlMZXZlbCwgcHJpb3JpdHlMZXZlbCkgPD0gMCkgaW5zZXJ0QWZ0ZXIgPSBxdWV1ZS5sYXN0OyBlbHNlIGZvciAoaW5zZXJ0QmVmb3JlID0gcXVldWUuZmlyc3Q7IG51bGwgIT09IGluc2VydEJlZm9yZSAmJiBjb21wYXJlUHJpb3JpdHkoaW5zZXJ0QmVmb3JlLnByaW9yaXR5TGV2ZWwsIHByaW9yaXR5TGV2ZWwpIDw9IDA7ICkgaW5zZXJ0QWZ0ZXIgPSBpbnNlcnRCZWZvcmUsIFxuICAgICAgICBpbnNlcnRCZWZvcmUgPSBpbnNlcnRCZWZvcmUubmV4dDtcbiAgICAgICAgcmV0dXJuIGluc2VydEFmdGVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbnN1cmVVcGRhdGVRdWV1ZXMoZmliZXIpIHtcbiAgICAgICAgdmFyIGFsdGVybmF0ZUZpYmVyID0gZmliZXIuYWx0ZXJuYXRlLCBxdWV1ZTEgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgICAgICAgbnVsbCA9PT0gcXVldWUxICYmIChxdWV1ZTEgPSBmaWJlci51cGRhdGVRdWV1ZSA9IGNyZWF0ZVVwZGF0ZVF1ZXVlKCkpO1xuICAgICAgICB2YXIgcXVldWUyID0gdm9pZCAwO1xuICAgICAgICBudWxsICE9PSBhbHRlcm5hdGVGaWJlciA/IG51bGwgPT09IChxdWV1ZTIgPSBhbHRlcm5hdGVGaWJlci51cGRhdGVRdWV1ZSkgJiYgKHF1ZXVlMiA9IGFsdGVybmF0ZUZpYmVyLnVwZGF0ZVF1ZXVlID0gY3JlYXRlVXBkYXRlUXVldWUoKSkgOiBxdWV1ZTIgPSBudWxsLCBcbiAgICAgICAgX3F1ZXVlMSA9IHF1ZXVlMSwgX3F1ZXVlMiA9IHF1ZXVlMiAhPT0gcXVldWUxID8gcXVldWUyIDogbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5zZXJ0VXBkYXRlKGZpYmVyLCB1cGRhdGUpIHtcbiAgICAgICAgZW5zdXJlVXBkYXRlUXVldWVzKGZpYmVyKTtcbiAgICAgICAgdmFyIHF1ZXVlMSA9IF9xdWV1ZTEsIHF1ZXVlMiA9IF9xdWV1ZTI7XG4gICAgICAgIChxdWV1ZTEuaXNQcm9jZXNzaW5nIHx8IG51bGwgIT09IHF1ZXVlMiAmJiBxdWV1ZTIuaXNQcm9jZXNzaW5nKSAmJiB3YXJuaW5nJDIoITEsIFwiQW4gdXBkYXRlIChzZXRTdGF0ZSwgcmVwbGFjZVN0YXRlLCBvciBmb3JjZVVwZGF0ZSkgd2FzIHNjaGVkdWxlZCBcIiArIFwiZnJvbSBpbnNpZGUgYW4gdXBkYXRlIGZ1bmN0aW9uLiBVcGRhdGUgZnVuY3Rpb25zIHNob3VsZCBiZSBwdXJlLCBcIiArIFwid2l0aCB6ZXJvIHNpZGUtZWZmZWN0cy4gQ29uc2lkZXIgdXNpbmcgY29tcG9uZW50RGlkVXBkYXRlIG9yIGEgXCIgKyBcImNhbGxiYWNrLlwiKTtcbiAgICAgICAgdmFyIGluc2VydEFmdGVyMSA9IGZpbmRJbnNlcnRpb25Qb3NpdGlvbihxdWV1ZTEsIHVwZGF0ZSksIGluc2VydEJlZm9yZTEgPSBudWxsICE9PSBpbnNlcnRBZnRlcjEgPyBpbnNlcnRBZnRlcjEubmV4dCA6IHF1ZXVlMS5maXJzdDtcbiAgICAgICAgaWYgKG51bGwgPT09IHF1ZXVlMikgcmV0dXJuIGluc2VydFVwZGF0ZUludG9RdWV1ZShxdWV1ZTEsIHVwZGF0ZSwgaW5zZXJ0QWZ0ZXIxLCBpbnNlcnRCZWZvcmUxKSwgXG4gICAgICAgIG51bGw7XG4gICAgICAgIHZhciBpbnNlcnRBZnRlcjIgPSBmaW5kSW5zZXJ0aW9uUG9zaXRpb24ocXVldWUyLCB1cGRhdGUpLCBpbnNlcnRCZWZvcmUyID0gbnVsbCAhPT0gaW5zZXJ0QWZ0ZXIyID8gaW5zZXJ0QWZ0ZXIyLm5leHQgOiBxdWV1ZTIuZmlyc3Q7XG4gICAgICAgIGlmIChpbnNlcnRVcGRhdGVJbnRvUXVldWUocXVldWUxLCB1cGRhdGUsIGluc2VydEFmdGVyMSwgaW5zZXJ0QmVmb3JlMSksIGluc2VydEJlZm9yZTEgPT09IGluc2VydEJlZm9yZTIgJiYgbnVsbCAhPT0gaW5zZXJ0QmVmb3JlMSB8fCBpbnNlcnRBZnRlcjEgPT09IGluc2VydEFmdGVyMiAmJiBudWxsICE9PSBpbnNlcnRBZnRlcjEpIHJldHVybiBudWxsID09PSBpbnNlcnRBZnRlcjIgJiYgKHF1ZXVlMi5maXJzdCA9IHVwZGF0ZSksIFxuICAgICAgICBudWxsID09PSBpbnNlcnRCZWZvcmUyICYmIChxdWV1ZTIubGFzdCA9IG51bGwpLCBudWxsO1xuICAgICAgICB2YXIgdXBkYXRlMiA9IGNsb25lVXBkYXRlKHVwZGF0ZSk7XG4gICAgICAgIHJldHVybiBpbnNlcnRVcGRhdGVJbnRvUXVldWUocXVldWUyLCB1cGRhdGUyLCBpbnNlcnRBZnRlcjIsIGluc2VydEJlZm9yZTIpLCB1cGRhdGUyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRVcGRhdGUoZmliZXIsIHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2ssIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgaW5zZXJ0VXBkYXRlKGZpYmVyLCB7XG4gICAgICAgICAgICBwcmlvcml0eUxldmVsOiBwcmlvcml0eUxldmVsLFxuICAgICAgICAgICAgcGFydGlhbFN0YXRlOiBwYXJ0aWFsU3RhdGUsXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICBpc1JlcGxhY2U6ICExLFxuICAgICAgICAgICAgaXNGb3JjZWQ6ICExLFxuICAgICAgICAgICAgaXNUb3BMZXZlbFVubW91bnQ6ICExLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGFkZFVwZGF0ZV8xID0gYWRkVXBkYXRlO1xuICAgIGZ1bmN0aW9uIGFkZFJlcGxhY2VVcGRhdGUoZmliZXIsIHN0YXRlLCBjYWxsYmFjaywgcHJpb3JpdHlMZXZlbCkge1xuICAgICAgICBpbnNlcnRVcGRhdGUoZmliZXIsIHtcbiAgICAgICAgICAgIHByaW9yaXR5TGV2ZWw6IHByaW9yaXR5TGV2ZWwsXG4gICAgICAgICAgICBwYXJ0aWFsU3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgaXNSZXBsYWNlOiAhMCxcbiAgICAgICAgICAgIGlzRm9yY2VkOiAhMSxcbiAgICAgICAgICAgIGlzVG9wTGV2ZWxVbm1vdW50OiAhMSxcbiAgICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBhZGRSZXBsYWNlVXBkYXRlXzEgPSBhZGRSZXBsYWNlVXBkYXRlO1xuICAgIGZ1bmN0aW9uIGFkZEZvcmNlVXBkYXRlKGZpYmVyLCBjYWxsYmFjaywgcHJpb3JpdHlMZXZlbCkge1xuICAgICAgICBpbnNlcnRVcGRhdGUoZmliZXIsIHtcbiAgICAgICAgICAgIHByaW9yaXR5TGV2ZWw6IHByaW9yaXR5TGV2ZWwsXG4gICAgICAgICAgICBwYXJ0aWFsU3RhdGU6IG51bGwsXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICBpc1JlcGxhY2U6ICExLFxuICAgICAgICAgICAgaXNGb3JjZWQ6ICEwLFxuICAgICAgICAgICAgaXNUb3BMZXZlbFVubW91bnQ6ICExLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGFkZEZvcmNlVXBkYXRlXzEgPSBhZGRGb3JjZVVwZGF0ZTtcbiAgICBmdW5jdGlvbiBnZXRVcGRhdGVQcmlvcml0eShmaWJlcikge1xuICAgICAgICB2YXIgdXBkYXRlUXVldWUgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgICAgICAgcmV0dXJuIG51bGwgPT09IHVwZGF0ZVF1ZXVlID8gTm9Xb3JrIDogZmliZXIudGFnICE9PSBDbGFzc0NvbXBvbmVudCAmJiBmaWJlci50YWcgIT09IEhvc3RSb290ID8gTm9Xb3JrIDogbnVsbCAhPT0gdXBkYXRlUXVldWUuZmlyc3QgPyB1cGRhdGVRdWV1ZS5maXJzdC5wcmlvcml0eUxldmVsIDogTm9Xb3JrO1xuICAgIH1cbiAgICB2YXIgZ2V0VXBkYXRlUHJpb3JpdHlfMSA9IGdldFVwZGF0ZVByaW9yaXR5O1xuICAgIGZ1bmN0aW9uIGFkZFRvcExldmVsVXBkYXRlJDEoZmliZXIsIHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2ssIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgdmFyIGlzVG9wTGV2ZWxVbm1vdW50ID0gbnVsbCA9PT0gcGFydGlhbFN0YXRlLmVsZW1lbnQsIHVwZGF0ZSA9IHtcbiAgICAgICAgICAgIHByaW9yaXR5TGV2ZWw6IHByaW9yaXR5TGV2ZWwsXG4gICAgICAgICAgICBwYXJ0aWFsU3RhdGU6IHBhcnRpYWxTdGF0ZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgICAgIGlzUmVwbGFjZTogITEsXG4gICAgICAgICAgICBpc0ZvcmNlZDogITEsXG4gICAgICAgICAgICBpc1RvcExldmVsVW5tb3VudDogaXNUb3BMZXZlbFVubW91bnQsXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH0sIHVwZGF0ZTIgPSBpbnNlcnRVcGRhdGUoZmliZXIsIHVwZGF0ZSk7XG4gICAgICAgIGlmIChpc1RvcExldmVsVW5tb3VudCkge1xuICAgICAgICAgICAgdmFyIHF1ZXVlMSA9IF9xdWV1ZTEsIHF1ZXVlMiA9IF9xdWV1ZTI7XG4gICAgICAgICAgICBudWxsICE9PSBxdWV1ZTEgJiYgbnVsbCAhPT0gdXBkYXRlLm5leHQgJiYgKHVwZGF0ZS5uZXh0ID0gbnVsbCwgcXVldWUxLmxhc3QgPSB1cGRhdGUpLCBcbiAgICAgICAgICAgIG51bGwgIT09IHF1ZXVlMiAmJiBudWxsICE9PSB1cGRhdGUyICYmIG51bGwgIT09IHVwZGF0ZTIubmV4dCAmJiAodXBkYXRlMi5uZXh0ID0gbnVsbCwgXG4gICAgICAgICAgICBxdWV1ZTIubGFzdCA9IHVwZGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGFkZFRvcExldmVsVXBkYXRlXzEgPSBhZGRUb3BMZXZlbFVwZGF0ZSQxO1xuICAgIGZ1bmN0aW9uIGdldFN0YXRlRnJvbVVwZGF0ZSh1cGRhdGUsIGluc3RhbmNlLCBwcmV2U3RhdGUsIHByb3BzKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsU3RhdGUgPSB1cGRhdGUucGFydGlhbFN0YXRlO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBwYXJ0aWFsU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0aWFsU3RhdGUuY2FsbChpbnN0YW5jZSwgcHJldlN0YXRlLCBwcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnRpYWxTdGF0ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmVnaW5VcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcXVldWUsIGluc3RhbmNlLCBwcmV2U3RhdGUsIHByb3BzLCBwcmlvcml0eUxldmVsKSB7XG4gICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIGN1cnJlbnQudXBkYXRlUXVldWUgPT09IHF1ZXVlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgICAgICBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0ge1xuICAgICAgICAgICAgICAgIGZpcnN0OiBjdXJyZW50UXVldWUuZmlyc3QsXG4gICAgICAgICAgICAgICAgbGFzdDogY3VycmVudFF1ZXVlLmxhc3QsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tMaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgIGhhc0ZvcmNlVXBkYXRlOiAhMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZS5pc1Byb2Nlc3NpbmcgPSAhMDtcbiAgICAgICAgZm9yICh2YXIgY2FsbGJhY2tMaXN0ID0gcXVldWUuY2FsbGJhY2tMaXN0LCBoYXNGb3JjZVVwZGF0ZSA9IHF1ZXVlLmhhc0ZvcmNlVXBkYXRlLCBzdGF0ZSA9IHByZXZTdGF0ZSwgZG9udE11dGF0ZVByZXZTdGF0ZSA9ICEwLCB1cGRhdGUgPSBxdWV1ZS5maXJzdDsgbnVsbCAhPT0gdXBkYXRlICYmIGNvbXBhcmVQcmlvcml0eSh1cGRhdGUucHJpb3JpdHlMZXZlbCwgcHJpb3JpdHlMZXZlbCkgPD0gMDsgKSB7XG4gICAgICAgICAgICBxdWV1ZS5maXJzdCA9IHVwZGF0ZS5uZXh0LCBudWxsID09PSBxdWV1ZS5maXJzdCAmJiAocXVldWUubGFzdCA9IG51bGwpO1xuICAgICAgICAgICAgdmFyIF9wYXJ0aWFsU3RhdGUgPSB2b2lkIDA7XG4gICAgICAgICAgICB1cGRhdGUuaXNSZXBsYWNlID8gKHN0YXRlID0gZ2V0U3RhdGVGcm9tVXBkYXRlKHVwZGF0ZSwgaW5zdGFuY2UsIHN0YXRlLCBwcm9wcyksIFxuICAgICAgICAgICAgZG9udE11dGF0ZVByZXZTdGF0ZSA9ICEwKSA6IChfcGFydGlhbFN0YXRlID0gZ2V0U3RhdGVGcm9tVXBkYXRlKHVwZGF0ZSwgaW5zdGFuY2UsIHN0YXRlLCBwcm9wcykpICYmIChzdGF0ZSA9IGRvbnRNdXRhdGVQcmV2U3RhdGUgPyBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgX3BhcnRpYWxTdGF0ZSkgOiBPYmplY3QuYXNzaWduKHN0YXRlLCBfcGFydGlhbFN0YXRlKSwgXG4gICAgICAgICAgICBkb250TXV0YXRlUHJldlN0YXRlID0gITEpLCB1cGRhdGUuaXNGb3JjZWQgJiYgKGhhc0ZvcmNlVXBkYXRlID0gITApLCBudWxsID09PSB1cGRhdGUuY2FsbGJhY2sgfHwgdXBkYXRlLmlzVG9wTGV2ZWxVbm1vdW50ICYmIG51bGwgIT09IHVwZGF0ZS5uZXh0IHx8IChjYWxsYmFja0xpc3QgPSBudWxsICE9PSBjYWxsYmFja0xpc3QgPyBjYWxsYmFja0xpc3QgOiBbXSwgXG4gICAgICAgICAgICBjYWxsYmFja0xpc3QucHVzaCh1cGRhdGUuY2FsbGJhY2spLCB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gQ2FsbGJhY2tFZmZlY3QpLCBcbiAgICAgICAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdWV1ZS5jYWxsYmFja0xpc3QgPSBjYWxsYmFja0xpc3QsIHF1ZXVlLmhhc0ZvcmNlVXBkYXRlID0gaGFzRm9yY2VVcGRhdGUsIFxuICAgICAgICBudWxsICE9PSBxdWV1ZS5maXJzdCB8fCBudWxsICE9PSBjYWxsYmFja0xpc3QgfHwgaGFzRm9yY2VVcGRhdGUgfHwgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbCksIFxuICAgICAgICBxdWV1ZS5pc1Byb2Nlc3NpbmcgPSAhMSwgc3RhdGU7XG4gICAgfVxuICAgIHZhciBiZWdpblVwZGF0ZVF1ZXVlXzEgPSBiZWdpblVwZGF0ZVF1ZXVlO1xuICAgIGZ1bmN0aW9uIGNvbW1pdENhbGxiYWNrcyhmaW5pc2hlZFdvcmssIHF1ZXVlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjYWxsYmFja0xpc3QgPSBxdWV1ZS5jYWxsYmFja0xpc3Q7XG4gICAgICAgIGlmIChudWxsICE9PSBjYWxsYmFja0xpc3QpIHtcbiAgICAgICAgICAgIHF1ZXVlLmNhbGxiYWNrTGlzdCA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBfY2FsbGJhY2sgPSBjYWxsYmFja0xpc3RbaV07XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgX2NhbGxiYWNrLCBcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIGFzIGNhbGxiYWNrLiBFeHBlY3RlZCBhIGZ1bmN0aW9uLiBJbnN0ZWFkIFwiICsgXCJyZWNlaXZlZDogJXNcIiwgX2NhbGxiYWNrKSwgXG4gICAgICAgICAgICAgICAgX2NhbGxiYWNrLmNhbGwoY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNvbW1pdENhbGxiYWNrc18xID0gY29tbWl0Q2FsbGJhY2tzLCBSZWFjdEZpYmVyVXBkYXRlUXVldWUgPSB7XG4gICAgICAgIGFkZFVwZGF0ZTogYWRkVXBkYXRlXzEsXG4gICAgICAgIGFkZFJlcGxhY2VVcGRhdGU6IGFkZFJlcGxhY2VVcGRhdGVfMSxcbiAgICAgICAgYWRkRm9yY2VVcGRhdGU6IGFkZEZvcmNlVXBkYXRlXzEsXG4gICAgICAgIGdldFVwZGF0ZVByaW9yaXR5OiBnZXRVcGRhdGVQcmlvcml0eV8xLFxuICAgICAgICBhZGRUb3BMZXZlbFVwZGF0ZTogYWRkVG9wTGV2ZWxVcGRhdGVfMSxcbiAgICAgICAgYmVnaW5VcGRhdGVRdWV1ZTogYmVnaW5VcGRhdGVRdWV1ZV8xLFxuICAgICAgICBjb21taXRDYWxsYmFja3M6IGNvbW1pdENhbGxiYWNrc18xXG4gICAgfTtcbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnROYW1lJDEoZmliZXIpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdHlwZSA/IHR5cGUgOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHR5cGUgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSA6IG51bGw7XG4gICAgfVxuICAgIHZhciBnZXRDb21wb25lbnROYW1lXzEgPSBnZXRDb21wb25lbnROYW1lJDEsIFJlYWN0SW5zdGFuY2VNYXAgPSB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBrZXkuX3JlYWN0SW50ZXJuYWxGaWJlciA9IHZvaWQgMDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxGaWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IGtleS5fcmVhY3RJbnRlcm5hbEZpYmVyO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGtleS5fcmVhY3RJbnRlcm5hbEZpYmVyID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LCBSZWFjdEluc3RhbmNlTWFwXzEgPSBSZWFjdEluc3RhbmNlTWFwLCBSZWFjdEludGVybmFscyA9IHJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELCBSZWFjdEdsb2JhbFNoYXJlZFN0YXRlID0ge1xuICAgICAgICBSZWFjdEN1cnJlbnRPd25lcjogUmVhY3RJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXJcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24oUmVhY3RHbG9iYWxTaGFyZWRTdGF0ZSwge1xuICAgICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lOiBSZWFjdEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lXG4gICAgfSk7XG4gICAgdmFyIFJlYWN0R2xvYmFsU2hhcmVkU3RhdGVfMSA9IFJlYWN0R2xvYmFsU2hhcmVkU3RhdGUsIFJlYWN0Q3VycmVudE93bmVyID0gUmVhY3RHbG9iYWxTaGFyZWRTdGF0ZV8xLlJlYWN0Q3VycmVudE93bmVyLCB3YXJuaW5nJDQgPSByZXF1aXJlJCQwLCBDbGFzc0NvbXBvbmVudCQyID0gUmVhY3RUeXBlT2ZXb3JrLkNsYXNzQ29tcG9uZW50LCBIb3N0Q29tcG9uZW50JDEgPSBSZWFjdFR5cGVPZldvcmsuSG9zdENvbXBvbmVudCwgSG9zdFJvb3QkMiA9IFJlYWN0VHlwZU9mV29yay5Ib3N0Um9vdCwgSG9zdFBvcnRhbCA9IFJlYWN0VHlwZU9mV29yay5Ib3N0UG9ydGFsLCBIb3N0VGV4dCA9IFJlYWN0VHlwZU9mV29yay5Ib3N0VGV4dCwgTm9FZmZlY3QgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuTm9FZmZlY3QsIFBsYWNlbWVudCA9IFJlYWN0VHlwZU9mU2lkZUVmZmVjdC5QbGFjZW1lbnQsIE1PVU5USU5HID0gMSwgTU9VTlRFRCA9IDIsIFVOTU9VTlRFRCA9IDM7XG4gICAgZnVuY3Rpb24gaXNGaWJlck1vdW50ZWRJbXBsKGZpYmVyKSB7XG4gICAgICAgIHZhciBub2RlID0gZmliZXI7XG4gICAgICAgIGlmIChmaWJlci5hbHRlcm5hdGUpIGZvciAoO25vZGUucmV0dXJuOyApIG5vZGUgPSBub2RlLnJldHVybjsgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKG5vZGUuZWZmZWN0VGFnICYgUGxhY2VtZW50KSAhPT0gTm9FZmZlY3QpIHJldHVybiBNT1VOVElORztcbiAgICAgICAgICAgIGZvciAoO25vZGUucmV0dXJuOyApIGlmIChub2RlID0gbm9kZS5yZXR1cm4sIChub2RlLmVmZmVjdFRhZyAmIFBsYWNlbWVudCkgIT09IE5vRWZmZWN0KSByZXR1cm4gTU9VTlRJTkc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGUudGFnID09PSBIb3N0Um9vdCQyID8gTU9VTlRFRCA6IFVOTU9VTlRFRDtcbiAgICB9XG4gICAgdmFyIGlzRmliZXJNb3VudGVkJDEgPSBmdW5jdGlvbihmaWJlcikge1xuICAgICAgICByZXR1cm4gaXNGaWJlck1vdW50ZWRJbXBsKGZpYmVyKSA9PT0gTU9VTlRFRDtcbiAgICB9LCBpc01vdW50ZWQgPSBmdW5jdGlvbihjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgICAgaWYgKG51bGwgIT09IG93bmVyICYmIG93bmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQkMikge1xuICAgICAgICAgICAgdmFyIG93bmVyRmliZXIgPSBvd25lciwgaW5zdGFuY2UgPSBvd25lckZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIHdhcm5pbmckNChpbnN0YW5jZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsIFwiJXMgaXMgYWNjZXNzaW5nIGlzTW91bnRlZCBpbnNpZGUgaXRzIHJlbmRlcigpIGZ1bmN0aW9uLiBcIiArIFwicmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCBcIiArIFwibmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgXCIgKyBcInJlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kIFwiICsgXCJjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC5cIiwgZ2V0Q29tcG9uZW50TmFtZV8xKG93bmVyRmliZXIpIHx8IFwiQSBjb21wb25lbnRcIiksIFxuICAgICAgICAgICAgaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gITA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZpYmVyID0gUmVhY3RJbnN0YW5jZU1hcF8xLmdldChjb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gISFmaWJlciAmJiBpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpID09PSBNT1VOVEVEO1xuICAgIH07XG4gICAgZnVuY3Rpb24gYXNzZXJ0SXNNb3VudGVkKGZpYmVyKSB7XG4gICAgICAgIGludmFyaWFudChpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpID09PSBNT1VOVEVELCBcIlVuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC5cIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKGZpYmVyKSB7XG4gICAgICAgIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgICAgIGlmICghYWx0ZXJuYXRlKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGludmFyaWFudChzdGF0ZSAhPT0gVU5NT1VOVEVELCBcIlVuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC5cIiksIFxuICAgICAgICAgICAgc3RhdGUgPT09IE1PVU5USU5HID8gbnVsbCA6IGZpYmVyO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGEgPSBmaWJlciwgYiA9IGFsdGVybmF0ZTsgITA7ICkge1xuICAgICAgICAgICAgdmFyIHBhcmVudEEgPSBhLnJldHVybiwgcGFyZW50QiA9IHBhcmVudEEgPyBwYXJlbnRBLmFsdGVybmF0ZSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoIXBhcmVudEEgfHwgIXBhcmVudEIpIGJyZWFrO1xuICAgICAgICAgICAgaWYgKHBhcmVudEEuY2hpbGQgPT09IHBhcmVudEIuY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjaGlsZCA9IHBhcmVudEEuY2hpbGQ7IGNoaWxkOyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkID09PSBhKSByZXR1cm4gYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpLCBmaWJlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkID09PSBiKSByZXR1cm4gYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpLCBhbHRlcm5hdGU7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KCExLCBcIlVuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYS5yZXR1cm4gIT09IGIucmV0dXJuKSBhID0gcGFyZW50QSwgYiA9IHBhcmVudEI7IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGRpZEZpbmRDaGlsZCA9ICExLCBfY2hpbGQgPSBwYXJlbnRBLmNoaWxkOyBfY2hpbGQ7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2NoaWxkID09PSBhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMCwgYSA9IHBhcmVudEEsIGIgPSBwYXJlbnRCO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF9jaGlsZCA9PT0gYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlkRmluZENoaWxkID0gITAsIGIgPSBwYXJlbnRBLCBhID0gcGFyZW50QjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9jaGlsZCA9IF9jaGlsZC5zaWJsaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRpZEZpbmRDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKF9jaGlsZCA9IHBhcmVudEIuY2hpbGQ7IF9jaGlsZDsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2NoaWxkID09PSBhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlkRmluZENoaWxkID0gITAsIGEgPSBwYXJlbnRCLCBiID0gcGFyZW50QTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfY2hpbGQgPT09IGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMCwgYiA9IHBhcmVudEIsIGEgPSBwYXJlbnRBO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2NoaWxkID0gX2NoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW52YXJpYW50KGRpZEZpbmRDaGlsZCwgXCJDaGlsZCB3YXMgbm90IGZvdW5kIGluIGVpdGhlciBwYXJlbnQgc2V0LiBUaGlzIGluZGljYXRlcyBhIGJ1ZyBcIiArIFwiaW4gUmVhY3QgcmVsYXRlZCB0byB0aGUgcmV0dXJuIHBvaW50ZXIuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnZhcmlhbnQoYS5hbHRlcm5hdGUgPT09IGIsIFwiUmV0dXJuIGZpYmVycyBzaG91bGQgYWx3YXlzIGJlIGVhY2ggb3RoZXJzJyBhbHRlcm5hdGVzLiBcIiArIFwiVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludmFyaWFudChhLnRhZyA9PT0gSG9zdFJvb3QkMiwgXCJVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuXCIpLCBcbiAgICAgICAgYS5zdGF0ZU5vZGUuY3VycmVudCA9PT0gYSA/IGZpYmVyIDogYWx0ZXJuYXRlO1xuICAgIH1cbiAgICB2YXIgZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGhfMSA9IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoLCBmaW5kQ3VycmVudEhvc3RGaWJlciQxID0gZnVuY3Rpb24ocGFyZW50KSB7XG4gICAgICAgIHZhciBjdXJyZW50UGFyZW50ID0gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgocGFyZW50KTtcbiAgICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSByZXR1cm4gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgbm9kZSA9IGN1cnJlbnRQYXJlbnQ7ICEwOyApIHtcbiAgICAgICAgICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCQxIHx8IG5vZGUudGFnID09PSBIb3N0VGV4dCkgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZCkgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlLCBub2RlID0gbm9kZS5jaGlsZDsgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IGN1cnJlbnRQYXJlbnQpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIGZvciAoOyFub2RlLnNpYmxpbmc7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSBjdXJyZW50UGFyZW50KSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm4sIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzJDEgPSBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRQYXJlbnQgPSBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChwYXJlbnQpO1xuICAgICAgICBpZiAoIWN1cnJlbnRQYXJlbnQpIHJldHVybiBudWxsO1xuICAgICAgICBmb3IgKHZhciBub2RlID0gY3VycmVudFBhcmVudDsgITA7ICkge1xuICAgICAgICAgICAgaWYgKG5vZGUudGFnID09PSBIb3N0Q29tcG9uZW50JDEgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIGlmIChub2RlLmNoaWxkICYmIG5vZGUudGFnICE9PSBIb3N0UG9ydGFsKSBub2RlLmNoaWxkLnJldHVybiA9IG5vZGUsIG5vZGUgPSBub2RlLmNoaWxkOyBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gY3VycmVudFBhcmVudCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgZm9yICg7IW5vZGUuc2libGluZzsgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGN1cnJlbnRQYXJlbnQpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybiwgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCBSZWFjdEZpYmVyVHJlZVJlZmxlY3Rpb24gPSB7XG4gICAgICAgIGlzRmliZXJNb3VudGVkOiBpc0ZpYmVyTW91bnRlZCQxLFxuICAgICAgICBpc01vdW50ZWQ6IGlzTW91bnRlZCxcbiAgICAgICAgZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGg6IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoXzEsXG4gICAgICAgIGZpbmRDdXJyZW50SG9zdEZpYmVyOiBmaW5kQ3VycmVudEhvc3RGaWJlciQxLFxuICAgICAgICBmaW5kQ3VycmVudEhvc3RGaWJlcldpdGhOb1BvcnRhbHM6IGZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFscyQxXG4gICAgfSwgd2FybmluZyQ1ID0gcmVxdWlyZSQkMCwgdmFsdWVTdGFjayA9IFtdLCBmaWJlclN0YWNrID0gW10sIGluZGV4ID0gLTEsIGNyZWF0ZUN1cnNvciQxID0gZnVuY3Rpb24oZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJyZW50OiBkZWZhdWx0VmFsdWVcbiAgICAgICAgfTtcbiAgICB9LCBpc0VtcHR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAtMSA9PT0gaW5kZXg7XG4gICAgfSwgcG9wJDEgPSBmdW5jdGlvbihjdXJzb3IsIGZpYmVyKSB7XG4gICAgICAgIGlmIChpbmRleCA8IDApIHJldHVybiB2b2lkIHdhcm5pbmckNSghMSwgXCJVbmV4cGVjdGVkIHBvcC5cIik7XG4gICAgICAgIGZpYmVyICE9PSBmaWJlclN0YWNrW2luZGV4XSAmJiB3YXJuaW5nJDUoITEsIFwiVW5leHBlY3RlZCBGaWJlciBwb3BwZWQuXCIpLCBjdXJzb3IuY3VycmVudCA9IHZhbHVlU3RhY2tbaW5kZXhdLCBcbiAgICAgICAgdmFsdWVTdGFja1tpbmRleF0gPSBudWxsLCBmaWJlclN0YWNrW2luZGV4XSA9IG51bGwsIGluZGV4LS07XG4gICAgfSwgcHVzaCQxID0gZnVuY3Rpb24oY3Vyc29yLCB2YWx1ZSwgZmliZXIpIHtcbiAgICAgICAgaW5kZXgrKywgdmFsdWVTdGFja1tpbmRleF0gPSBjdXJzb3IuY3VycmVudCwgZmliZXJTdGFja1tpbmRleF0gPSBmaWJlciwgY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9LCByZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKDtpbmRleCA+IC0xOyApIHZhbHVlU3RhY2tbaW5kZXhdID0gbnVsbCwgZmliZXJTdGFja1tpbmRleF0gPSBudWxsLCBpbmRleC0tO1xuICAgIH0sIFJlYWN0RmliZXJTdGFjayA9IHtcbiAgICAgICAgY3JlYXRlQ3Vyc29yOiBjcmVhdGVDdXJzb3IkMSxcbiAgICAgICAgaXNFbXB0eTogaXNFbXB0eSxcbiAgICAgICAgcG9wOiBwb3AkMSxcbiAgICAgICAgcHVzaDogcHVzaCQxLFxuICAgICAgICByZXNldDogcmVzZXRcbiAgICB9LCBkZXNjcmliZUNvbXBvbmVudEZyYW1lID0gZnVuY3Rpb24obmFtZSwgc291cmNlLCBvd25lck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiXFxuICAgIGluIFwiICsgKG5hbWUgfHwgXCJVbmtub3duXCIpICsgKHNvdXJjZSA/IFwiIChhdCBcIiArIHNvdXJjZS5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLCBcIlwiKSArIFwiOlwiICsgc291cmNlLmxpbmVOdW1iZXIgKyBcIilcIiA6IG93bmVyTmFtZSA/IFwiIChjcmVhdGVkIGJ5IFwiICsgb3duZXJOYW1lICsgXCIpXCIgOiBcIlwiKTtcbiAgICB9LCBJbmRldGVybWluYXRlQ29tcG9uZW50ID0gUmVhY3RUeXBlT2ZXb3JrLkluZGV0ZXJtaW5hdGVDb21wb25lbnQsIEZ1bmN0aW9uYWxDb21wb25lbnQgPSBSZWFjdFR5cGVPZldvcmsuRnVuY3Rpb25hbENvbXBvbmVudCwgQ2xhc3NDb21wb25lbnQkMyA9IFJlYWN0VHlwZU9mV29yay5DbGFzc0NvbXBvbmVudCwgSG9zdENvbXBvbmVudCQyID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RDb21wb25lbnQ7XG4gICAgZnVuY3Rpb24gZGVzY3JpYmVGaWJlcihmaWJlcikge1xuICAgICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICAgIGNhc2UgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDpcbiAgICAgICAgICBjYXNlIEZ1bmN0aW9uYWxDb21wb25lbnQ6XG4gICAgICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudCQzOlxuICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudCQyOlxuICAgICAgICAgICAgdmFyIG93bmVyID0gZmliZXIuX2RlYnVnT3duZXIsIHNvdXJjZSA9IGZpYmVyLl9kZWJ1Z1NvdXJjZSwgbmFtZSA9IGdldENvbXBvbmVudE5hbWVfMShmaWJlciksIG93bmVyTmFtZSA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gb3duZXIgJiYgKG93bmVyTmFtZSA9IGdldENvbXBvbmVudE5hbWVfMShvd25lcikpLCBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIHNvdXJjZSwgb3duZXJOYW1lKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyJDEod29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgdmFyIGluZm8gPSBcIlwiLCBub2RlID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGluZm8gKz0gZGVzY3JpYmVGaWJlcihub2RlKSwgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgICAgICB9IHdoaWxlIChub2RlKTtcbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuICAgIHZhciBSZWFjdEZpYmVyQ29tcG9uZW50VHJlZUhvb2sgPSB7XG4gICAgICAgIGdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXI6IGdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXIkMVxuICAgIH0sIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdEdsb2JhbFNoYXJlZFN0YXRlXzEuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSwgZ2V0Q29tcG9uZW50TmFtZSQzID0gZ2V0Q29tcG9uZW50TmFtZV8xLCBfcmVxdWlyZTIkMSA9IFJlYWN0RmliZXJDb21wb25lbnRUcmVlSG9vaywgZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlciA9IF9yZXF1aXJlMiQxLmdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXI7XG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lKCkge1xuICAgICAgICB2YXIgZmliZXIgPSBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDIuY3VycmVudDtcbiAgICAgICAgaWYgKG51bGwgPT09IGZpYmVyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIG93bmVyID0gZmliZXIuX2RlYnVnT3duZXI7XG4gICAgICAgIHJldHVybiBudWxsICE9PSBvd25lciAmJiB2b2lkIDAgIT09IG93bmVyID8gZ2V0Q29tcG9uZW50TmFtZSQzKG93bmVyKSA6IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0oKSB7XG4gICAgICAgIHZhciBmaWJlciA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIkMi5jdXJyZW50O1xuICAgICAgICByZXR1cm4gbnVsbCA9PT0gZmliZXIgPyBudWxsIDogZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcihmaWJlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2V0Q3VycmVudEZpYmVyKCkge1xuICAgICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldEN1cnJlbnRTdGFjayA9IG51bGwsIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMi5jdXJyZW50ID0gbnVsbCwgXG4gICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMi5waGFzZSA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldEN1cnJlbnRGaWJlcihmaWJlcikge1xuICAgICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldEN1cnJlbnRTdGFjayA9IGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0sIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMi5jdXJyZW50ID0gZmliZXIsIFxuICAgICAgICBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDIucGhhc2UgPSBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRDdXJyZW50UGhhc2UocGhhc2UpIHtcbiAgICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQyLnBoYXNlID0gcGhhc2U7XG4gICAgfVxuICAgIHZhciBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDIgPSB7XG4gICAgICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgICAgIHBoYXNlOiBudWxsLFxuICAgICAgICByZXNldEN1cnJlbnRGaWJlcjogcmVzZXRDdXJyZW50RmliZXIsXG4gICAgICAgIHNldEN1cnJlbnRGaWJlcjogc2V0Q3VycmVudEZpYmVyLFxuICAgICAgICBzZXRDdXJyZW50UGhhc2U6IHNldEN1cnJlbnRQaGFzZSxcbiAgICAgICAgZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lOiBnZXRDdXJyZW50RmliZXJPd25lck5hbWUsXG4gICAgICAgIGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW06IGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW1cbiAgICB9LCBSZWFjdERlYnVnQ3VycmVudEZpYmVyXzEgPSBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDIsIFJlYWN0RGVidWdGaWJlclBlcmYgPSBudWxsLCBfcmVxdWlyZSQyID0gUmVhY3RUeXBlT2ZXb3JrLCBIb3N0Um9vdCQzID0gX3JlcXVpcmUkMi5Ib3N0Um9vdCwgSG9zdENvbXBvbmVudCQzID0gX3JlcXVpcmUkMi5Ib3N0Q29tcG9uZW50LCBIb3N0VGV4dCQxID0gX3JlcXVpcmUkMi5Ib3N0VGV4dCwgSG9zdFBvcnRhbCQxID0gX3JlcXVpcmUkMi5Ib3N0UG9ydGFsLCBZaWVsZENvbXBvbmVudCA9IF9yZXF1aXJlJDIuWWllbGRDb21wb25lbnQsIEZyYWdtZW50ID0gX3JlcXVpcmUkMi5GcmFnbWVudCwgZ2V0Q29tcG9uZW50TmFtZSQ0ID0gZ2V0Q29tcG9uZW50TmFtZV8xLCByZWFjdEVtb2ppID0gXCLimptcIiwgd2FybmluZ0Vtb2ppID0gXCLim5RcIiwgc3VwcG9ydHNVc2VyVGltaW5nID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgcGVyZm9ybWFuY2UgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBwZXJmb3JtYW5jZS5tYXJrICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHBlcmZvcm1hbmNlLm1lYXN1cmUgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzLCBjdXJyZW50RmliZXIgPSBudWxsLCBjdXJyZW50UGhhc2UgPSBudWxsLCBjdXJyZW50UGhhc2VGaWJlciA9IG51bGwsIGlzQ29tbWl0dGluZyA9ICExLCBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQgPSAhMSwgaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50UGhhc2UgPSAhMSwgY29tbWl0Q291bnRJbkN1cnJlbnRXb3JrTG9vcCA9IDAsIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMCwgbGFiZWxzSW5DdXJyZW50Q29tbWl0ID0gbmV3IFNldCgpLCBmb3JtYXRNYXJrTmFtZSA9IGZ1bmN0aW9uKG1hcmtOYW1lKSB7XG4gICAgICAgIHJldHVybiByZWFjdEVtb2ppICsgXCIgXCIgKyBtYXJrTmFtZTtcbiAgICB9LCBmb3JtYXRMYWJlbCA9IGZ1bmN0aW9uKGxhYmVsLCB3YXJuaW5nKSB7XG4gICAgICAgIHJldHVybiAod2FybmluZyA/IHdhcm5pbmdFbW9qaSArIFwiIFwiIDogcmVhY3RFbW9qaSArIFwiIFwiKSArIGxhYmVsICsgKHdhcm5pbmcgPyBcIiBXYXJuaW5nOiBcIiArIHdhcm5pbmcgOiBcIlwiKTtcbiAgICB9LCBiZWdpbk1hcmsgPSBmdW5jdGlvbihtYXJrTmFtZSkge1xuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKGZvcm1hdE1hcmtOYW1lKG1hcmtOYW1lKSk7XG4gICAgfSwgY2xlYXJNYXJrID0gZnVuY3Rpb24obWFya05hbWUpIHtcbiAgICAgICAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhmb3JtYXRNYXJrTmFtZShtYXJrTmFtZSkpO1xuICAgIH0sIGVuZE1hcmsgPSBmdW5jdGlvbihsYWJlbCwgbWFya05hbWUsIHdhcm5pbmcpIHtcbiAgICAgICAgdmFyIGZvcm1hdHRlZE1hcmtOYW1lID0gZm9ybWF0TWFya05hbWUobWFya05hbWUpLCBmb3JtYXR0ZWRMYWJlbCA9IGZvcm1hdExhYmVsKGxhYmVsLCB3YXJuaW5nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoZm9ybWF0dGVkTGFiZWwsIGZvcm1hdHRlZE1hcmtOYW1lKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICBwZXJmb3JtYW5jZS5jbGVhck1hcmtzKGZvcm1hdHRlZE1hcmtOYW1lKSwgcGVyZm9ybWFuY2UuY2xlYXJNZWFzdXJlcyhmb3JtYXR0ZWRMYWJlbCk7XG4gICAgfSwgZ2V0RmliZXJNYXJrTmFtZSA9IGZ1bmN0aW9uKGxhYmVsLCBkZWJ1Z0lEKSB7XG4gICAgICAgIHJldHVybiBsYWJlbCArIFwiICgjXCIgKyBkZWJ1Z0lEICsgXCIpXCI7XG4gICAgfSwgZ2V0RmliZXJMYWJlbCA9IGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUsIGlzTW91bnRlZCwgcGhhc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGwgPT09IHBoYXNlID8gY29tcG9uZW50TmFtZSArIFwiIFtcIiArIChpc01vdW50ZWQgPyBcInVwZGF0ZVwiIDogXCJtb3VudFwiKSArIFwiXVwiIDogY29tcG9uZW50TmFtZSArIFwiLlwiICsgcGhhc2U7XG4gICAgfSwgYmVnaW5GaWJlck1hcmsgPSBmdW5jdGlvbihmaWJlciwgcGhhc2UpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lJDQoZmliZXIpIHx8IFwiVW5rbm93blwiLCBkZWJ1Z0lEID0gZmliZXIuX2RlYnVnSUQsIGlzTW91bnRlZCA9IG51bGwgIT09IGZpYmVyLmFsdGVybmF0ZSwgbGFiZWwgPSBnZXRGaWJlckxhYmVsKGNvbXBvbmVudE5hbWUsIGlzTW91bnRlZCwgcGhhc2UpO1xuICAgICAgICBpZiAoaXNDb21taXR0aW5nICYmIGxhYmVsc0luQ3VycmVudENvbW1pdC5oYXMobGFiZWwpKSByZXR1cm4gITE7XG4gICAgICAgIGxhYmVsc0luQ3VycmVudENvbW1pdC5hZGQobGFiZWwpO1xuICAgICAgICB2YXIgbWFya05hbWUgPSBnZXRGaWJlck1hcmtOYW1lKGxhYmVsLCBkZWJ1Z0lEKTtcbiAgICAgICAgcmV0dXJuIGJlZ2luTWFyayhtYXJrTmFtZSksICEwO1xuICAgIH0sIGNsZWFyRmliZXJNYXJrID0gZnVuY3Rpb24oZmliZXIsIHBoYXNlKSB7XG4gICAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZSQ0KGZpYmVyKSB8fCBcIlVua25vd25cIiwgZGVidWdJRCA9IGZpYmVyLl9kZWJ1Z0lELCBpc01vdW50ZWQgPSBudWxsICE9PSBmaWJlci5hbHRlcm5hdGUsIGxhYmVsID0gZ2V0RmliZXJMYWJlbChjb21wb25lbnROYW1lLCBpc01vdW50ZWQsIHBoYXNlKSwgbWFya05hbWUgPSBnZXRGaWJlck1hcmtOYW1lKGxhYmVsLCBkZWJ1Z0lEKTtcbiAgICAgICAgY2xlYXJNYXJrKG1hcmtOYW1lKTtcbiAgICB9LCBlbmRGaWJlck1hcmsgPSBmdW5jdGlvbihmaWJlciwgcGhhc2UsIHdhcm5pbmcpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lJDQoZmliZXIpIHx8IFwiVW5rbm93blwiLCBkZWJ1Z0lEID0gZmliZXIuX2RlYnVnSUQsIGlzTW91bnRlZCA9IG51bGwgIT09IGZpYmVyLmFsdGVybmF0ZSwgbGFiZWwgPSBnZXRGaWJlckxhYmVsKGNvbXBvbmVudE5hbWUsIGlzTW91bnRlZCwgcGhhc2UpLCBtYXJrTmFtZSA9IGdldEZpYmVyTWFya05hbWUobGFiZWwsIGRlYnVnSUQpO1xuICAgICAgICBlbmRNYXJrKGxhYmVsLCBtYXJrTmFtZSwgd2FybmluZyk7XG4gICAgfSwgc2hvdWxkSWdub3JlRmliZXIgPSBmdW5jdGlvbihmaWJlcikge1xuICAgICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICAgIGNhc2UgSG9zdFJvb3QkMzpcbiAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQkMzpcbiAgICAgICAgICBjYXNlIEhvc3RUZXh0JDE6XG4gICAgICAgICAgY2FzZSBIb3N0UG9ydGFsJDE6XG4gICAgICAgICAgY2FzZSBZaWVsZENvbXBvbmVudDpcbiAgICAgICAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgICAgICAgcmV0dXJuICEwO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgIH0sIGNsZWFyUGVuZGluZ1BoYXNlTWVhc3VyZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudFBoYXNlICYmIG51bGwgIT09IGN1cnJlbnRQaGFzZUZpYmVyICYmIGNsZWFyRmliZXJNYXJrKGN1cnJlbnRQaGFzZUZpYmVyLCBjdXJyZW50UGhhc2UpLCBcbiAgICAgICAgY3VycmVudFBoYXNlRmliZXIgPSBudWxsLCBjdXJyZW50UGhhc2UgPSBudWxsLCBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSA9ICExO1xuICAgIH0sIHBhdXNlVGltZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGZpYmVyID0gY3VycmVudEZpYmVyOyBmaWJlcjsgKSBmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZyAmJiBlbmRGaWJlck1hcmsoZmliZXIsIG51bGwsIG51bGwpLCBcbiAgICAgICAgZmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgfSwgcmVzdW1lVGltZXJzUmVjdXJzaXZlbHkgPSBmdW5jdGlvbihmaWJlcikge1xuICAgICAgICBudWxsICE9PSBmaWJlci5yZXR1cm4gJiYgcmVzdW1lVGltZXJzUmVjdXJzaXZlbHkoZmliZXIucmV0dXJuKSwgZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgJiYgYmVnaW5GaWJlck1hcmsoZmliZXIsIG51bGwpO1xuICAgIH0sIHJlc3VtZVRpbWVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBudWxsICE9PSBjdXJyZW50RmliZXIgJiYgcmVzdW1lVGltZXJzUmVjdXJzaXZlbHkoY3VycmVudEZpYmVyKTtcbiAgICB9O1xuICAgIFJlYWN0RGVidWdGaWJlclBlcmYgPSB7XG4gICAgICAgIHJlY29yZEVmZmVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCsrO1xuICAgICAgICB9LFxuICAgICAgICByZWNvcmRTY2hlZHVsZVVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpc0NvbW1pdHRpbmcgJiYgKGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudENvbW1pdCA9ICEwKSwgbnVsbCAhPT0gY3VycmVudFBoYXNlICYmIFwiY29tcG9uZW50V2lsbE1vdW50XCIgIT09IGN1cnJlbnRQaGFzZSAmJiBcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIiAhPT0gY3VycmVudFBoYXNlICYmIChoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSA9ICEwKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnRXb3JrVGltZXI6IGZ1bmN0aW9uKGZpYmVyKSB7XG4gICAgICAgICAgICBzdXBwb3J0c1VzZXJUaW1pbmcgJiYgIXNob3VsZElnbm9yZUZpYmVyKGZpYmVyKSAmJiAoY3VycmVudEZpYmVyID0gZmliZXIsIGJlZ2luRmliZXJNYXJrKGZpYmVyLCBudWxsKSAmJiAoZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgPSAhMCkpO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWxXb3JrVGltZXI6IGZ1bmN0aW9uKGZpYmVyKSB7XG4gICAgICAgICAgICBzdXBwb3J0c1VzZXJUaW1pbmcgJiYgIXNob3VsZElnbm9yZUZpYmVyKGZpYmVyKSAmJiAoZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgPSAhMSwgXG4gICAgICAgICAgICBjbGVhckZpYmVyTWFyayhmaWJlciwgbnVsbCkpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wV29ya1RpbWVyOiBmdW5jdGlvbihmaWJlcikge1xuICAgICAgICAgICAgc3VwcG9ydHNVc2VyVGltaW5nICYmICFzaG91bGRJZ25vcmVGaWJlcihmaWJlcikgJiYgKGN1cnJlbnRGaWJlciA9IGZpYmVyLnJldHVybiwgXG4gICAgICAgICAgICBmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZyAmJiAoZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgPSAhMSwgZW5kRmliZXJNYXJrKGZpYmVyLCBudWxsLCBudWxsKSkpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wRmFpbGVkV29ya1RpbWVyOiBmdW5jdGlvbihmaWJlcikge1xuICAgICAgICAgICAgaWYgKHN1cHBvcnRzVXNlclRpbWluZyAmJiAhc2hvdWxkSWdub3JlRmliZXIoZmliZXIpICYmIChjdXJyZW50RmliZXIgPSBmaWJlci5yZXR1cm4sIFxuICAgICAgICAgICAgZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcpKSB7XG4gICAgICAgICAgICAgICAgZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcgPSAhMTtcbiAgICAgICAgICAgICAgICBlbmRGaWJlck1hcmsoZmliZXIsIG51bGwsIFwiQW4gZXJyb3Igd2FzIHRocm93biBpbnNpZGUgdGhpcyBlcnJvciBib3VuZGFyeVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnRQaGFzZVRpbWVyOiBmdW5jdGlvbihmaWJlciwgcGhhc2UpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzVXNlclRpbWluZyAmJiAoY2xlYXJQZW5kaW5nUGhhc2VNZWFzdXJlbWVudCgpLCBiZWdpbkZpYmVyTWFyayhmaWJlciwgcGhhc2UpICYmIChjdXJyZW50UGhhc2VGaWJlciA9IGZpYmVyLCBcbiAgICAgICAgICAgIGN1cnJlbnRQaGFzZSA9IHBoYXNlKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3BQaGFzZVRpbWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gY3VycmVudFBoYXNlICYmIG51bGwgIT09IGN1cnJlbnRQaGFzZUZpYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZEZpYmVyTWFyayhjdXJyZW50UGhhc2VGaWJlciwgY3VycmVudFBoYXNlLCBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSA/IFwiU2NoZWR1bGVkIGEgY2FzY2FkaW5nIHVwZGF0ZVwiIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRQaGFzZSA9IG51bGwsIGN1cnJlbnRQaGFzZUZpYmVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnRXb3JrTG9vcFRpbWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzVXNlclRpbWluZyAmJiAoY29tbWl0Q291bnRJbkN1cnJlbnRXb3JrTG9vcCA9IDAsIGJlZ2luTWFyayhcIihSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uKVwiKSwgXG4gICAgICAgICAgICByZXN1bWVUaW1lcnMoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3BXb3JrTG9vcFRpbWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2FybmluZyA9IGNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AgPiAxID8gXCJUaGVyZSB3ZXJlIGNhc2NhZGluZyB1cGRhdGVzXCIgOiBudWxsO1xuICAgICAgICAgICAgICAgIGNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AgPSAwLCBwYXVzZVRpbWVycygpLCBlbmRNYXJrKFwiKFJlYWN0IFRyZWUgUmVjb25jaWxpYXRpb24pXCIsIFwiKFJlYWN0IFRyZWUgUmVjb25jaWxpYXRpb24pXCIsIHdhcm5pbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGFydENvbW1pdFRpbWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzVXNlclRpbWluZyAmJiAoaXNDb21taXR0aW5nID0gITAsIGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudENvbW1pdCA9ICExLCBcbiAgICAgICAgICAgIGxhYmVsc0luQ3VycmVudENvbW1pdC5jbGVhcigpLCBiZWdpbk1hcmsoXCIoQ29tbWl0dGluZyBDaGFuZ2VzKVwiKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3BDb21taXRUaW1lcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdhcm5pbmcgPSBudWxsO1xuICAgICAgICAgICAgICAgIGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudENvbW1pdCA/IHdhcm5pbmcgPSBcIkxpZmVjeWNsZSBob29rIHNjaGVkdWxlZCBhIGNhc2NhZGluZyB1cGRhdGVcIiA6IGNvbW1pdENvdW50SW5DdXJyZW50V29ya0xvb3AgPiAwICYmICh3YXJuaW5nID0gXCJDYXVzZWQgYnkgYSBjYXNjYWRpbmcgdXBkYXRlIGluIGVhcmxpZXIgY29tbWl0XCIpLCBcbiAgICAgICAgICAgICAgICBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQgPSAhMSwgY29tbWl0Q291bnRJbkN1cnJlbnRXb3JrTG9vcCsrLCBpc0NvbW1pdHRpbmcgPSAhMSwgXG4gICAgICAgICAgICAgICAgbGFiZWxzSW5DdXJyZW50Q29tbWl0LmNsZWFyKCksIGVuZE1hcmsoXCIoQ29tbWl0dGluZyBDaGFuZ2VzKVwiLCBcIihDb21taXR0aW5nIENoYW5nZXMpXCIsIHdhcm5pbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGFydENvbW1pdEhvc3RFZmZlY3RzVGltZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc3VwcG9ydHNVc2VyVGltaW5nICYmIChlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCA9IDAsIGJlZ2luTWFyayhcIihDb21taXR0aW5nIEhvc3QgRWZmZWN0cylcIikpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wQ29tbWl0SG9zdEVmZmVjdHNUaW1lcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQ7XG4gICAgICAgICAgICAgICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwLCBlbmRNYXJrKFwiKENvbW1pdHRpbmcgSG9zdCBFZmZlY3RzOiBcIiArIGNvdW50ICsgXCIgVG90YWwpXCIsIFwiKENvbW1pdHRpbmcgSG9zdCBFZmZlY3RzKVwiLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnRDb21taXRMaWZlQ3ljbGVzVGltZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc3VwcG9ydHNVc2VyVGltaW5nICYmIChlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCA9IDAsIGJlZ2luTWFyayhcIihDYWxsaW5nIExpZmVjeWNsZSBNZXRob2RzKVwiKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3BDb21taXRMaWZlQ3ljbGVzVGltZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0O1xuICAgICAgICAgICAgICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMCwgZW5kTWFyayhcIihDYWxsaW5nIExpZmVjeWNsZSBNZXRob2RzOiBcIiArIGNvdW50ICsgXCIgVG90YWwpXCIsIFwiKENhbGxpbmcgTGlmZWN5Y2xlIE1ldGhvZHMpXCIsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgUmVhY3REZWJ1Z0ZpYmVyUGVyZl8xID0gUmVhY3REZWJ1Z0ZpYmVyUGVyZiwgaXNGaWJlck1vdW50ZWQgPSBSZWFjdEZpYmVyVHJlZVJlZmxlY3Rpb24uaXNGaWJlck1vdW50ZWQsIENsYXNzQ29tcG9uZW50JDEgPSBSZWFjdFR5cGVPZldvcmsuQ2xhc3NDb21wb25lbnQsIEhvc3RSb290JDEgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFJvb3QsIGNyZWF0ZUN1cnNvciA9IFJlYWN0RmliZXJTdGFjay5jcmVhdGVDdXJzb3IsIHBvcCA9IFJlYWN0RmliZXJTdGFjay5wb3AsIHB1c2ggPSBSZWFjdEZpYmVyU3RhY2sucHVzaCwgd2FybmluZyQzID0gcmVxdWlyZSQkMCwgY2hlY2tQcm9wVHlwZXMkMSA9IGNoZWNrUHJvcFR5cGVzLCBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDEgPSBSZWFjdERlYnVnQ3VycmVudEZpYmVyXzEsIF9yZXF1aXJlNCA9IFJlYWN0RGVidWdGaWJlclBlcmZfMSwgc3RhcnRQaGFzZVRpbWVyID0gX3JlcXVpcmU0LnN0YXJ0UGhhc2VUaW1lciwgc3RvcFBoYXNlVGltZXIgPSBfcmVxdWlyZTQuc3RvcFBoYXNlVGltZXIsIHdhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dCA9IHt9LCBjb250ZXh0U3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoZW1wdHlPYmplY3QpLCBkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKCExKSwgcHJldmlvdXNDb250ZXh0ID0gZW1wdHlPYmplY3Q7XG4gICAgZnVuY3Rpb24gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybiBpc0NvbnRleHRQcm92aWRlciQxKHdvcmtJblByb2dyZXNzKSA/IHByZXZpb3VzQ29udGV4dCA6IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICAgIH1cbiAgICB2YXIgZ2V0VW5tYXNrZWRDb250ZXh0XzEgPSBnZXRVbm1hc2tlZENvbnRleHQ7XG4gICAgZnVuY3Rpb24gY2FjaGVDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQsIG1hc2tlZENvbnRleHQpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0ID0gdW5tYXNrZWRDb250ZXh0LCBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCA9IG1hc2tlZENvbnRleHQ7XG4gICAgfVxuICAgIHZhciBjYWNoZUNvbnRleHRfMSA9IGNhY2hlQ29udGV4dCwgZ2V0TWFza2VkQ29udGV4dCA9IGZ1bmN0aW9uKHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlLCBjb250ZXh0VHlwZXMgPSB0eXBlLmNvbnRleHRUeXBlcztcbiAgICAgICAgaWYgKCFjb250ZXh0VHlwZXMpIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCA9PT0gdW5tYXNrZWRDb250ZXh0KSByZXR1cm4gaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7XG4gICAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjb250ZXh0VHlwZXMpIGNvbnRleHRba2V5XSA9IHVubWFza2VkQ29udGV4dFtrZXldO1xuICAgICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWVfMSh3b3JrSW5Qcm9ncmVzcykgfHwgXCJVbmtub3duXCI7XG4gICAgICAgIHJldHVybiBjaGVja1Byb3BUeXBlcyQxKGNvbnRleHRUeXBlcywgY29udGV4dCwgXCJjb250ZXh0XCIsIG5hbWUsIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMS5nZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKSwgXG4gICAgICAgIGluc3RhbmNlICYmIGNhY2hlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0LCBjb250ZXh0KSwgY29udGV4dDtcbiAgICB9LCBoYXNDb250ZXh0Q2hhbmdlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvci5jdXJyZW50O1xuICAgIH07XG4gICAgZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIoZmliZXIpIHtcbiAgICAgICAgcmV0dXJuIGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQkMSAmJiBudWxsICE9IGZpYmVyLnR5cGUuY29udGV4dFR5cGVzO1xuICAgIH1cbiAgICB2YXIgaXNDb250ZXh0Q29uc3VtZXJfMSA9IGlzQ29udGV4dENvbnN1bWVyO1xuICAgIGZ1bmN0aW9uIGlzQ29udGV4dFByb3ZpZGVyJDEoZmliZXIpIHtcbiAgICAgICAgcmV0dXJuIGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQkMSAmJiBudWxsICE9IGZpYmVyLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgfVxuICAgIHZhciBpc0NvbnRleHRQcm92aWRlcl8xID0gaXNDb250ZXh0UHJvdmlkZXIkMTtcbiAgICBmdW5jdGlvbiBwb3BDb250ZXh0UHJvdmlkZXIoZmliZXIpIHtcbiAgICAgICAgaXNDb250ZXh0UHJvdmlkZXIkMShmaWJlcikgJiYgKHBvcChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBmaWJlciksIHBvcChjb250ZXh0U3RhY2tDdXJzb3IsIGZpYmVyKSk7XG4gICAgfVxuICAgIHZhciBwb3BDb250ZXh0UHJvdmlkZXJfMSA9IHBvcENvbnRleHRQcm92aWRlciwgcG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0ID0gZnVuY3Rpb24oZmliZXIpIHtcbiAgICAgICAgcG9wKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGZpYmVyKSwgcG9wKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpO1xuICAgIH0sIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QgPSBmdW5jdGlvbihmaWJlciwgY29udGV4dCwgZGlkQ2hhbmdlKSB7XG4gICAgICAgIGludmFyaWFudChudWxsID09IGNvbnRleHRTdGFja0N1cnNvci5jdXJzb3IsIFwiVW5leHBlY3RlZCBjb250ZXh0IGZvdW5kIG9uIHN0YWNrLiBcIiArIFwiVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIiksIFxuICAgICAgICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgY29udGV4dCwgZmliZXIpLCBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZENoYW5nZSwgZmliZXIpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gcHJvY2Vzc0NoaWxkQ29udGV4dCQxKGZpYmVyLCBwYXJlbnRDb250ZXh0KSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZSwgY2hpbGRDb250ZXh0VHlwZXMgPSBmaWJlci50eXBlLmNoaWxkQ29udGV4dFR5cGVzO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBpbnN0YW5jZS5nZXRDaGlsZENvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZV8xKGZpYmVyKSB8fCBcIlVua25vd25cIjtcbiAgICAgICAgICAgIHJldHVybiB3YXJuZWRBYm91dE1pc3NpbmdHZXRDaGlsZENvbnRleHRbY29tcG9uZW50TmFtZV0gfHwgKHdhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dFtjb21wb25lbnROYW1lXSA9ICEwLCBcbiAgICAgICAgICAgIHdhcm5pbmckMyghMSwgXCIlcy5jaGlsZENvbnRleHRUeXBlcyBpcyBzcGVjaWZpZWQgYnV0IHRoZXJlIGlzIG5vIGdldENoaWxkQ29udGV4dCgpIG1ldGhvZCBcIiArIFwib24gdGhlIGluc3RhbmNlLiBZb3UgY2FuIGVpdGhlciBkZWZpbmUgZ2V0Q2hpbGRDb250ZXh0KCkgb24gJXMgb3IgcmVtb3ZlIFwiICsgXCJjaGlsZENvbnRleHRUeXBlcyBmcm9tIGl0LlwiLCBjb21wb25lbnROYW1lLCBjb21wb25lbnROYW1lKSksIFxuICAgICAgICAgICAgcGFyZW50Q29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGRDb250ZXh0ID0gdm9pZCAwO1xuICAgICAgICBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDEuc2V0Q3VycmVudFBoYXNlKFwiZ2V0Q2hpbGRDb250ZXh0XCIpLCBzdGFydFBoYXNlVGltZXIoZmliZXIsIFwiZ2V0Q2hpbGRDb250ZXh0XCIpLCBcbiAgICAgICAgY2hpbGRDb250ZXh0ID0gaW5zdGFuY2UuZ2V0Q2hpbGRDb250ZXh0KCksIHN0b3BQaGFzZVRpbWVyKCksIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMS5zZXRDdXJyZW50UGhhc2UobnVsbCk7XG4gICAgICAgIGZvciAodmFyIGNvbnRleHRLZXkgaW4gY2hpbGRDb250ZXh0KSBpbnZhcmlhbnQoY29udGV4dEtleSBpbiBjaGlsZENvbnRleHRUeXBlcywgJyVzLmdldENoaWxkQ29udGV4dCgpOiBrZXkgXCIlc1wiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLicsIGdldENvbXBvbmVudE5hbWVfMShmaWJlcikgfHwgXCJVbmtub3duXCIsIGNvbnRleHRLZXkpO1xuICAgICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWVfMShmaWJlcikgfHwgXCJVbmtub3duXCI7XG4gICAgICAgIHJldHVybiBjaGVja1Byb3BUeXBlcyQxKGNoaWxkQ29udGV4dFR5cGVzLCBjaGlsZENvbnRleHQsIFwiY2hpbGQgY29udGV4dFwiLCBuYW1lLCBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDEuZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSksIFxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuICAgIH1cbiAgICB2YXIgcHJvY2Vzc0NoaWxkQ29udGV4dF8xID0gcHJvY2Vzc0NoaWxkQ29udGV4dCQxLCBwdXNoQ29udGV4dFByb3ZpZGVyID0gZnVuY3Rpb24od29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgaWYgKCFpc0NvbnRleHRQcm92aWRlciQxKHdvcmtJblByb2dyZXNzKSkgcmV0dXJuICExO1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUsIG1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQgfHwgZW1wdHlPYmplY3Q7XG4gICAgICAgIHJldHVybiBwcmV2aW91c0NvbnRleHQgPSBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudCwgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIG1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyksIFxuICAgICAgICBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IuY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpLCBcbiAgICAgICAgITA7XG4gICAgfSwgaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciA9IGZ1bmN0aW9uKHdvcmtJblByb2dyZXNzLCBkaWRDaGFuZ2UpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICBpZiAoaW52YXJpYW50KGluc3RhbmNlLCBcIkV4cGVjdGVkIHRvIGhhdmUgYW4gaW5zdGFuY2UgYnkgdGhpcyBwb2ludC4gXCIgKyBcIlRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpLCBcbiAgICAgICAgZGlkQ2hhbmdlKSB7XG4gICAgICAgICAgICB2YXIgbWVyZ2VkQ29udGV4dCA9IHByb2Nlc3NDaGlsZENvbnRleHQkMSh3b3JrSW5Qcm9ncmVzcywgcHJldmlvdXNDb250ZXh0KTtcbiAgICAgICAgICAgIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0ID0gbWVyZ2VkQ29udGV4dCwgcG9wKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIHdvcmtJblByb2dyZXNzKSwgXG4gICAgICAgICAgICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yLCB3b3JrSW5Qcm9ncmVzcyksIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBtZXJnZWRDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyksIFxuICAgICAgICAgICAgcHVzaChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBkaWRDaGFuZ2UsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfSBlbHNlIHBvcChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCB3b3JrSW5Qcm9ncmVzcyksIHB1c2goZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgZGlkQ2hhbmdlLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfSwgcmVzZXRDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHByZXZpb3VzQ29udGV4dCA9IGVtcHR5T2JqZWN0LCBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudCA9IGVtcHR5T2JqZWN0LCBkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLmN1cnJlbnQgPSAhMTtcbiAgICB9LCBmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCQxID0gZnVuY3Rpb24oZmliZXIpIHtcbiAgICAgICAgaW52YXJpYW50KGlzRmliZXJNb3VudGVkKGZpYmVyKSAmJiBmaWJlci50YWcgPT09IENsYXNzQ29tcG9uZW50JDEsIFwiRXhwZWN0ZWQgc3VidHJlZSBwYXJlbnQgdG8gYmUgYSBtb3VudGVkIGNsYXNzIGNvbXBvbmVudC4gXCIgKyBcIlRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpO1xuICAgICAgICBmb3IgKHZhciBub2RlID0gZmliZXI7IG5vZGUudGFnICE9PSBIb3N0Um9vdCQxOyApIHtcbiAgICAgICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlciQxKG5vZGUpKSByZXR1cm4gbm9kZS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5yZXR1cm47XG4gICAgICAgICAgICBpbnZhcmlhbnQocGFyZW50LCBcIkZvdW5kIHVuZXhwZWN0ZWQgZGV0YWNoZWQgc3VidHJlZSBwYXJlbnQuIFwiICsgXCJUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSwgXG4gICAgICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlLnN0YXRlTm9kZS5jb250ZXh0O1xuICAgIH0sIFJlYWN0RmliZXJDb250ZXh0ID0ge1xuICAgICAgICBnZXRVbm1hc2tlZENvbnRleHQ6IGdldFVubWFza2VkQ29udGV4dF8xLFxuICAgICAgICBjYWNoZUNvbnRleHQ6IGNhY2hlQ29udGV4dF8xLFxuICAgICAgICBnZXRNYXNrZWRDb250ZXh0OiBnZXRNYXNrZWRDb250ZXh0LFxuICAgICAgICBoYXNDb250ZXh0Q2hhbmdlZDogaGFzQ29udGV4dENoYW5nZWQsXG4gICAgICAgIGlzQ29udGV4dENvbnN1bWVyOiBpc0NvbnRleHRDb25zdW1lcl8xLFxuICAgICAgICBpc0NvbnRleHRQcm92aWRlcjogaXNDb250ZXh0UHJvdmlkZXJfMSxcbiAgICAgICAgcG9wQ29udGV4dFByb3ZpZGVyOiBwb3BDb250ZXh0UHJvdmlkZXJfMSxcbiAgICAgICAgcG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OiBwb3BUb3BMZXZlbENvbnRleHRPYmplY3QsXG4gICAgICAgIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Q6IHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QsXG4gICAgICAgIHByb2Nlc3NDaGlsZENvbnRleHQ6IHByb2Nlc3NDaGlsZENvbnRleHRfMSxcbiAgICAgICAgcHVzaENvbnRleHRQcm92aWRlcjogcHVzaENvbnRleHRQcm92aWRlcixcbiAgICAgICAgaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjogaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcixcbiAgICAgICAgcmVzZXRDb250ZXh0OiByZXNldENvbnRleHQsXG4gICAgICAgIGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0OiBmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCQxXG4gICAgfSwgUmVhY3RUeXBlT2ZJbnRlcm5hbENvbnRleHQgPSB7XG4gICAgICAgIE5vQ29udGV4dDogMCxcbiAgICAgICAgQXN5bmNVcGRhdGVzOiAxXG4gICAgfSwgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCQxID0gUmVhY3RUeXBlT2ZXb3JrLkluZGV0ZXJtaW5hdGVDb21wb25lbnQsIENsYXNzQ29tcG9uZW50JDQgPSBSZWFjdFR5cGVPZldvcmsuQ2xhc3NDb21wb25lbnQsIEhvc3RSb290JDQgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFJvb3QsIEhvc3RDb21wb25lbnQkNCA9IFJlYWN0VHlwZU9mV29yay5Ib3N0Q29tcG9uZW50LCBIb3N0VGV4dCQyID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RUZXh0LCBIb3N0UG9ydGFsJDIgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFBvcnRhbCwgQ29yb3V0aW5lQ29tcG9uZW50ID0gUmVhY3RUeXBlT2ZXb3JrLkNvcm91dGluZUNvbXBvbmVudCwgWWllbGRDb21wb25lbnQkMSA9IFJlYWN0VHlwZU9mV29yay5ZaWVsZENvbXBvbmVudCwgRnJhZ21lbnQkMSA9IFJlYWN0VHlwZU9mV29yay5GcmFnbWVudCwgTm9Xb3JrJDEgPSBSZWFjdFByaW9yaXR5TGV2ZWwuTm9Xb3JrLCBOb0NvbnRleHQgPSBSZWFjdFR5cGVPZkludGVybmFsQ29udGV4dC5Ob0NvbnRleHQsIE5vRWZmZWN0JDEgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuTm9FZmZlY3QsIGdldENvbXBvbmVudE5hbWUkNSA9IGdldENvbXBvbmVudE5hbWVfMSwgaGFzQmFkTWFwUG9seWZpbGwgPSAhMTtcbiAgICB0cnkge1xuICAgICAgICB2YXIgbm9uRXh0ZW5zaWJsZU9iamVjdCA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSk7XG4gICAgICAgIG5ldyBNYXAoWyBbIG5vbkV4dGVuc2libGVPYmplY3QsIG51bGwgXSBdKSwgbmV3IFNldChbIG5vbkV4dGVuc2libGVPYmplY3QgXSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYXNCYWRNYXBQb2x5ZmlsbCA9ICEwO1xuICAgIH1cbiAgICB2YXIgZGVidWdDb3VudGVyID0gMTtcbiAgICBmdW5jdGlvbiBGaWJlck5vZGUodGFnLCBrZXksIGludGVybmFsQ29udGV4dFRhZykge1xuICAgICAgICB0aGlzLnRhZyA9IHRhZywgdGhpcy5rZXkgPSBrZXksIHRoaXMudHlwZSA9IG51bGwsIHRoaXMuc3RhdGVOb2RlID0gbnVsbCwgdGhpcy5yZXR1cm4gPSBudWxsLCBcbiAgICAgICAgdGhpcy5jaGlsZCA9IG51bGwsIHRoaXMuc2libGluZyA9IG51bGwsIHRoaXMuaW5kZXggPSAwLCB0aGlzLnJlZiA9IG51bGwsIHRoaXMucGVuZGluZ1Byb3BzID0gbnVsbCwgXG4gICAgICAgIHRoaXMubWVtb2l6ZWRQcm9wcyA9IG51bGwsIHRoaXMudXBkYXRlUXVldWUgPSBudWxsLCB0aGlzLm1lbW9pemVkU3RhdGUgPSBudWxsLCB0aGlzLmludGVybmFsQ29udGV4dFRhZyA9IGludGVybmFsQ29udGV4dFRhZywgXG4gICAgICAgIHRoaXMuZWZmZWN0VGFnID0gTm9FZmZlY3QkMSwgdGhpcy5uZXh0RWZmZWN0ID0gbnVsbCwgdGhpcy5maXJzdEVmZmVjdCA9IG51bGwsIHRoaXMubGFzdEVmZmVjdCA9IG51bGwsIFxuICAgICAgICB0aGlzLnBlbmRpbmdXb3JrUHJpb3JpdHkgPSBOb1dvcmskMSwgdGhpcy5hbHRlcm5hdGUgPSBudWxsLCB0aGlzLl9kZWJ1Z0lEID0gZGVidWdDb3VudGVyKyssIFxuICAgICAgICB0aGlzLl9kZWJ1Z1NvdXJjZSA9IG51bGwsIHRoaXMuX2RlYnVnT3duZXIgPSBudWxsLCB0aGlzLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nID0gITEsIFxuICAgICAgICBoYXNCYWRNYXBQb2x5ZmlsbCB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyB8fCBPYmplY3QucHJldmVudEV4dGVuc2lvbnModGhpcyk7XG4gICAgfVxuICAgIHZhciBjcmVhdGVGaWJlciA9IGZ1bmN0aW9uKHRhZywga2V5LCBpbnRlcm5hbENvbnRleHRUYWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWJlck5vZGUodGFnLCBrZXksIGludGVybmFsQ29udGV4dFRhZyk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiAhKCFDb21wb25lbnQucHJvdG90eXBlIHx8ICFDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xuICAgIH1cbiAgICB2YXIgY3JlYXRlV29ya0luUHJvZ3Jlc3MgPSBmdW5jdGlvbihjdXJyZW50LCByZW5kZXJQcmlvcml0eSkge1xuICAgICAgICB2YXIgd29ya0luUHJvZ3Jlc3MgPSBjdXJyZW50LmFsdGVybmF0ZTtcbiAgICAgICAgcmV0dXJuIG51bGwgPT09IHdvcmtJblByb2dyZXNzID8gKHdvcmtJblByb2dyZXNzID0gY3JlYXRlRmliZXIoY3VycmVudC50YWcsIGN1cnJlbnQua2V5LCBjdXJyZW50LmludGVybmFsQ29udGV4dFRhZyksIFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlLCB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50LnN0YXRlTm9kZSwgXG4gICAgICAgIHdvcmtJblByb2dyZXNzLl9kZWJ1Z0lEID0gY3VycmVudC5fZGVidWdJRCwgd29ya0luUHJvZ3Jlc3MuX2RlYnVnU291cmNlID0gY3VycmVudC5fZGVidWdTb3VyY2UsIFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5fZGVidWdPd25lciA9IGN1cnJlbnQuX2RlYnVnT3duZXIsIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IGN1cnJlbnQsIFxuICAgICAgICBjdXJyZW50LmFsdGVybmF0ZSA9IHdvcmtJblByb2dyZXNzKSA6ICh3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgPSBOb0VmZmVjdCQxLCB3b3JrSW5Qcm9ncmVzcy5uZXh0RWZmZWN0ID0gbnVsbCwgXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0ID0gbnVsbCwgd29ya0luUHJvZ3Jlc3MubGFzdEVmZmVjdCA9IG51bGwpLCB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nV29ya1ByaW9yaXR5ID0gcmVuZGVyUHJpb3JpdHksIFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQsIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHMsIFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlLCB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWUsIFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zaWJsaW5nID0gY3VycmVudC5zaWJsaW5nLCB3b3JrSW5Qcm9ncmVzcy5pbmRleCA9IGN1cnJlbnQuaW5kZXgsIFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSBjdXJyZW50LnJlZiwgd29ya0luUHJvZ3Jlc3M7XG4gICAgfSwgY3JlYXRlSG9zdFJvb3RGaWJlciQxID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlcihIb3N0Um9vdCQ0LCBudWxsLCBOb0NvbnRleHQpO1xuICAgIH0sIGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBpbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgdmFyIG93bmVyID0gbnVsbDtcbiAgICAgICAgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgICAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXJGcm9tRWxlbWVudFR5cGUoZWxlbWVudC50eXBlLCBlbGVtZW50LmtleSwgaW50ZXJuYWxDb250ZXh0VGFnLCBvd25lcik7XG4gICAgICAgIHJldHVybiBmaWJlci5wZW5kaW5nUHJvcHMgPSBlbGVtZW50LnByb3BzLCBmaWJlci5wZW5kaW5nV29ya1ByaW9yaXR5ID0gcHJpb3JpdHlMZXZlbCwgXG4gICAgICAgIGZpYmVyLl9kZWJ1Z1NvdXJjZSA9IGVsZW1lbnQuX3NvdXJjZSwgZmliZXIuX2RlYnVnT3duZXIgPSBlbGVtZW50Ll9vd25lciwgZmliZXI7XG4gICAgfSwgY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQgPSBmdW5jdGlvbihlbGVtZW50cywgaW50ZXJuYWxDb250ZXh0VGFnLCBwcmlvcml0eUxldmVsKSB7XG4gICAgICAgIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKEZyYWdtZW50JDEsIG51bGwsIGludGVybmFsQ29udGV4dFRhZyk7XG4gICAgICAgIHJldHVybiBmaWJlci5wZW5kaW5nUHJvcHMgPSBlbGVtZW50cywgZmliZXIucGVuZGluZ1dvcmtQcmlvcml0eSA9IHByaW9yaXR5TGV2ZWwsIFxuICAgICAgICBmaWJlcjtcbiAgICB9LCBjcmVhdGVGaWJlckZyb21UZXh0ID0gZnVuY3Rpb24oY29udGVudCwgaW50ZXJuYWxDb250ZXh0VGFnLCBwcmlvcml0eUxldmVsKSB7XG4gICAgICAgIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKEhvc3RUZXh0JDIsIG51bGwsIGludGVybmFsQ29udGV4dFRhZyk7XG4gICAgICAgIHJldHVybiBmaWJlci5wZW5kaW5nUHJvcHMgPSBjb250ZW50LCBmaWJlci5wZW5kaW5nV29ya1ByaW9yaXR5ID0gcHJpb3JpdHlMZXZlbCwgXG4gICAgICAgIGZpYmVyO1xuICAgIH07XG4gICAgZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tRWxlbWVudFR5cGUodHlwZSwga2V5LCBpbnRlcm5hbENvbnRleHRUYWcsIGRlYnVnT3duZXIpIHtcbiAgICAgICAgdmFyIGZpYmVyID0gdm9pZCAwO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiB0eXBlKSBmaWJlciA9IHNob3VsZENvbnN0cnVjdCh0eXBlKSA/IGNyZWF0ZUZpYmVyKENsYXNzQ29tcG9uZW50JDQsIGtleSwgaW50ZXJuYWxDb250ZXh0VGFnKSA6IGNyZWF0ZUZpYmVyKEluZGV0ZXJtaW5hdGVDb21wb25lbnQkMSwga2V5LCBpbnRlcm5hbENvbnRleHRUYWcpLCBcbiAgICAgICAgZmliZXIudHlwZSA9IHR5cGU7IGVsc2UgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHR5cGUpIGZpYmVyID0gY3JlYXRlRmliZXIoSG9zdENvbXBvbmVudCQ0LCBrZXksIGludGVybmFsQ29udGV4dFRhZyksIFxuICAgICAgICBmaWJlci50eXBlID0gdHlwZTsgZWxzZSBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgdHlwZSAmJiBudWxsICE9PSB0eXBlICYmIFwibnVtYmVyXCIgPT0gdHlwZW9mIHR5cGUudGFnKSBmaWJlciA9IHR5cGU7IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGluZm8gPSBcIlwiO1xuICAgICAgICAgICAgKHZvaWQgMCA9PT0gdHlwZSB8fCBcIm9iamVjdFwiID09IHR5cGVvZiB0eXBlICYmIG51bGwgIT09IHR5cGUgJiYgMCA9PT0gT2JqZWN0LmtleXModHlwZSkubGVuZ3RoKSAmJiAoaW5mbyArPSBcIiBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSBcIiArIFwiaXQncyBkZWZpbmVkIGluLlwiKTtcbiAgICAgICAgICAgIHZhciBvd25lck5hbWUgPSBkZWJ1Z093bmVyID8gZ2V0Q29tcG9uZW50TmFtZSQ1KGRlYnVnT3duZXIpIDogbnVsbDtcbiAgICAgICAgICAgIG93bmVyTmFtZSAmJiAoaW5mbyArPSBcIlxcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGBcIiArIG93bmVyTmFtZSArIFwiYC5cIiksIGludmFyaWFudCghMSwgXCJFbGVtZW50IHR5cGUgaXMgaW52YWxpZDogZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciBidWlsdC1pbiBjb21wb25lbnRzKSBcIiArIFwib3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKSBidXQgZ290OiAlcy4lc1wiLCBudWxsID09IHR5cGUgPyB0eXBlIDogdHlwZW9mIHR5cGUsIGluZm8pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWJlcjtcbiAgICB9XG4gICAgdmFyIFJFQUNUX0NPUk9VVElORV9UWVBFJDEsIFJFQUNUX1lJRUxEX1RZUEUkMSwgY3JlYXRlRmliZXJGcm9tRWxlbWVudFR5cGVfMSA9IGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnRUeXBlLCBjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlcihIb3N0Q29tcG9uZW50JDQsIG51bGwsIE5vQ29udGV4dCk7XG4gICAgICAgIHJldHVybiBmaWJlci50eXBlID0gXCJERUxFVEVEXCIsIGZpYmVyO1xuICAgIH0sIGNyZWF0ZUZpYmVyRnJvbUNvcm91dGluZSA9IGZ1bmN0aW9uKGNvcm91dGluZSwgaW50ZXJuYWxDb250ZXh0VGFnLCBwcmlvcml0eUxldmVsKSB7XG4gICAgICAgIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKENvcm91dGluZUNvbXBvbmVudCwgY29yb3V0aW5lLmtleSwgaW50ZXJuYWxDb250ZXh0VGFnKTtcbiAgICAgICAgcmV0dXJuIGZpYmVyLnR5cGUgPSBjb3JvdXRpbmUuaGFuZGxlciwgZmliZXIucGVuZGluZ1Byb3BzID0gY29yb3V0aW5lLCBmaWJlci5wZW5kaW5nV29ya1ByaW9yaXR5ID0gcHJpb3JpdHlMZXZlbCwgXG4gICAgICAgIGZpYmVyO1xuICAgIH0sIGNyZWF0ZUZpYmVyRnJvbVlpZWxkID0gZnVuY3Rpb24oeWllbGROb2RlLCBpbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyKFlpZWxkQ29tcG9uZW50JDEsIG51bGwsIGludGVybmFsQ29udGV4dFRhZyk7XG4gICAgfSwgY3JlYXRlRmliZXJGcm9tUG9ydGFsID0gZnVuY3Rpb24ocG9ydGFsLCBpbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoSG9zdFBvcnRhbCQyLCBwb3J0YWwua2V5LCBpbnRlcm5hbENvbnRleHRUYWcpO1xuICAgICAgICByZXR1cm4gZmliZXIucGVuZGluZ1Byb3BzID0gcG9ydGFsLmNoaWxkcmVuIHx8IFtdLCBmaWJlci5wZW5kaW5nV29ya1ByaW9yaXR5ID0gcHJpb3JpdHlMZXZlbCwgXG4gICAgICAgIGZpYmVyLnN0YXRlTm9kZSA9IHtcbiAgICAgICAgICAgIGNvbnRhaW5lckluZm86IHBvcnRhbC5jb250YWluZXJJbmZvLFxuICAgICAgICAgICAgaW1wbGVtZW50YXRpb246IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICAgICAgICB9LCBmaWJlcjtcbiAgICB9LCBsYXJnZXJQcmlvcml0eSA9IGZ1bmN0aW9uKHAxLCBwMikge1xuICAgICAgICByZXR1cm4gcDEgIT09IE5vV29yayQxICYmIChwMiA9PT0gTm9Xb3JrJDEgfHwgcDIgPiBwMSkgPyBwMSA6IHAyO1xuICAgIH0sIFJlYWN0RmliZXIgPSB7XG4gICAgICAgIGNyZWF0ZVdvcmtJblByb2dyZXNzOiBjcmVhdGVXb3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgY3JlYXRlSG9zdFJvb3RGaWJlcjogY3JlYXRlSG9zdFJvb3RGaWJlciQxLFxuICAgICAgICBjcmVhdGVGaWJlckZyb21FbGVtZW50OiBjcmVhdGVGaWJlckZyb21FbGVtZW50LFxuICAgICAgICBjcmVhdGVGaWJlckZyb21GcmFnbWVudDogY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQsXG4gICAgICAgIGNyZWF0ZUZpYmVyRnJvbVRleHQ6IGNyZWF0ZUZpYmVyRnJvbVRleHQsXG4gICAgICAgIGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnRUeXBlOiBjcmVhdGVGaWJlckZyb21FbGVtZW50VHlwZV8xLFxuICAgICAgICBjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbjogY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb24sXG4gICAgICAgIGNyZWF0ZUZpYmVyRnJvbUNvcm91dGluZTogY3JlYXRlRmliZXJGcm9tQ29yb3V0aW5lLFxuICAgICAgICBjcmVhdGVGaWJlckZyb21ZaWVsZDogY3JlYXRlRmliZXJGcm9tWWllbGQsXG4gICAgICAgIGNyZWF0ZUZpYmVyRnJvbVBvcnRhbDogY3JlYXRlRmliZXJGcm9tUG9ydGFsLFxuICAgICAgICBsYXJnZXJQcmlvcml0eTogbGFyZ2VyUHJpb3JpdHlcbiAgICB9LCBjcmVhdGVIb3N0Um9vdEZpYmVyID0gUmVhY3RGaWJlci5jcmVhdGVIb3N0Um9vdEZpYmVyLCBjcmVhdGVGaWJlclJvb3QkMSA9IGZ1bmN0aW9uKGNvbnRhaW5lckluZm8pIHtcbiAgICAgICAgdmFyIHVuaW5pdGlhbGl6ZWRGaWJlciA9IGNyZWF0ZUhvc3RSb290RmliZXIoKSwgcm9vdCA9IHtcbiAgICAgICAgICAgIGN1cnJlbnQ6IHVuaW5pdGlhbGl6ZWRGaWJlcixcbiAgICAgICAgICAgIGNvbnRhaW5lckluZm86IGNvbnRhaW5lckluZm8sXG4gICAgICAgICAgICBpc1NjaGVkdWxlZDogITEsXG4gICAgICAgICAgICBuZXh0U2NoZWR1bGVkUm9vdDogbnVsbCxcbiAgICAgICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgICAgICBwZW5kaW5nQ29udGV4dDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdW5pbml0aWFsaXplZEZpYmVyLnN0YXRlTm9kZSA9IHJvb3QsIHJvb3Q7XG4gICAgfSwgUmVhY3RGaWJlclJvb3QgPSB7XG4gICAgICAgIGNyZWF0ZUZpYmVyUm9vdDogY3JlYXRlRmliZXJSb290JDFcbiAgICB9O1xuICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5mb3IgPyAoUkVBQ1RfQ09ST1VUSU5FX1RZUEUkMSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb3JvdXRpbmVcIiksIFxuICAgIFJFQUNUX1lJRUxEX1RZUEUkMSA9IFN5bWJvbC5mb3IoXCJyZWFjdC55aWVsZFwiKSkgOiAoUkVBQ1RfQ09ST1VUSU5FX1RZUEUkMSA9IDYwMTA0LCBcbiAgICBSRUFDVF9ZSUVMRF9UWVBFJDEgPSA2MDEwNSk7XG4gICAgdmFyIGNyZWF0ZUNvcm91dGluZSA9IGZ1bmN0aW9uKGNoaWxkcmVuLCBoYW5kbGVyLCBwcm9wcykge1xuICAgICAgICB2YXIga2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbM10gPyBhcmd1bWVudHNbM10gOiBudWxsLCBjb3JvdXRpbmUgPSB7XG4gICAgICAgICAgICAkJHR5cGVvZjogUkVBQ1RfQ09ST1VUSU5FX1RZUEUkMSxcbiAgICAgICAgICAgIGtleTogbnVsbCA9PSBrZXkgPyBudWxsIDogXCJcIiArIGtleSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgICAgICBwcm9wczogcHJvcHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUgJiYgKE9iamVjdC5mcmVlemUoY29yb3V0aW5lLnByb3BzKSwgT2JqZWN0LmZyZWV6ZShjb3JvdXRpbmUpKSwgXG4gICAgICAgIGNvcm91dGluZTtcbiAgICB9LCBjcmVhdGVZaWVsZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciB5aWVsZE5vZGUgPSB7XG4gICAgICAgICAgICAkJHR5cGVvZjogUkVBQ1RfWUlFTERfVFlQRSQxLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplICYmIE9iamVjdC5mcmVlemUoeWllbGROb2RlKSwgeWllbGROb2RlO1xuICAgIH0sIGlzQ29yb3V0aW5lID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiBvYmplY3QgJiYgbnVsbCAhPT0gb2JqZWN0ICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09ST1VUSU5FX1RZUEUkMTtcbiAgICB9LCBpc1lpZWxkID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiID09IHR5cGVvZiBvYmplY3QgJiYgbnVsbCAhPT0gb2JqZWN0ICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfWUlFTERfVFlQRSQxO1xuICAgIH0sIFJFQUNUX1lJRUxEX1RZUEVfMSA9IFJFQUNUX1lJRUxEX1RZUEUkMSwgUkVBQ1RfQ09ST1VUSU5FX1RZUEVfMSA9IFJFQUNUX0NPUk9VVElORV9UWVBFJDEsIFJlYWN0Q29yb3V0aW5lID0ge1xuICAgICAgICBjcmVhdGVDb3JvdXRpbmU6IGNyZWF0ZUNvcm91dGluZSxcbiAgICAgICAgY3JlYXRlWWllbGQ6IGNyZWF0ZVlpZWxkLFxuICAgICAgICBpc0Nvcm91dGluZTogaXNDb3JvdXRpbmUsXG4gICAgICAgIGlzWWllbGQ6IGlzWWllbGQsXG4gICAgICAgIFJFQUNUX1lJRUxEX1RZUEU6IFJFQUNUX1lJRUxEX1RZUEVfMSxcbiAgICAgICAgUkVBQ1RfQ09ST1VUSU5FX1RZUEU6IFJFQUNUX0NPUk9VVElORV9UWVBFXzFcbiAgICB9LCBSRUFDVF9DT1JPVVRJTkVfVFlQRSA9IFJlYWN0Q29yb3V0aW5lLlJFQUNUX0NPUk9VVElORV9UWVBFLCBSRUFDVF9ZSUVMRF9UWVBFID0gUmVhY3RDb3JvdXRpbmUuUkVBQ1RfWUlFTERfVFlQRSwgUkVBQ1RfUE9SVEFMX1RZUEUkMSA9IFJlYWN0UG9ydGFsLlJFQUNUX1BPUlRBTF9UWVBFLCBfcmVxdWlyZTMkMiA9IFJlYWN0RGVidWdDdXJyZW50RmliZXJfMSwgZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSQxID0gX3JlcXVpcmUzJDIuZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSwgd2FybmluZyQ4ID0gcmVxdWlyZSQkMCwgZGlkV2FybkFib3V0TWFwcyA9ICExLCBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fSwgd2FybkZvck1pc3NpbmdLZXkgPSBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBpZiAobnVsbCAhPT0gY2hpbGQgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgY2hpbGQgJiYgY2hpbGQuX3N0b3JlICYmICFjaGlsZC5fc3RvcmUudmFsaWRhdGVkICYmIG51bGwgPT0gY2hpbGQua2V5KSB7XG4gICAgICAgICAgICBpbnZhcmlhbnQoXCJvYmplY3RcIiA9PSB0eXBlb2YgY2hpbGQuX3N0b3JlLCBcIlJlYWN0IENvbXBvbmVudCBpbiB3YXJuRm9yTWlzc2luZ0tleSBzaG91bGQgaGF2ZSBhIF9zdG9yZS4gXCIgKyBcIlRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpLCBcbiAgICAgICAgICAgIGNoaWxkLl9zdG9yZS52YWxpZGF0ZWQgPSAhMDtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvID0gXCJFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlIFwiICsgJ1wia2V5XCIgcHJvcC4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciAnICsgXCJtb3JlIGluZm9ybWF0aW9uLlwiICsgKGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMSgpIHx8IFwiXCIpO1xuICAgICAgICAgICAgb3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dIHx8IChvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10gPSAhMCwgXG4gICAgICAgICAgICB3YXJuaW5nJDgoITEsIFwiRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcIiArICdcImtleVwiIHByb3AuIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgJyArIFwibW9yZSBpbmZvcm1hdGlvbi4lc1wiLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDEoKSkpO1xuICAgICAgICB9XG4gICAgfSwgY3JlYXRlV29ya0luUHJvZ3Jlc3MkMiA9IFJlYWN0RmliZXIuY3JlYXRlV29ya0luUHJvZ3Jlc3MsIGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnQkMSA9IFJlYWN0RmliZXIuY3JlYXRlRmliZXJGcm9tRWxlbWVudCwgY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQkMSA9IFJlYWN0RmliZXIuY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQsIGNyZWF0ZUZpYmVyRnJvbVRleHQkMSA9IFJlYWN0RmliZXIuY3JlYXRlRmliZXJGcm9tVGV4dCwgY3JlYXRlRmliZXJGcm9tQ29yb3V0aW5lJDEgPSBSZWFjdEZpYmVyLmNyZWF0ZUZpYmVyRnJvbUNvcm91dGluZSwgY3JlYXRlRmliZXJGcm9tWWllbGQkMSA9IFJlYWN0RmliZXIuY3JlYXRlRmliZXJGcm9tWWllbGQsIGNyZWF0ZUZpYmVyRnJvbVBvcnRhbCQxID0gUmVhY3RGaWJlci5jcmVhdGVGaWJlckZyb21Qb3J0YWwsIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5LCBGdW5jdGlvbmFsQ29tcG9uZW50JDIgPSBSZWFjdFR5cGVPZldvcmsuRnVuY3Rpb25hbENvbXBvbmVudCwgQ2xhc3NDb21wb25lbnQkNyA9IFJlYWN0VHlwZU9mV29yay5DbGFzc0NvbXBvbmVudCwgSG9zdFRleHQkNCA9IFJlYWN0VHlwZU9mV29yay5Ib3N0VGV4dCwgSG9zdFBvcnRhbCQ1ID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RQb3J0YWwsIENvcm91dGluZUNvbXBvbmVudCQyID0gUmVhY3RUeXBlT2ZXb3JrLkNvcm91dGluZUNvbXBvbmVudCwgWWllbGRDb21wb25lbnQkMyA9IFJlYWN0VHlwZU9mV29yay5ZaWVsZENvbXBvbmVudCwgRnJhZ21lbnQkMyA9IFJlYWN0VHlwZU9mV29yay5GcmFnbWVudCwgTm9FZmZlY3QkMiA9IFJlYWN0VHlwZU9mU2lkZUVmZmVjdC5Ob0VmZmVjdCwgUGxhY2VtZW50JDMgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuUGxhY2VtZW50LCBEZWxldGlvbiQxID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LkRlbGV0aW9uLCBJVEVSQVRPUl9TWU1CT0wgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3IsIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5mb3IgJiYgU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIikgfHwgNjAxMDM7XG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gICAgICAgIGlmIChudWxsID09PSBtYXliZUl0ZXJhYmxlIHx8IHZvaWQgMCA9PT0gbWF5YmVJdGVyYWJsZSkgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW1wiQEBpdGVyYXRvclwiXTtcbiAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaXRlcmF0b3JGbiA/IGl0ZXJhdG9yRm4gOiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb2VyY2VSZWYoY3VycmVudCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgbWl4ZWRSZWYgPSBlbGVtZW50LnJlZjtcbiAgICAgICAgaWYgKG51bGwgIT09IG1peGVkUmVmICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgbWl4ZWRSZWYpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Ll9vd25lcikge1xuICAgICAgICAgICAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyLCBpbnN0ID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGlmIChvd25lcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3duZXJGaWJlciA9IG93bmVyO1xuICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQob3duZXJGaWJlci50YWcgPT09IENsYXNzQ29tcG9uZW50JDcsIFwiU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGhhdmUgcmVmcy5cIiksIFxuICAgICAgICAgICAgICAgICAgICBpbnN0ID0gb3duZXJGaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGludmFyaWFudChpbnN0LCBcIk1pc3Npbmcgb3duZXIgZm9yIHN0cmluZyByZWYgJXMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIFwiICsgXCJidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiLCBtaXhlZFJlZik7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZ1JlZiA9IFwiXCIgKyBtaXhlZFJlZjtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50LnJlZiAmJiBjdXJyZW50LnJlZi5fc3RyaW5nUmVmID09PSBzdHJpbmdSZWYpIHJldHVybiBjdXJyZW50LnJlZjtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnMgPSBpbnN0LnJlZnMgPT09IGVtcHR5T2JqZWN0ID8gaW5zdC5yZWZzID0ge30gOiBpbnN0LnJlZnM7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgPT09IHZhbHVlID8gZGVsZXRlIHJlZnNbc3RyaW5nUmVmXSA6IHJlZnNbc3RyaW5nUmVmXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZi5fc3RyaW5nUmVmID0gc3RyaW5nUmVmLCByZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnZhcmlhbnQoXCJzdHJpbmdcIiA9PSB0eXBlb2YgbWl4ZWRSZWYsIFwiRXhwZWN0ZWQgcmVmIHRvIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmcuXCIpLCBcbiAgICAgICAgICAgIGludmFyaWFudChlbGVtZW50Ll9vd25lciwgXCJFbGVtZW50IHJlZiB3YXMgc3BlY2lmaWVkIGFzIGEgc3RyaW5nICglcykgYnV0IG5vIG93bmVyIHdhcyBcIiArIFwic2V0LiBZb3UgbWF5IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZC4gXCIgKyBcIihkZXRhaWxzOiBodHRwczovL2ZiLm1lL3JlYWN0LXJlZnMtbXVzdC1oYXZlLW93bmVyKS5cIiwgbWl4ZWRSZWYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaXhlZFJlZjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCkge1xuICAgICAgICBpZiAoXCJ0ZXh0YXJlYVwiICE9PSByZXR1cm5GaWJlci50eXBlKSB7XG4gICAgICAgICAgICB2YXIgYWRkZW5kdW0gPSBcIlwiO1xuICAgICAgICAgICAgYWRkZW5kdW0gPSBcIiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IFwiICsgXCJpbnN0ZWFkLlwiICsgKGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMSgpIHx8IFwiXCIpLCBcbiAgICAgICAgICAgIGludmFyaWFudCghMSwgXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lc1wiLCBcIltvYmplY3QgT2JqZWN0XVwiID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3Q2hpbGQpID8gXCJvYmplY3Qgd2l0aCBrZXlzIHtcIiArIE9iamVjdC5rZXlzKG5ld0NoaWxkKS5qb2luKFwiLCBcIikgKyBcIn1cIiA6IG5ld0NoaWxkLCBhZGRlbmR1bSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd2Fybk9uRnVuY3Rpb25UeXBlKCkge1xuICAgICAgICB3YXJuaW5nJDgoITEsIFwiRnVuY3Rpb25zIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZC4gVGhpcyBtYXkgaGFwcGVuIGlmIFwiICsgXCJ5b3UgcmV0dXJuIGEgQ29tcG9uZW50IGluc3RlYWQgb2YgPENvbXBvbmVudCAvPiBmcm9tIHJlbmRlci4gXCIgKyBcIk9yIG1heWJlIHlvdSBtZWFudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmF0aGVyIHRoYW4gcmV0dXJuIGl0LiVzXCIsIGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0kMSgpIHx8IFwiXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBDaGlsZFJlY29uY2lsZXIoc2hvdWxkQ2xvbmUsIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGRDbG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gY2hpbGRUb0RlbGV0ZS5hbHRlcm5hdGUpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRUb0RlbGV0ZSA9IGNoaWxkVG9EZWxldGUuYWx0ZXJuYXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHJldHVybkZpYmVyLmxhc3RFZmZlY3Q7XG4gICAgICAgICAgICAgICAgbnVsbCAhPT0gbGFzdCA/IChsYXN0Lm5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlLCByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gY2hpbGRUb0RlbGV0ZSkgOiByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjaGlsZFRvRGVsZXRlLCBcbiAgICAgICAgICAgICAgICBjaGlsZFRvRGVsZXRlLm5leHRFZmZlY3QgPSBudWxsLCBjaGlsZFRvRGVsZXRlLmVmZmVjdFRhZyA9IERlbGV0aW9uJDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgICAgICAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgZm9yICh2YXIgY2hpbGRUb0RlbGV0ZSA9IGN1cnJlbnRGaXJzdENoaWxkOyBudWxsICE9PSBjaGlsZFRvRGVsZXRlOyApIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKSwgXG4gICAgICAgICAgICBjaGlsZFRvRGVsZXRlID0gY2hpbGRUb0RlbGV0ZS5zaWJsaW5nO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFwUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBleGlzdGluZ0NoaWxkcmVuID0gbmV3IE1hcCgpLCBleGlzdGluZ0NoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQ7IG51bGwgIT09IGV4aXN0aW5nQ2hpbGQ7ICkgbnVsbCAhPT0gZXhpc3RpbmdDaGlsZC5rZXkgPyBleGlzdGluZ0NoaWxkcmVuLnNldChleGlzdGluZ0NoaWxkLmtleSwgZXhpc3RpbmdDaGlsZCkgOiBleGlzdGluZ0NoaWxkcmVuLnNldChleGlzdGluZ0NoaWxkLmluZGV4LCBleGlzdGluZ0NoaWxkKSwgXG4gICAgICAgICAgICBleGlzdGluZ0NoaWxkID0gZXhpc3RpbmdDaGlsZC5zaWJsaW5nO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXNlRmliZXIoZmliZXIsIHByaW9yaXR5KSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2xvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xvbmUgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyQyKGZpYmVyLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lLmluZGV4ID0gMCwgY2xvbmUuc2libGluZyA9IG51bGwsIGNsb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpYmVyLnBlbmRpbmdXb3JrUHJpb3JpdHkgPSBwcmlvcml0eSwgZmliZXIuZWZmZWN0VGFnID0gTm9FZmZlY3QkMiwgZmliZXIuaW5kZXggPSAwLCBcbiAgICAgICAgICAgIGZpYmVyLnNpYmxpbmcgPSBudWxsLCBmaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgICAgICAgICBpZiAobmV3RmliZXIuaW5kZXggPSBuZXdJbmRleCwgIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IG5ld0ZpYmVyLmFsdGVybmF0ZTtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZEluZGV4ID0gY3VycmVudC5pbmRleDtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2xkSW5kZXggPCBsYXN0UGxhY2VkSW5kZXggPyAobmV3RmliZXIuZWZmZWN0VGFnID0gUGxhY2VtZW50JDMsIGxhc3RQbGFjZWRJbmRleCkgOiBvbGRJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdGaWJlci5lZmZlY3RUYWcgPSBQbGFjZW1lbnQkMywgbGFzdFBsYWNlZEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBsYWNlU2luZ2xlQ2hpbGQobmV3RmliZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJiAobmV3RmliZXIuZWZmZWN0VGFnID0gUGxhY2VtZW50JDMpLCBcbiAgICAgICAgICAgIG5ld0ZpYmVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50LCB0ZXh0Q29udGVudCwgcHJpb3JpdHkpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IGN1cnJlbnQudGFnICE9PSBIb3N0VGV4dCQ0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21UZXh0JDEodGV4dENvbnRlbnQsIHJldHVybkZpYmVyLmludGVybmFsQ29udGV4dFRhZywgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyLCBjcmVhdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nLnBlbmRpbmdQcm9wcyA9IHRleHRDb250ZW50LCBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlciwgZXhpc3Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudChyZXR1cm5GaWJlciwgY3VycmVudCwgZWxlbWVudCwgcHJpb3JpdHkpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IGN1cnJlbnQudHlwZSAhPT0gZWxlbWVudC50eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21FbGVtZW50JDEoZWxlbWVudCwgcmV0dXJuRmliZXIuaW50ZXJuYWxDb250ZXh0VGFnLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZWQucmVmID0gY29lcmNlUmVmKGN1cnJlbnQsIGVsZW1lbnQpLCBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyLCBcbiAgICAgICAgICAgICAgICBjcmVhdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nLnJlZiA9IGNvZXJjZVJlZihjdXJyZW50LCBlbGVtZW50KSwgZXhpc3RpbmcucGVuZGluZ1Byb3BzID0gZWxlbWVudC5wcm9wcywgXG4gICAgICAgICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlciwgZXhpc3RpbmcuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlLCBleGlzdGluZy5fZGVidWdPd25lciA9IGVsZW1lbnQuX293bmVyLCBcbiAgICAgICAgICAgIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvcm91dGluZShyZXR1cm5GaWJlciwgY3VycmVudCwgY29yb3V0aW5lLCBwcmlvcml0eSkge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgY3VycmVudC50YWcgIT09IENvcm91dGluZUNvbXBvbmVudCQyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21Db3JvdXRpbmUkMShjb3JvdXRpbmUsIHJldHVybkZpYmVyLmludGVybmFsQ29udGV4dFRhZywgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyLCBjcmVhdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nLnBlbmRpbmdQcm9wcyA9IGNvcm91dGluZSwgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXIsIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVlpZWxkKHJldHVybkZpYmVyLCBjdXJyZW50LCB5aWVsZE5vZGUsIHByaW9yaXR5KSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCB8fCBjdXJyZW50LnRhZyAhPT0gWWllbGRDb21wb25lbnQkMykge1xuICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tWWllbGQkMSh5aWVsZE5vZGUsIHJldHVybkZpYmVyLmludGVybmFsQ29udGV4dFRhZywgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVkLnR5cGUgPSB5aWVsZE5vZGUudmFsdWUsIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXIsIGNyZWF0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50LCBwcmlvcml0eSk7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmcudHlwZSA9IHlpZWxkTm9kZS52YWx1ZSwgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXIsIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudCwgcG9ydGFsLCBwcmlvcml0eSkge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgY3VycmVudC50YWcgIT09IEhvc3RQb3J0YWwkNSB8fCBjdXJyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBwb3J0YWwuY29udGFpbmVySW5mbyB8fCBjdXJyZW50LnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiAhPT0gcG9ydGFsLmltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwkMShwb3J0YWwsIHJldHVybkZpYmVyLmludGVybmFsQ29udGV4dFRhZywgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyLCBjcmVhdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nLnBlbmRpbmdQcm9wcyA9IHBvcnRhbC5jaGlsZHJlbiB8fCBbXSwgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXIsIFxuICAgICAgICAgICAgZXhpc3Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGZyYWdtZW50LCBwcmlvcml0eSkge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgY3VycmVudC50YWcgIT09IEZyYWdtZW50JDMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50JDEoZnJhZ21lbnQsIHJldHVybkZpYmVyLmludGVybmFsQ29udGV4dFRhZywgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyLCBjcmVhdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nLnBlbmRpbmdQcm9wcyA9IGZyYWdtZW50LCBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlciwgZXhpc3Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkLCBwcmlvcml0eSkge1xuICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIG5ld0NoaWxkIHx8IFwibnVtYmVyXCIgPT0gdHlwZW9mIG5ld0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21UZXh0JDEoXCJcIiArIG5ld0NoaWxkLCByZXR1cm5GaWJlci5pbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlciwgY3JlYXRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgICAgICAgICAgICB2YXIgX2NyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21FbGVtZW50JDEobmV3Q2hpbGQsIHJldHVybkZpYmVyLmludGVybmFsQ29udGV4dFRhZywgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZWQucmVmID0gY29lcmNlUmVmKG51bGwsIG5ld0NoaWxkKSwgX2NyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXIsIFxuICAgICAgICAgICAgICAgICAgICBfY3JlYXRlZDtcblxuICAgICAgICAgICAgICAgICAgY2FzZSBSRUFDVF9DT1JPVVRJTkVfVFlQRTpcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9jcmVhdGVkMiA9IGNyZWF0ZUZpYmVyRnJvbUNvcm91dGluZSQxKG5ld0NoaWxkLCByZXR1cm5GaWJlci5pbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVkMi5yZXR1cm4gPSByZXR1cm5GaWJlciwgX2NyZWF0ZWQyO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX1lJRUxEX1RZUEU6XG4gICAgICAgICAgICAgICAgICAgIHZhciBfY3JlYXRlZDMgPSBjcmVhdGVGaWJlckZyb21ZaWVsZCQxKG5ld0NoaWxkLCByZXR1cm5GaWJlci5pbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVkMy50eXBlID0gbmV3Q2hpbGQudmFsdWUsIF9jcmVhdGVkMy5yZXR1cm4gPSByZXR1cm5GaWJlciwgX2NyZWF0ZWQzO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFJDE6XG4gICAgICAgICAgICAgICAgICAgIHZhciBfY3JlYXRlZDQgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwkMShuZXdDaGlsZCwgcmV0dXJuRmliZXIuaW50ZXJuYWxDb250ZXh0VGFnLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlZDQucmV0dXJuID0gcmV0dXJuRmliZXIsIF9jcmVhdGVkNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfY3JlYXRlZDUgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudCQxKG5ld0NoaWxkLCByZXR1cm5GaWJlci5pbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVkNS5yZXR1cm4gPSByZXR1cm5GaWJlciwgX2NyZWF0ZWQ1O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG5ld0NoaWxkICYmIHdhcm5PbkZ1bmN0aW9uVHlwZSgpLCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgcHJpb3JpdHkpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBudWxsICE9PSBvbGRGaWJlciA/IG9sZEZpYmVyLmtleSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgbmV3Q2hpbGQgfHwgXCJudW1iZXJcIiA9PSB0eXBlb2YgbmV3Q2hpbGQpIHJldHVybiBudWxsICE9PSBrZXkgPyBudWxsIDogdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBcIlwiICsgbmV3Q2hpbGQsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3Q2hpbGQua2V5ID09PSBrZXkgPyB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIHByaW9yaXR5KSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09ST1VUSU5FX1RZUEU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdDaGlsZC5rZXkgPT09IGtleSA/IHVwZGF0ZUNvcm91dGluZShyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBwcmlvcml0eSkgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX1lJRUxEX1RZUEU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09PSBrZXkgPyB1cGRhdGVZaWVsZChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBwcmlvcml0eSkgOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFJDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdDaGlsZC5rZXkgPT09IGtleSA/IHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBwcmlvcml0eSkgOiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNBcnJheShuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHJldHVybiBudWxsICE9PSBrZXkgPyBudWxsIDogdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbmV3Q2hpbGQgJiYgd2Fybk9uRnVuY3Rpb25UeXBlKCksIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRnJvbU1hcChleGlzdGluZ0NoaWxkcmVuLCByZXR1cm5GaWJlciwgbmV3SWR4LCBuZXdDaGlsZCwgcHJpb3JpdHkpIHtcbiAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBuZXdDaGlsZCB8fCBcIm51bWJlclwiID09IHR5cGVvZiBuZXdDaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3SWR4KSB8fCBudWxsLCBcIlwiICsgbmV3Q2hpbGQsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlRWxlbWVudChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbi5nZXQobnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5KSB8fCBudWxsLCBuZXdDaGlsZCwgcHJpb3JpdHkpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPUk9VVElORV9UWVBFOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlQ29yb3V0aW5lKHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLmdldChudWxsID09PSBuZXdDaGlsZC5rZXkgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXkpIHx8IG51bGwsIG5ld0NoaWxkLCBwcmlvcml0eSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfWUlFTERfVFlQRTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVlpZWxkKHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdJZHgpIHx8IG51bGwsIG5ld0NoaWxkLCBwcmlvcml0eSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEUkMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbi5nZXQobnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5KSB8fCBudWxsLCBuZXdDaGlsZCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNBcnJheShuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdJZHgpIHx8IG51bGwsIG5ld0NoaWxkLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbmV3Q2hpbGQgJiYgd2Fybk9uRnVuY3Rpb25UeXBlKCksIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gd2Fybk9uSW52YWxpZEtleShjaGlsZCwga25vd25LZXlzKSB7XG4gICAgICAgICAgICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgY2hpbGQgfHwgbnVsbCA9PT0gY2hpbGQpIHJldHVybiBrbm93bktleXM7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPUk9VVElORV9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFJDE6XG4gICAgICAgICAgICAgICAgd2FybkZvck1pc3NpbmdLZXkoY2hpbGQpO1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGtleSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IGtub3duS2V5cykge1xuICAgICAgICAgICAgICAgICAgICBrbm93bktleXMgPSBuZXcgU2V0KCksIGtub3duS2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgha25vd25LZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGtub3duS2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm5pbmckOCghMSwgXCJFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksIGAlc2AuIFwiICsgXCJLZXlzIHNob3VsZCBiZSB1bmlxdWUgc28gdGhhdCBjb21wb25lbnRzIG1haW50YWluIHRoZWlyIGlkZW50aXR5IFwiICsgXCJhY3Jvc3MgdXBkYXRlcy4gTm9uLXVuaXF1ZSBrZXlzIG1heSBjYXVzZSBjaGlsZHJlbiB0byBiZSBcIiArIFwiZHVwbGljYXRlZCBhbmQvb3Igb21pdHRlZCDigJQgdGhlIGJlaGF2aW9yIGlzIHVuc3VwcG9ydGVkIGFuZCBcIiArIFwiY291bGQgY2hhbmdlIGluIGEgZnV0dXJlIHZlcnNpb24uJXNcIiwga2V5LCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDEoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga25vd25LZXlzO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZHJlbiwgcHJpb3JpdHkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtub3duS2V5cyA9IG51bGwsIGkgPSAwOyBpIDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBrbm93bktleXMgPSB3YXJuT25JbnZhbGlkS2V5KG5ld0NoaWxkcmVuW2ldLCBrbm93bktleXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLCBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLCBsYXN0UGxhY2VkSW5kZXggPSAwLCBuZXdJZHggPSAwLCBuZXh0T2xkRmliZXIgPSBudWxsOyBudWxsICE9PSBvbGRGaWJlciAmJiBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKSB7XG4gICAgICAgICAgICAgICAgb2xkRmliZXIuaW5kZXggPiBuZXdJZHggPyAobmV4dE9sZEZpYmVyID0gb2xkRmliZXIsIG9sZEZpYmVyID0gbnVsbCkgOiBuZXh0T2xkRmliZXIgPSBvbGRGaWJlci5zaWJsaW5nO1xuICAgICAgICAgICAgICAgIHZhciBuZXdGaWJlciA9IHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZHJlbltuZXdJZHhdLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IG5ld0ZpYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgPT09IG9sZEZpYmVyICYmIChvbGRGaWJlciA9IG5leHRPbGRGaWJlcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmIG9sZEZpYmVyICYmIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJiBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgb2xkRmliZXIpLCBcbiAgICAgICAgICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCksIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXIgPyByZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXIgOiBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXdGaWJlciwgXG4gICAgICAgICAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyLCBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdJZHggPT09IG5ld0NoaWxkcmVuLmxlbmd0aCkgcmV0dXJuIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksIFxuICAgICAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBvbGRGaWJlcikge1xuICAgICAgICAgICAgICAgIGZvciAoO25ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9uZXdGaWJlciA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZHJlbltuZXdJZHhdLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIF9uZXdGaWJlciAmJiAobGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChfbmV3RmliZXIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KSwgXG4gICAgICAgICAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXIgPyByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyIDogcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gX25ld0ZpYmVyLCBcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IF9uZXdGaWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgZXhpc3RpbmdDaGlsZHJlbiA9IG1hcFJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlcik7IG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX25ld0ZpYmVyMiA9IHVwZGF0ZUZyb21NYXAoZXhpc3RpbmdDaGlsZHJlbiwgcmV0dXJuRmliZXIsIG5ld0lkeCwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgIF9uZXdGaWJlcjIgJiYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiYgbnVsbCAhPT0gX25ld0ZpYmVyMi5hbHRlcm5hdGUgJiYgZXhpc3RpbmdDaGlsZHJlbi5kZWxldGUobnVsbCA9PT0gX25ld0ZpYmVyMi5rZXkgPyBuZXdJZHggOiBfbmV3RmliZXIyLmtleSksIFxuICAgICAgICAgICAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQoX25ld0ZpYmVyMiwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpLCBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyID8gcmVzdWx0aW5nRmlyc3RDaGlsZCA9IF9uZXdGaWJlcjIgOiBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBfbmV3RmliZXIyLCBcbiAgICAgICAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gX25ld0ZpYmVyMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJiBleGlzdGluZ0NoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgICAgICAgIH0pLCByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuSXRlcmF0b3IocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZHJlbkl0ZXJhYmxlLCBwcmlvcml0eSkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgICAgICAgICAgaWYgKGludmFyaWFudChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGl0ZXJhdG9yRm4sIFwiQW4gb2JqZWN0IGlzIG5vdCBhbiBpdGVyYWJsZS4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFwiICsgXCJSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpLCBcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbmV3Q2hpbGRyZW5JdGVyYWJsZS5lbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRyZW5JdGVyYWJsZS5lbnRyaWVzID09PSBpdGVyYXRvckZuICYmICh3YXJuaW5nJDgoZGlkV2FybkFib3V0TWFwcywgXCJVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIHVuc3VwcG9ydGVkIGFuZCB3aWxsIGxpa2VseSB5aWVsZCBcIiArIFwidW5leHBlY3RlZCByZXN1bHRzLiBDb252ZXJ0IGl0IHRvIGEgc2VxdWVuY2UvaXRlcmFibGUgb2Yga2V5ZWQgXCIgKyBcIlJlYWN0RWxlbWVudHMgaW5zdGVhZC4lc1wiLCBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtJDEoKSksIFxuICAgICAgICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSAhMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX25ld0NoaWxkcmVuID0gaXRlcmF0b3JGbi5jYWxsKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgICAgICAgICAgaWYgKF9uZXdDaGlsZHJlbikgZm9yICh2YXIga25vd25LZXlzID0gbnVsbCwgX3N0ZXAgPSBfbmV3Q2hpbGRyZW4ubmV4dCgpOyAhX3N0ZXAuZG9uZTsgX3N0ZXAgPSBfbmV3Q2hpbGRyZW4ubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAga25vd25LZXlzID0gd2Fybk9uSW52YWxpZEtleShjaGlsZCwga25vd25LZXlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IGl0ZXJhdG9yRm4uY2FsbChuZXdDaGlsZHJlbkl0ZXJhYmxlKTtcbiAgICAgICAgICAgIGludmFyaWFudChudWxsICE9IG5ld0NoaWxkcmVuLCBcIkFuIGl0ZXJhYmxlIG9iamVjdCBwcm92aWRlZCBubyBpdGVyYXRvci5cIik7XG4gICAgICAgICAgICBmb3IgKHZhciByZXN1bHRpbmdGaXJzdENoaWxkID0gbnVsbCwgcHJldmlvdXNOZXdGaWJlciA9IG51bGwsIG9sZEZpYmVyID0gY3VycmVudEZpcnN0Q2hpbGQsIGxhc3RQbGFjZWRJbmRleCA9IDAsIG5ld0lkeCA9IDAsIG5leHRPbGRGaWJlciA9IG51bGwsIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCk7IG51bGwgIT09IG9sZEZpYmVyICYmICFzdGVwLmRvbmU7IG5ld0lkeCsrLCBcbiAgICAgICAgICAgIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICBvbGRGaWJlci5pbmRleCA+IG5ld0lkeCA/IChuZXh0T2xkRmliZXIgPSBvbGRGaWJlciwgb2xkRmliZXIgPSBudWxsKSA6IG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmc7XG4gICAgICAgICAgICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIHN0ZXAudmFsdWUsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gbmV3RmliZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkRmliZXIgfHwgKG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiYgb2xkRmliZXIgJiYgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlciksIFxuICAgICAgICAgICAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KSwgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlciA/IHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlciA6IHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyLCBcbiAgICAgICAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gbmV3RmliZXIsIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0ZXAuZG9uZSkgcmV0dXJuIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gb2xkRmliZXIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKDshc3RlcC5kb25lOyBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX25ld0ZpYmVyMyA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBzdGVwLnZhbHVlLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IF9uZXdGaWJlcjMgJiYgKGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQoX25ld0ZpYmVyMywgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpLCBcbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlciA/IHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBfbmV3RmliZXIzIDogcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gX25ld0ZpYmVyMywgXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBfbmV3RmliZXIzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBleGlzdGluZ0NoaWxkcmVuID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKTsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIFxuICAgICAgICAgICAgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBfbmV3RmliZXI0ID0gdXBkYXRlRnJvbU1hcChleGlzdGluZ0NoaWxkcmVuLCByZXR1cm5GaWJlciwgbmV3SWR4LCBzdGVwLnZhbHVlLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgbnVsbCAhPT0gX25ld0ZpYmVyNCAmJiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJiBudWxsICE9PSBfbmV3RmliZXI0LmFsdGVybmF0ZSAmJiBleGlzdGluZ0NoaWxkcmVuLmRlbGV0ZShudWxsID09PSBfbmV3RmliZXI0LmtleSA/IG5ld0lkeCA6IF9uZXdGaWJlcjQua2V5KSwgXG4gICAgICAgICAgICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChfbmV3RmliZXI0LCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCksIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXIgPyByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyNCA6IHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IF9uZXdGaWJlcjQsIFxuICAgICAgICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBfbmV3RmliZXI0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmIGV4aXN0aW5nQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgICAgICAgfSksIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVjb25jaWxlU2luZ2xlVGV4dE5vZGUocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCB0ZXh0Q29udGVudCwgcHJpb3JpdHkpIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZCAmJiBjdXJyZW50Rmlyc3RDaGlsZC50YWcgPT09IEhvc3RUZXh0JDQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyk7XG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudEZpcnN0Q2hpbGQsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmcucGVuZGluZ1Byb3BzID0gdGV4dENvbnRlbnQsIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyLCBleGlzdGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVRleHQkMSh0ZXh0Q29udGVudCwgcmV0dXJuRmliZXIuaW50ZXJuYWxDb250ZXh0VGFnLCBwcmlvcml0eSk7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlciwgY3JlYXRlZDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZWNvbmNpbGVTaW5nbGVFbGVtZW50KHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgZWxlbWVudCwgcHJpb3JpdHkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSA9IGVsZW1lbnQua2V5LCBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkOyBudWxsICE9PSBjaGlsZDsgKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBlbGVtZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZC5zaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGNoaWxkLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmcucmVmID0gY29lcmNlUmVmKGNoaWxkLCBlbGVtZW50KSwgZXhpc3RpbmcucGVuZGluZ1Byb3BzID0gZWxlbWVudC5wcm9wcywgXG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlciwgZXhpc3RpbmcuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlLCBleGlzdGluZy5fZGVidWdPd25lciA9IGVsZW1lbnQuX293bmVyLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpLCBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnQkMShlbGVtZW50LCByZXR1cm5GaWJlci5pbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVkLnJlZiA9IGNvZXJjZVJlZihjdXJyZW50Rmlyc3RDaGlsZCwgZWxlbWVudCksIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXIsIFxuICAgICAgICAgICAgY3JlYXRlZDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZWNvbmNpbGVTaW5nbGVDb3JvdXRpbmUocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBjb3JvdXRpbmUsIHByaW9yaXR5KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgPSBjb3JvdXRpbmUua2V5LCBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkOyBudWxsICE9PSBjaGlsZDsgKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50YWcgPT09IENvcm91dGluZUNvbXBvbmVudCQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjaGlsZCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nLnBlbmRpbmdQcm9wcyA9IGNvcm91dGluZSwgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXIsIGV4aXN0aW5nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpLCBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUNvcm91dGluZSQxKGNvcm91dGluZSwgcmV0dXJuRmliZXIuaW50ZXJuYWxDb250ZXh0VGFnLCBwcmlvcml0eSk7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlciwgY3JlYXRlZDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZWNvbmNpbGVTaW5nbGVZaWVsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIHlpZWxkTm9kZSwgcHJpb3JpdHkpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gWWllbGRDb21wb25lbnQkMykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGNoaWxkLCBwcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGluZy50eXBlID0geWllbGROb2RlLnZhbHVlLCBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlciwgZXhpc3Rpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVlpZWxkJDEoeWllbGROb2RlLCByZXR1cm5GaWJlci5pbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVkLnR5cGUgPSB5aWVsZE5vZGUudmFsdWUsIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXIsIGNyZWF0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVjb25jaWxlU2luZ2xlUG9ydGFsKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgcG9ydGFsLCBwcmlvcml0eSkge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5ID0gcG9ydGFsLmtleSwgY2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZDsgbnVsbCAhPT0gY2hpbGQ7ICkge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQudGFnID09PSBIb3N0UG9ydGFsJDUgJiYgY2hpbGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gPT09IHBvcnRhbC5jb250YWluZXJJbmZvICYmIGNoaWxkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiA9PT0gcG9ydGFsLmltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjaGlsZCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nLnBlbmRpbmdQcm9wcyA9IHBvcnRhbC5jaGlsZHJlbiB8fCBbXSwgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3Rpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCksIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsJDEocG9ydGFsLCByZXR1cm5GaWJlci5pbnRlcm5hbENvbnRleHRUYWcsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyLCBjcmVhdGVkO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkRmliZXJzKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIHByaW9yaXR5KSB7XG4gICAgICAgICAgICB2YXIgaXNPYmplY3QgPSBcIm9iamVjdFwiID09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZDtcbiAgICAgICAgICAgIGlmIChpc09iamVjdCkgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZWNvbmNpbGVTaW5nbGVFbGVtZW50KHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIHByaW9yaXR5KSk7XG5cbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9DT1JPVVRJTkVfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZWNvbmNpbGVTaW5nbGVDb3JvdXRpbmUocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgcHJpb3JpdHkpKTtcblxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1lJRUxEX1RZUEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmVjb25jaWxlU2luZ2xlWWllbGQocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgcHJpb3JpdHkpKTtcblxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFJDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmVjb25jaWxlU2luZ2xlUG9ydGFsKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIHByaW9yaXR5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgbmV3Q2hpbGQgfHwgXCJudW1iZXJcIiA9PSB0eXBlb2YgbmV3Q2hpbGQpIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJlY29uY2lsZVNpbmdsZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgXCJcIiArIG5ld0NoaWxkLCBwcmlvcml0eSkpO1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpKSByZXR1cm4gcmVjb25jaWxlQ2hpbGRyZW5BcnJheShyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBwcmlvcml0eSk7XG4gICAgICAgICAgICBpZiAoZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIHByaW9yaXR5KTtcbiAgICAgICAgICAgIGlmIChpc09iamVjdCAmJiB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBuZXdDaGlsZCAmJiB3YXJuT25GdW5jdGlvblR5cGUoKSwgXG4gICAgICAgICAgICB2b2lkIDAgPT09IG5ld0NoaWxkKSBzd2l0Y2ggKHJldHVybkZpYmVyLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIENsYXNzQ29tcG9uZW50JDc6XG4gICAgICAgICAgICAgICAgaWYgKHJldHVybkZpYmVyLnN0YXRlTm9kZS5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uKSBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIEZ1bmN0aW9uYWxDb21wb25lbnQkMjpcbiAgICAgICAgICAgICAgICB2YXIgQ29tcG9uZW50ID0gcmV0dXJuRmliZXIudHlwZTtcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoITEsIFwiJXMoLi4uKTogTm90aGluZyB3YXMgcmV0dXJuZWQgZnJvbSByZW5kZXIuIFRoaXMgdXN1YWxseSBtZWFucyBhIFwiICsgXCJyZXR1cm4gc3RhdGVtZW50IGlzIG1pc3NpbmcuIE9yLCB0byByZW5kZXIgbm90aGluZywgXCIgKyBcInJldHVybiBudWxsLlwiLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgXCJDb21wb25lbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRGaWJlcnM7XG4gICAgfVxuICAgIHZhciByZWNvbmNpbGVDaGlsZEZpYmVycyQxID0gQ2hpbGRSZWNvbmNpbGVyKCEwLCAhMCksIHJlY29uY2lsZUNoaWxkRmliZXJzSW5QbGFjZSQxID0gQ2hpbGRSZWNvbmNpbGVyKCExLCAhMCksIG1vdW50Q2hpbGRGaWJlcnNJblBsYWNlJDEgPSBDaGlsZFJlY29uY2lsZXIoITEsICExKSwgY2xvbmVDaGlsZEZpYmVycyQxID0gZnVuY3Rpb24oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgaWYgKGludmFyaWFudChudWxsID09PSBjdXJyZW50IHx8IHdvcmtJblByb2dyZXNzLmNoaWxkID09PSBjdXJyZW50LmNoaWxkLCBcIlJlc3VtaW5nIHdvcmsgbm90IHlldCBpbXBsZW1lbnRlZC5cIiksIFxuICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRDaGlsZCA9IHdvcmtJblByb2dyZXNzLmNoaWxkLCBuZXdDaGlsZCA9IGNyZWF0ZVdvcmtJblByb2dyZXNzJDIoY3VycmVudENoaWxkLCBjdXJyZW50Q2hpbGQucGVuZGluZ1dvcmtQcmlvcml0eSk7XG4gICAgICAgICAgICBmb3IgKG5ld0NoaWxkLnBlbmRpbmdQcm9wcyA9IGN1cnJlbnRDaGlsZC5wZW5kaW5nUHJvcHMsIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV3Q2hpbGQsIFxuICAgICAgICAgICAgbmV3Q2hpbGQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7IG51bGwgIT09IGN1cnJlbnRDaGlsZC5zaWJsaW5nOyApIGN1cnJlbnRDaGlsZCA9IGN1cnJlbnRDaGlsZC5zaWJsaW5nLCBcbiAgICAgICAgICAgIG5ld0NoaWxkID0gbmV3Q2hpbGQuc2libGluZyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzJDIoY3VycmVudENoaWxkLCBjdXJyZW50Q2hpbGQucGVuZGluZ1dvcmtQcmlvcml0eSksIFxuICAgICAgICAgICAgbmV3Q2hpbGQucGVuZGluZ1Byb3BzID0gY3VycmVudENoaWxkLnBlbmRpbmdQcm9wcywgbmV3Q2hpbGQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICBuZXdDaGlsZC5zaWJsaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sIFJlYWN0Q2hpbGRGaWJlciA9IHtcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRGaWJlcnM6IHJlY29uY2lsZUNoaWxkRmliZXJzJDEsXG4gICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzSW5QbGFjZTogcmVjb25jaWxlQ2hpbGRGaWJlcnNJblBsYWNlJDEsXG4gICAgICAgIG1vdW50Q2hpbGRGaWJlcnNJblBsYWNlOiBtb3VudENoaWxkRmliZXJzSW5QbGFjZSQxLFxuICAgICAgICBjbG9uZUNoaWxkRmliZXJzOiBjbG9uZUNoaWxkRmliZXJzJDFcbiAgICB9LCBVcGRhdGUkMSA9IFJlYWN0VHlwZU9mU2lkZUVmZmVjdC5VcGRhdGUsIEFzeW5jVXBkYXRlcyQxID0gUmVhY3RUeXBlT2ZJbnRlcm5hbENvbnRleHQuQXN5bmNVcGRhdGVzLCBjYWNoZUNvbnRleHQkMSA9IFJlYWN0RmliZXJDb250ZXh0LmNhY2hlQ29udGV4dCwgZ2V0TWFza2VkQ29udGV4dCQyID0gUmVhY3RGaWJlckNvbnRleHQuZ2V0TWFza2VkQ29udGV4dCwgZ2V0VW5tYXNrZWRDb250ZXh0JDIgPSBSZWFjdEZpYmVyQ29udGV4dC5nZXRVbm1hc2tlZENvbnRleHQsIGlzQ29udGV4dENvbnN1bWVyJDEgPSBSZWFjdEZpYmVyQ29udGV4dC5pc0NvbnRleHRDb25zdW1lciwgYWRkVXBkYXRlJDEgPSBSZWFjdEZpYmVyVXBkYXRlUXVldWUuYWRkVXBkYXRlLCBhZGRSZXBsYWNlVXBkYXRlJDEgPSBSZWFjdEZpYmVyVXBkYXRlUXVldWUuYWRkUmVwbGFjZVVwZGF0ZSwgYWRkRm9yY2VVcGRhdGUkMSA9IFJlYWN0RmliZXJVcGRhdGVRdWV1ZS5hZGRGb3JjZVVwZGF0ZSwgYmVnaW5VcGRhdGVRdWV1ZSQyID0gUmVhY3RGaWJlclVwZGF0ZVF1ZXVlLmJlZ2luVXBkYXRlUXVldWUsIF9yZXF1aXJlNSA9IFJlYWN0RmliZXJDb250ZXh0LCBoYXNDb250ZXh0Q2hhbmdlZCQyID0gX3JlcXVpcmU1Lmhhc0NvbnRleHRDaGFuZ2VkLCBpc01vdW50ZWQkMSA9IFJlYWN0RmliZXJUcmVlUmVmbGVjdGlvbi5pc01vdW50ZWQsIGZha2VJbnRlcm5hbEluc3RhbmNlID0ge30sIGlzQXJyYXkkMSA9IEFycmF5LmlzQXJyYXksIF9yZXF1aXJlNyQxID0gUmVhY3REZWJ1Z0ZpYmVyUGVyZl8xLCBzdGFydFBoYXNlVGltZXIkMSA9IF9yZXF1aXJlNyQxLnN0YXJ0UGhhc2VUaW1lciwgc3RvcFBoYXNlVGltZXIkMSA9IF9yZXF1aXJlNyQxLnN0b3BQaGFzZVRpbWVyLCB3YXJuaW5nJDkgPSByZXF1aXJlJCQwLCB3YXJuT25JbnZhbGlkQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgICAgICB3YXJuaW5nJDkobnVsbCA9PT0gY2FsbGJhY2sgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBjYWxsYmFjaywgXCIlcyguLi4pOiBFeHBlY3RlZCB0aGUgbGFzdCBvcHRpb25hbCBgY2FsbGJhY2tgIGFyZ3VtZW50IHRvIGJlIGEgXCIgKyBcImZ1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy5cIiwgY2FsbGVyTmFtZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZha2VJbnRlcm5hbEluc3RhbmNlLCBcIl9wcm9jZXNzQ2hpbGRDb250ZXh0XCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGludmFyaWFudCghMSwgXCJfcHJvY2Vzc0NoaWxkQ29udGV4dCBpcyBub3QgYXZhaWxhYmxlIGluIFJlYWN0IDE2Ky4gVGhpcyBsaWtlbHkgXCIgKyBcIm1lYW5zIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBhbmQgYXJlIGF0dGVtcHRpbmcgdG8gbmVzdCBcIiArIFwiYSBSZWFjdCAxNSB0cmVlIGluc2lkZSBhIFJlYWN0IDE2IHRyZWUgdXNpbmcgXCIgKyBcInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyLCB3aGljaCBpc24ndCBzdXBwb3J0ZWQuIFRyeSBcIiArIFwidG8gbWFrZSBzdXJlIHlvdSBoYXZlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QgKGFuZCBpZGVhbGx5LCBzd2l0Y2ggXCIgKyBcInRvIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbCkuXCIpO1xuICAgICAgICB9XG4gICAgfSksIE9iamVjdC5mcmVlemUoZmFrZUludGVybmFsSW5zdGFuY2UpO1xuICAgIHZhciBSZWFjdEZpYmVyQ2xhc3NDb21wb25lbnQgPSBmdW5jdGlvbihzY2hlZHVsZVVwZGF0ZSwgZ2V0UHJpb3JpdHlDb250ZXh0LCBtZW1vaXplUHJvcHMsIG1lbW9pemVTdGF0ZSkge1xuICAgICAgICB2YXIgdXBkYXRlciA9IHtcbiAgICAgICAgICAgIGlzTW91bnRlZDogaXNNb3VudGVkJDEsXG4gICAgICAgICAgICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uKGluc3RhbmNlLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpYmVyID0gUmVhY3RJbnN0YW5jZU1hcF8xLmdldChpbnN0YW5jZSksIHByaW9yaXR5TGV2ZWwgPSBnZXRQcmlvcml0eUNvbnRleHQoZmliZXIsICExKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHZvaWQgMCA9PT0gY2FsbGJhY2sgPyBudWxsIDogY2FsbGJhY2ssIHdhcm5PbkludmFsaWRDYWxsYmFjayhjYWxsYmFjaywgXCJzZXRTdGF0ZVwiKSwgXG4gICAgICAgICAgICAgICAgYWRkVXBkYXRlJDEoZmliZXIsIHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2ssIHByaW9yaXR5TGV2ZWwpLCBzY2hlZHVsZVVwZGF0ZShmaWJlciwgcHJpb3JpdHlMZXZlbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24oaW5zdGFuY2UsIHN0YXRlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBmaWJlciA9IFJlYWN0SW5zdGFuY2VNYXBfMS5nZXQoaW5zdGFuY2UpLCBwcmlvcml0eUxldmVsID0gZ2V0UHJpb3JpdHlDb250ZXh0KGZpYmVyLCAhMSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSB2b2lkIDAgPT09IGNhbGxiYWNrID8gbnVsbCA6IGNhbGxiYWNrLCB3YXJuT25JbnZhbGlkQ2FsbGJhY2soY2FsbGJhY2ssIFwicmVwbGFjZVN0YXRlXCIpLCBcbiAgICAgICAgICAgICAgICBhZGRSZXBsYWNlVXBkYXRlJDEoZmliZXIsIHN0YXRlLCBjYWxsYmFjaywgcHJpb3JpdHlMZXZlbCksIHNjaGVkdWxlVXBkYXRlKGZpYmVyLCBwcmlvcml0eUxldmVsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uKGluc3RhbmNlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBmaWJlciA9IFJlYWN0SW5zdGFuY2VNYXBfMS5nZXQoaW5zdGFuY2UpLCBwcmlvcml0eUxldmVsID0gZ2V0UHJpb3JpdHlDb250ZXh0KGZpYmVyLCAhMSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSB2b2lkIDAgPT09IGNhbGxiYWNrID8gbnVsbCA6IGNhbGxiYWNrLCB3YXJuT25JbnZhbGlkQ2FsbGJhY2soY2FsbGJhY2ssIFwiZm9yY2VVcGRhdGVcIiksIFxuICAgICAgICAgICAgICAgIGFkZEZvcmNlVXBkYXRlJDEoZmliZXIsIGNhbGxiYWNrLCBwcmlvcml0eUxldmVsKSwgc2NoZWR1bGVVcGRhdGUoZmliZXIsIHByaW9yaXR5TGV2ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgb2xkUHJvcHMsIG5ld1Byb3BzLCBvbGRTdGF0ZSwgbmV3U3RhdGUsIG5ld0NvbnRleHQpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBvbGRQcm9wcyB8fCBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSAmJiB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLCB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGluc3RhbmNlLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0UGhhc2VUaW1lciQxKHdvcmtJblByb2dyZXNzLCBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgc2hvdWxkVXBkYXRlID0gaW5zdGFuY2Uuc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV3Q29udGV4dCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0b3BQaGFzZVRpbWVyJDEoKSwgd2FybmluZyQ5KHZvaWQgMCAhPT0gc2hvdWxkVXBkYXRlLCBcIiVzLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpOiBSZXR1cm5lZCB1bmRlZmluZWQgaW5zdGVhZCBvZiBhIFwiICsgXCJib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuXCIsIGdldENvbXBvbmVudE5hbWVfMSh3b3JrSW5Qcm9ncmVzcykgfHwgXCJVbmtub3duXCIpLCBcbiAgICAgICAgICAgICAgICBzaG91bGRVcGRhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gIXR5cGUucHJvdG90eXBlIHx8ICF0eXBlLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCB8fCAoIXNoYWxsb3dFcXVhbChvbGRQcm9wcywgbmV3UHJvcHMpIHx8ICFzaGFsbG93RXF1YWwob2xkU3RhdGUsIG5ld1N0YXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUsIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlLCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZV8xKHdvcmtJblByb2dyZXNzKSwgcmVuZGVyUHJlc2VudCA9IGluc3RhbmNlLnJlbmRlcjtcbiAgICAgICAgICAgIHdhcm5pbmckOShyZW5kZXJQcmVzZW50LCBcIiVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50IFwiICsgXCJpbnN0YW5jZTogeW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBkZWZpbmUgYHJlbmRlcmAuXCIsIG5hbWUpO1xuICAgICAgICAgICAgdmFyIG5vR2V0SW5pdGlhbFN0YXRlT25FUzYgPSAhaW5zdGFuY2UuZ2V0SW5pdGlhbFN0YXRlIHx8IGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCB8fCBpbnN0YW5jZS5zdGF0ZTtcbiAgICAgICAgICAgIHdhcm5pbmckOShub0dldEluaXRpYWxTdGF0ZU9uRVM2LCBcImdldEluaXRpYWxTdGF0ZSB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiBcIiArIFwiVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiBcIiArIFwiRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/XCIsIG5hbWUpO1xuICAgICAgICAgICAgdmFyIG5vR2V0RGVmYXVsdFByb3BzT25FUzYgPSAhaW5zdGFuY2UuZ2V0RGVmYXVsdFByb3BzIHx8IGluc3RhbmNlLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZDtcbiAgICAgICAgICAgIHdhcm5pbmckOShub0dldERlZmF1bHRQcm9wc09uRVM2LCBcImdldERlZmF1bHRQcm9wcyB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiBcIiArIFwiVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiBcIiArIFwiVXNlIGEgc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBkZWZhdWx0UHJvcHMgaW5zdGVhZC5cIiwgbmFtZSk7XG4gICAgICAgICAgICB2YXIgbm9JbnN0YW5jZVByb3BUeXBlcyA9ICFpbnN0YW5jZS5wcm9wVHlwZXM7XG4gICAgICAgICAgICB3YXJuaW5nJDkobm9JbnN0YW5jZVByb3BUeXBlcywgXCJwcm9wVHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyBcIiArIFwicHJvcGVydHkgdG8gZGVmaW5lIHByb3BUeXBlcyBpbnN0ZWFkLlwiLCBuYW1lKTtcbiAgICAgICAgICAgIHZhciBub0luc3RhbmNlQ29udGV4dFR5cGVzID0gIWluc3RhbmNlLmNvbnRleHRUeXBlcztcbiAgICAgICAgICAgIHdhcm5pbmckOShub0luc3RhbmNlQ29udGV4dFR5cGVzLCBcImNvbnRleHRUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljIFwiICsgXCJwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuXCIsIG5hbWUpO1xuICAgICAgICAgICAgdmFyIG5vQ29tcG9uZW50U2hvdWxkVXBkYXRlID0gXCJmdW5jdGlvblwiICE9IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRTaG91bGRVcGRhdGU7XG4gICAgICAgICAgICB3YXJuaW5nJDkobm9Db21wb25lbnRTaG91bGRVcGRhdGUsIFwiJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBcIiArIFwiY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gXCIgKyBcIlRoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyBcIiArIFwiZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuXCIsIG5hbWUpLCBcbiAgICAgICAgICAgIHR5cGUucHJvdG90eXBlICYmIHR5cGUucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ICYmIHZvaWQgMCAhPT0gaW5zdGFuY2Uuc2hvdWxkQ29tcG9uZW50VXBkYXRlICYmIHdhcm5pbmckOSghMSwgXCIlcyBoYXMgYSBtZXRob2QgY2FsbGVkIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpLiBcIiArIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlIHNob3VsZCBub3QgYmUgdXNlZCB3aGVuIGV4dGVuZGluZyBSZWFjdC5QdXJlQ29tcG9uZW50LiBcIiArIFwiUGxlYXNlIGV4dGVuZCBSZWFjdC5Db21wb25lbnQgaWYgc2hvdWxkQ29tcG9uZW50VXBkYXRlIGlzIHVzZWQuXCIsIGdldENvbXBvbmVudE5hbWVfMSh3b3JrSW5Qcm9ncmVzcykgfHwgXCJBIHB1cmUgY29tcG9uZW50XCIpO1xuICAgICAgICAgICAgdmFyIG5vQ29tcG9uZW50RGlkVW5tb3VudCA9IFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVW5tb3VudDtcbiAgICAgICAgICAgIHdhcm5pbmckOShub0NvbXBvbmVudERpZFVubW91bnQsIFwiJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBcIiArIFwiY29tcG9uZW50RGlkVW5tb3VudCgpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiBcIiArIFwiRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxVbm1vdW50KCk/XCIsIG5hbWUpO1xuICAgICAgICAgICAgdmFyIG5vQ29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyA9IFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcztcbiAgICAgICAgICAgIHdhcm5pbmckOShub0NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMsIFwiJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBcIiArIFwiY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpP1wiLCBuYW1lKTtcbiAgICAgICAgICAgIHZhciBoYXNNdXRhdGVkUHJvcHMgPSBpbnN0YW5jZS5wcm9wcyAhPT0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgd2FybmluZyQ5KHZvaWQgMCA9PT0gaW5zdGFuY2UucHJvcHMgfHwgIWhhc011dGF0ZWRQcm9wcywgXCIlcyguLi4pOiBXaGVuIGNhbGxpbmcgc3VwZXIoKSBpbiBgJXNgLCBtYWtlIHN1cmUgdG8gcGFzcyBcIiArIFwidXAgdGhlIHNhbWUgcHJvcHMgdGhhdCB5b3VyIGNvbXBvbmVudCdzIGNvbnN0cnVjdG9yIHdhcyBwYXNzZWQuXCIsIG5hbWUsIG5hbWUpO1xuICAgICAgICAgICAgdmFyIG5vSW5zdGFuY2VEZWZhdWx0UHJvcHMgPSAhaW5zdGFuY2UuZGVmYXVsdFByb3BzO1xuICAgICAgICAgICAgd2FybmluZyQ5KG5vSW5zdGFuY2VEZWZhdWx0UHJvcHMsIFwiU2V0dGluZyBkZWZhdWx0UHJvcHMgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMgaXMgbm90IHN1cHBvcnRlZCBhbmQgd2lsbCBiZSBpZ25vcmVkLlwiICsgXCIgSW5zdGVhZCwgZGVmaW5lIGRlZmF1bHRQcm9wcyBhcyBhIHN0YXRpYyBwcm9wZXJ0eSBvbiAlcy5cIiwgbmFtZSwgbmFtZSk7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBpbnN0YW5jZS5zdGF0ZTtcbiAgICAgICAgICAgIHN0YXRlICYmIChcIm9iamVjdFwiICE9IHR5cGVvZiBzdGF0ZSB8fCBpc0FycmF5JDEoc3RhdGUpKSAmJiBpbnZhcmlhbnQoITEsIFwiJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsXCIsIGdldENvbXBvbmVudE5hbWVfMSh3b3JrSW5Qcm9ncmVzcykpLCBcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW5zdGFuY2UuZ2V0Q2hpbGRDb250ZXh0ICYmIGludmFyaWFudChcIm9iamVjdFwiID09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcy50eXBlLmNoaWxkQ29udGV4dFR5cGVzLCBcIiVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gXCIgKyBcInVzZSBnZXRDaGlsZENvbnRleHQoKS5cIiwgZ2V0Q29tcG9uZW50TmFtZV8xKHdvcmtJblByb2dyZXNzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRJbnB1dFBvaW50ZXJzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLCBpbnN0YW5jZS5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYWRvcHRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlciA9IHVwZGF0ZXIsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGluc3RhbmNlLCBSZWFjdEluc3RhbmNlTWFwXzEuc2V0KGluc3RhbmNlLCB3b3JrSW5Qcm9ncmVzcyksIFxuICAgICAgICAgICAgaW5zdGFuY2UuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IGZha2VJbnRlcm5hbEluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbnN0cnVjdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgY3RvciA9IHdvcmtJblByb2dyZXNzLnR5cGUsIHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCQyKHdvcmtJblByb2dyZXNzKSwgbmVlZHNDb250ZXh0ID0gaXNDb250ZXh0Q29uc3VtZXIkMSh3b3JrSW5Qcm9ncmVzcyksIGNvbnRleHQgPSBuZWVkc0NvbnRleHQgPyBnZXRNYXNrZWRDb250ZXh0JDIod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCkgOiBlbXB0eU9iamVjdCwgaW5zdGFuY2UgPSBuZXcgY3Rvcihwcm9wcywgY29udGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gYWRvcHRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSksIG5lZWRzQ29udGV4dCAmJiBjYWNoZUNvbnRleHQkMSh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0LCBjb250ZXh0KSwgXG4gICAgICAgICAgICBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjYWxsQ29tcG9uZW50V2lsbE1vdW50KHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgc3RhcnRQaGFzZVRpbWVyJDEod29ya0luUHJvZ3Jlc3MsIFwiY29tcG9uZW50V2lsbE1vdW50XCIpO1xuICAgICAgICAgICAgdmFyIG9sZFN0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG4gICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQoKSwgc3RvcFBoYXNlVGltZXIkMSgpLCBvbGRTdGF0ZSAhPT0gaW5zdGFuY2Uuc3RhdGUgJiYgKHdhcm5pbmckOSghMSwgXCIlcy5jb21wb25lbnRXaWxsTW91bnQoKTogQXNzaWduaW5nIGRpcmVjdGx5IHRvIHRoaXMuc3RhdGUgaXMgXCIgKyBcImRlcHJlY2F0ZWQgKGV4Y2VwdCBpbnNpZGUgYSBjb21wb25lbnQncyBcIiArIFwiY29uc3RydWN0b3IpLiBVc2Ugc2V0U3RhdGUgaW5zdGVhZC5cIiwgZ2V0Q29tcG9uZW50TmFtZV8xKHdvcmtJblByb2dyZXNzKSksIFxuICAgICAgICAgICAgdXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGluc3RhbmNlLCBpbnN0YW5jZS5zdGF0ZSwgbnVsbCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSwgbmV3UHJvcHMsIG5ld0NvbnRleHQpIHtcbiAgICAgICAgICAgIHN0YXJ0UGhhc2VUaW1lciQxKHdvcmtJblByb2dyZXNzLCBcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIik7XG4gICAgICAgICAgICB2YXIgb2xkU3RhdGUgPSBpbnN0YW5jZS5zdGF0ZTtcbiAgICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIG5ld0NvbnRleHQpLCBzdG9wUGhhc2VUaW1lciQxKCksIGluc3RhbmNlLnN0YXRlICE9PSBvbGRTdGF0ZSAmJiAod2FybmluZyQ5KCExLCBcIiVzLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKTogQXNzaWduaW5nIGRpcmVjdGx5IHRvIFwiICsgXCJ0aGlzLnN0YXRlIGlzIGRlcHJlY2F0ZWQgKGV4Y2VwdCBpbnNpZGUgYSBjb21wb25lbnQncyBcIiArIFwiY29uc3RydWN0b3IpLiBVc2Ugc2V0U3RhdGUgaW5zdGVhZC5cIiwgZ2V0Q29tcG9uZW50TmFtZV8xKHdvcmtJblByb2dyZXNzKSksIFxuICAgICAgICAgICAgdXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGluc3RhbmNlLCBpbnN0YW5jZS5zdGF0ZSwgbnVsbCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgcHJpb3JpdHlMZXZlbCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gICAgICAgICAgICBjaGVja0NsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLCBzdGF0ZSA9IGluc3RhbmNlLnN0YXRlIHx8IG51bGwsIHByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgaW52YXJpYW50KHByb3BzLCBcIlRoZXJlIG11c3QgYmUgcGVuZGluZyBwcm9wcyBmb3IgYW4gaW5pdGlhbCBtb3VudC4gVGhpcyBlcnJvciBpcyBcIiArIFwibGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpO1xuICAgICAgICAgICAgdmFyIHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCQyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcyA9IHByb3BzLCBpbnN0YW5jZS5zdGF0ZSA9IHN0YXRlLCBpbnN0YW5jZS5yZWZzID0gZW1wdHlPYmplY3QsIFxuICAgICAgICAgICAgaW5zdGFuY2UuY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQkMih3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0KSwgUmVhY3RGZWF0dXJlRmxhZ3NfMS5lbmFibGVBc3luY1N1YnRyZWVBUEkgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy50eXBlICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3MudHlwZS5wcm90b3R5cGUgJiYgITAgPT09IHdvcmtJblByb2dyZXNzLnR5cGUucHJvdG90eXBlLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCAmJiAod29ya0luUHJvZ3Jlc3MuaW50ZXJuYWxDb250ZXh0VGFnIHw9IEFzeW5jVXBkYXRlcyQxKSwgXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgICAgICAgICAgIGNhbGxDb21wb25lbnRXaWxsTW91bnQod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlUXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgICAgICAgICAgICAgICBudWxsICE9PSB1cGRhdGVRdWV1ZSAmJiAoaW5zdGFuY2Uuc3RhdGUgPSBiZWdpblVwZGF0ZVF1ZXVlJDIoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBpbnN0YW5jZSwgc3RhdGUsIHByb3BzLCBwcmlvcml0eUxldmVsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50ICYmICh3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlJDEpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzSW5zdGFuY2UoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIHJlc2V0SW5wdXRQb2ludGVycyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UpO1xuICAgICAgICAgICAgdmFyIG9sZFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcywgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgICBuZXdQcm9wcyB8fCAobmV3UHJvcHMgPSBvbGRQcm9wcywgaW52YXJpYW50KG51bGwgIT0gbmV3UHJvcHMsIFwiVGhlcmUgc2hvdWxkIGFsd2F5cyBiZSBwZW5kaW5nIG9yIG1lbW9pemVkIHByb3BzLiBUaGlzIGVycm9yIGlzIFwiICsgXCJsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIikpO1xuICAgICAgICAgICAgdmFyIG9sZENvbnRleHQgPSBpbnN0YW5jZS5jb250ZXh0LCBuZXdVbm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQkMih3b3JrSW5Qcm9ncmVzcyksIG5ld0NvbnRleHQgPSBnZXRNYXNrZWRDb250ZXh0JDIod29ya0luUHJvZ3Jlc3MsIG5ld1VubWFza2VkQ29udGV4dCk7XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgfHwgb2xkUHJvcHMgPT09IG5ld1Byb3BzICYmIG9sZENvbnRleHQgPT09IG5ld0NvbnRleHQgfHwgY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlLCBuZXdQcm9wcywgbmV3Q29udGV4dCk7XG4gICAgICAgICAgICB2YXIgb2xkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLCBuZXdTdGF0ZSA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChuZXdTdGF0ZSA9IG51bGwgIT09IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID8gYmVnaW5VcGRhdGVRdWV1ZSQyKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSwgaW5zdGFuY2UsIG9sZFN0YXRlLCBuZXdQcm9wcywgcHJpb3JpdHlMZXZlbCkgOiBvbGRTdGF0ZSwgXG4gICAgICAgICAgICAhKG9sZFByb3BzICE9PSBuZXdQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gbmV3U3RhdGUgfHwgaGFzQ29udGV4dENoYW5nZWQkMigpIHx8IG51bGwgIT09IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlICYmIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSkgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlICYmIChvbGRQcm9wcyA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgfHwgKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGUkMSkpLCBcbiAgICAgICAgICAgICExO1xuICAgICAgICAgICAgdmFyIHNob3VsZFVwZGF0ZSA9IGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKHdvcmtJblByb2dyZXNzLCBvbGRQcm9wcywgbmV3UHJvcHMsIG9sZFN0YXRlLCBuZXdTdGF0ZSwgbmV3Q29udGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gc2hvdWxkVXBkYXRlID8gKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSAmJiAoc3RhcnRQaGFzZVRpbWVyJDEod29ya0luUHJvZ3Jlc3MsIFwiY29tcG9uZW50V2lsbFVwZGF0ZVwiKSwgXG4gICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV3Q29udGV4dCksIHN0b3BQaGFzZVRpbWVyJDEoKSksIFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUgJiYgKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGUkMSkpIDogKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlICYmIChvbGRQcm9wcyA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgfHwgKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGUkMSkpLCBcbiAgICAgICAgICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV3UHJvcHMpLCBtZW1vaXplU3RhdGUod29ya0luUHJvZ3Jlc3MsIG5ld1N0YXRlKSksIFxuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBuZXdQcm9wcywgaW5zdGFuY2Uuc3RhdGUgPSBuZXdTdGF0ZSwgaW5zdGFuY2UuY29udGV4dCA9IG5ld0NvbnRleHQsIFxuICAgICAgICAgICAgc2hvdWxkVXBkYXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZG9wdENsYXNzSW5zdGFuY2U6IGFkb3B0Q2xhc3NJbnN0YW5jZSxcbiAgICAgICAgICAgIGNvbnN0cnVjdENsYXNzSW5zdGFuY2U6IGNvbnN0cnVjdENsYXNzSW5zdGFuY2UsXG4gICAgICAgICAgICBtb3VudENsYXNzSW5zdGFuY2U6IG1vdW50Q2xhc3NJbnN0YW5jZSxcbiAgICAgICAgICAgIHVwZGF0ZUNsYXNzSW5zdGFuY2U6IHVwZGF0ZUNsYXNzSW5zdGFuY2VcbiAgICAgICAgfTtcbiAgICB9LCBtb3VudENoaWxkRmliZXJzSW5QbGFjZSA9IFJlYWN0Q2hpbGRGaWJlci5tb3VudENoaWxkRmliZXJzSW5QbGFjZSwgcmVjb25jaWxlQ2hpbGRGaWJlcnMgPSBSZWFjdENoaWxkRmliZXIucmVjb25jaWxlQ2hpbGRGaWJlcnMsIHJlY29uY2lsZUNoaWxkRmliZXJzSW5QbGFjZSA9IFJlYWN0Q2hpbGRGaWJlci5yZWNvbmNpbGVDaGlsZEZpYmVyc0luUGxhY2UsIGNsb25lQ2hpbGRGaWJlcnMgPSBSZWFjdENoaWxkRmliZXIuY2xvbmVDaGlsZEZpYmVycywgYmVnaW5VcGRhdGVRdWV1ZSQxID0gUmVhY3RGaWJlclVwZGF0ZVF1ZXVlLmJlZ2luVXBkYXRlUXVldWUsIGdldE1hc2tlZENvbnRleHQkMSA9IFJlYWN0RmliZXJDb250ZXh0LmdldE1hc2tlZENvbnRleHQsIGdldFVubWFza2VkQ29udGV4dCQxID0gUmVhY3RGaWJlckNvbnRleHQuZ2V0VW5tYXNrZWRDb250ZXh0LCBoYXNDb250ZXh0Q2hhbmdlZCQxID0gUmVhY3RGaWJlckNvbnRleHQuaGFzQ29udGV4dENoYW5nZWQsIHB1c2hDb250ZXh0UHJvdmlkZXIkMSA9IFJlYWN0RmliZXJDb250ZXh0LnB1c2hDb250ZXh0UHJvdmlkZXIsIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QkMSA9IFJlYWN0RmliZXJDb250ZXh0LnB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QsIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIkMSA9IFJlYWN0RmliZXJDb250ZXh0LmludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIsIEluZGV0ZXJtaW5hdGVDb21wb25lbnQkMiA9IFJlYWN0VHlwZU9mV29yay5JbmRldGVybWluYXRlQ29tcG9uZW50LCBGdW5jdGlvbmFsQ29tcG9uZW50JDEgPSBSZWFjdFR5cGVPZldvcmsuRnVuY3Rpb25hbENvbXBvbmVudCwgQ2xhc3NDb21wb25lbnQkNiA9IFJlYWN0VHlwZU9mV29yay5DbGFzc0NvbXBvbmVudCwgSG9zdFJvb3QkNiA9IFJlYWN0VHlwZU9mV29yay5Ib3N0Um9vdCwgSG9zdENvbXBvbmVudCQ2ID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RDb21wb25lbnQsIEhvc3RUZXh0JDMgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFRleHQsIEhvc3RQb3J0YWwkNCA9IFJlYWN0VHlwZU9mV29yay5Ib3N0UG9ydGFsLCBDb3JvdXRpbmVDb21wb25lbnQkMSA9IFJlYWN0VHlwZU9mV29yay5Db3JvdXRpbmVDb21wb25lbnQsIENvcm91dGluZUhhbmRsZXJQaGFzZSA9IFJlYWN0VHlwZU9mV29yay5Db3JvdXRpbmVIYW5kbGVyUGhhc2UsIFlpZWxkQ29tcG9uZW50JDIgPSBSZWFjdFR5cGVPZldvcmsuWWllbGRDb21wb25lbnQsIEZyYWdtZW50JDIgPSBSZWFjdFR5cGVPZldvcmsuRnJhZ21lbnQsIE5vV29yayQzID0gUmVhY3RQcmlvcml0eUxldmVsLk5vV29yaywgT2Zmc2NyZWVuUHJpb3JpdHkkMSA9IFJlYWN0UHJpb3JpdHlMZXZlbC5PZmZzY3JlZW5Qcmlvcml0eSwgUGVyZm9ybWVkV29yayQxID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlBlcmZvcm1lZFdvcmssIFBsYWNlbWVudCQyID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlBsYWNlbWVudCwgQ29udGVudFJlc2V0JDEgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuQ29udGVudFJlc2V0LCBFcnIkMSA9IFJlYWN0VHlwZU9mU2lkZUVmZmVjdC5FcnIsIFJlZiQxID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlJlZiwgUmVhY3RDdXJyZW50T3duZXIkMiA9IFJlYWN0R2xvYmFsU2hhcmVkU3RhdGVfMS5SZWFjdEN1cnJlbnRPd25lciwgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQ0ID0gUmVhY3REZWJ1Z0N1cnJlbnRGaWJlcl8xLCBfcmVxdWlyZTcgPSBSZWFjdERlYnVnRmliZXJQZXJmXzEsIGNhbmNlbFdvcmtUaW1lciA9IF9yZXF1aXJlNy5jYW5jZWxXb3JrVGltZXIsIHdhcm5pbmckNyA9IHJlcXVpcmUkJDAsIHdhcm5lZEFib3V0U3RhdGVsZXNzUmVmcyA9IHt9LCBSZWFjdEZpYmVyQmVnaW5Xb3JrID0gZnVuY3Rpb24oY29uZmlnLCBob3N0Q29udGV4dCwgaHlkcmF0aW9uQ29udGV4dCwgc2NoZWR1bGVVcGRhdGUsIGdldFByaW9yaXR5Q29udGV4dCkge1xuICAgICAgICB2YXIgc2hvdWxkU2V0VGV4dENvbnRlbnQgPSBjb25maWcuc2hvdWxkU2V0VGV4dENvbnRlbnQsIHVzZVN5bmNTY2hlZHVsaW5nID0gY29uZmlnLnVzZVN5bmNTY2hlZHVsaW5nLCBzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlID0gY29uZmlnLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUsIHB1c2hIb3N0Q29udGV4dCA9IGhvc3RDb250ZXh0LnB1c2hIb3N0Q29udGV4dCwgcHVzaEhvc3RDb250YWluZXIgPSBob3N0Q29udGV4dC5wdXNoSG9zdENvbnRhaW5lciwgZW50ZXJIeWRyYXRpb25TdGF0ZSA9IGh5ZHJhdGlvbkNvbnRleHQuZW50ZXJIeWRyYXRpb25TdGF0ZSwgcmVzZXRIeWRyYXRpb25TdGF0ZSA9IGh5ZHJhdGlvbkNvbnRleHQucmVzZXRIeWRyYXRpb25TdGF0ZSwgdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25Db250ZXh0LnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlLCBfUmVhY3RGaWJlckNsYXNzQ29tcG8gPSBSZWFjdEZpYmVyQ2xhc3NDb21wb25lbnQoc2NoZWR1bGVVcGRhdGUsIGdldFByaW9yaXR5Q29udGV4dCwgbWVtb2l6ZVByb3BzLCBtZW1vaXplU3RhdGUpLCBhZG9wdENsYXNzSW5zdGFuY2UgPSBfUmVhY3RGaWJlckNsYXNzQ29tcG8uYWRvcHRDbGFzc0luc3RhbmNlLCBjb25zdHJ1Y3RDbGFzc0luc3RhbmNlID0gX1JlYWN0RmliZXJDbGFzc0NvbXBvLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsIG1vdW50Q2xhc3NJbnN0YW5jZSA9IF9SZWFjdEZpYmVyQ2xhc3NDb21wby5tb3VudENsYXNzSW5zdGFuY2UsIHVwZGF0ZUNsYXNzSW5zdGFuY2UgPSBfUmVhY3RGaWJlckNsYXNzQ29tcG8udXBkYXRlQ2xhc3NJbnN0YW5jZTtcbiAgICAgICAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbikge1xuICAgICAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW5BdFByaW9yaXR5KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHdvcmtJblByb2dyZXNzLnBlbmRpbmdXb3JrUHJpb3JpdHkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuQXRQcmlvcml0eShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCBwcmlvcml0eUxldmVsKSB7XG4gICAgICAgICAgICBudWxsID09PSBjdXJyZW50ID8gd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBtb3VudENoaWxkRmliZXJzSW5QbGFjZSh3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MuY2hpbGQsIG5leHRDaGlsZHJlbiwgcHJpb3JpdHlMZXZlbCkgOiBjdXJyZW50LmNoaWxkID09PSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA/IHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLmNoaWxkLCBuZXh0Q2hpbGRyZW4sIHByaW9yaXR5TGV2ZWwpIDogd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVyc0luUGxhY2Uod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLmNoaWxkLCBuZXh0Q2hpbGRyZW4sIHByaW9yaXR5TGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUZyYWdtZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB2YXIgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgaWYgKGhhc0NvbnRleHRDaGFuZ2VkJDEoKSkgbnVsbCA9PT0gbmV4dENoaWxkcmVuICYmIChuZXh0Q2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzKTsgZWxzZSBpZiAobnVsbCA9PT0gbmV4dENoaWxkcmVuIHx8IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPT09IG5leHRDaGlsZHJlbikgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pLCBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiksIFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgICAgICAgICAgIG51bGwgPT09IHJlZiB8fCBjdXJyZW50ICYmIGN1cnJlbnQucmVmID09PSByZWYgfHwgKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBSZWYkMSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRnVuY3Rpb25hbENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgdmFyIGZuID0gd29ya0luUHJvZ3Jlc3MudHlwZSwgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLCBtZW1vaXplZFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgIGlmIChoYXNDb250ZXh0Q2hhbmdlZCQxKCkpIG51bGwgPT09IG5leHRQcm9wcyAmJiAobmV4dFByb3BzID0gbWVtb2l6ZWRQcm9wcyk7IGVsc2UgaWYgKG51bGwgPT09IG5leHRQcm9wcyB8fCBtZW1vaXplZFByb3BzID09PSBuZXh0UHJvcHMpIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIHZhciBuZXh0Q2hpbGRyZW4sIHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCQxKHdvcmtJblByb2dyZXNzKSwgY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQkMSh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdEN1cnJlbnRPd25lciQyLmN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcywgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQ0LnNldEN1cnJlbnRQaGFzZShcInJlbmRlclwiKSwgXG4gICAgICAgICAgICBuZXh0Q2hpbGRyZW4gPSBmbihuZXh0UHJvcHMsIGNvbnRleHQpLCBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDQuc2V0Q3VycmVudFBoYXNlKG51bGwpLCBcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQZXJmb3JtZWRXb3JrJDEsIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pLCBcbiAgICAgICAgICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzKSwgd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ2xhc3NDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgICAgIHZhciBoYXNDb250ZXh0ID0gcHVzaENvbnRleHRQcm92aWRlciQxKHdvcmtJblByb2dyZXNzKSwgc2hvdWxkVXBkYXRlID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IGN1cnJlbnQgPyB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPyBpbnZhcmlhbnQoITEsIFwiUmVzdW1pbmcgd29yayBub3QgeWV0IGltcGxlbWVudGVkLlwiKSA6IChjb25zdHJ1Y3RDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpLCBcbiAgICAgICAgICAgIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgcHJpb3JpdHlMZXZlbCksIHNob3VsZFVwZGF0ZSA9ICEwKSA6IHNob3VsZFVwZGF0ZSA9IHVwZGF0ZUNsYXNzSW5zdGFuY2UoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHByaW9yaXR5TGV2ZWwpLCBcbiAgICAgICAgICAgIGZpbmlzaENsYXNzQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBzaG91bGRVcGRhdGUsIGhhc0NvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZpbmlzaENsYXNzQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBzaG91bGRVcGRhdGUsIGhhc0NvbnRleHQpIHtcbiAgICAgICAgICAgIGlmIChtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSwgIXNob3VsZFVwZGF0ZSkgcmV0dXJuIGhhc0NvbnRleHQgJiYgaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciQxKHdvcmtJblByb2dyZXNzLCAhMSksIFxuICAgICAgICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lciQyLmN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgIHZhciBuZXh0Q2hpbGRyZW4gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQ0LnNldEN1cnJlbnRQaGFzZShcInJlbmRlclwiKSwgbmV4dENoaWxkcmVuID0gaW5zdGFuY2UucmVuZGVyKCksIFxuICAgICAgICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQ0LnNldEN1cnJlbnRQaGFzZShudWxsKSwgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBlcmZvcm1lZFdvcmskMSwgXG4gICAgICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKSwgbWVtb2l6ZVN0YXRlKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZS5zdGF0ZSksIFxuICAgICAgICAgICAgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZS5wcm9wcyksIGhhc0NvbnRleHQgJiYgaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciQxKHdvcmtJblByb2dyZXNzLCAhMCksIFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHVzaEhvc3RSb290Q29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgICAgICByb290LnBlbmRpbmdDb250ZXh0ID8gcHVzaFRvcExldmVsQ29udGV4dE9iamVjdCQxKHdvcmtJblByb2dyZXNzLCByb290LnBlbmRpbmdDb250ZXh0LCByb290LnBlbmRpbmdDb250ZXh0ICE9PSByb290LmNvbnRleHQpIDogcm9vdC5jb250ZXh0ICYmIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QkMSh3b3JrSW5Qcm9ncmVzcywgcm9vdC5jb250ZXh0LCAhMSksIFxuICAgICAgICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHJvb3QuY29udGFpbmVySW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlSG9zdFJvb3QoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgICAgIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gdXBkYXRlUXVldWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldlN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSwgc3RhdGUgPSBiZWdpblVwZGF0ZVF1ZXVlJDEoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBudWxsLCBwcmV2U3RhdGUsIG51bGwsIHByaW9yaXR5TGV2ZWwpO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U3RhdGUgPT09IHN0YXRlKSByZXR1cm4gcmVzZXRIeWRyYXRpb25TdGF0ZSgpLCBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5jaGlsZCB8fCAhZW50ZXJIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykgPyAocmVzZXRIeWRyYXRpb25TdGF0ZSgpLCBcbiAgICAgICAgICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgZWxlbWVudCkpIDogKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQkMiwgXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBtb3VudENoaWxkRmliZXJzSW5QbGFjZSh3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MuY2hpbGQsIGVsZW1lbnQsIHByaW9yaXR5TGV2ZWwpKSwgXG4gICAgICAgICAgICAgICAgbWVtb2l6ZVN0YXRlKHdvcmtJblByb2dyZXNzLCBzdGF0ZSksIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSwgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlSG9zdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyUHJpb3JpdHkpIHtcbiAgICAgICAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyksIG51bGwgPT09IGN1cnJlbnQgJiYgdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlLCBtZW1vaXplZFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcywgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgbnVsbCA9PT0gbmV4dFByb3BzICYmIChuZXh0UHJvcHMgPSBtZW1vaXplZFByb3BzLCBpbnZhcmlhbnQobnVsbCAhPT0gbmV4dFByb3BzLCBcIldlIHNob3VsZCBhbHdheXMgaGF2ZSBwZW5kaW5nIG9yIGN1cnJlbnQgcHJvcHMuIFRoaXMgZXJyb3IgaXMgXCIgKyBcImxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSk7XG4gICAgICAgICAgICB2YXIgcHJldlByb3BzID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IG51bGw7XG4gICAgICAgICAgICBpZiAoaGFzQ29udGV4dENoYW5nZWQkMSgpKSA7IGVsc2UgaWYgKG51bGwgPT09IG5leHRQcm9wcyB8fCBtZW1vaXplZFByb3BzID09PSBuZXh0UHJvcHMpIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgICByZXR1cm4gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgbmV4dFByb3BzKSA/IG5leHRDaGlsZHJlbiA9IG51bGwgOiBwcmV2UHJvcHMgJiYgc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJldlByb3BzKSAmJiAod29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IENvbnRlbnRSZXNldCQxKSwgXG4gICAgICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSwgcmVuZGVyUHJpb3JpdHkgIT09IE9mZnNjcmVlblByaW9yaXR5JDEgJiYgIXVzZVN5bmNTY2hlZHVsaW5nICYmIHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUodHlwZSwgbmV4dFByb3BzKSA/ICh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nV29ya1ByaW9yaXR5ID0gT2Zmc2NyZWVuUHJpb3JpdHkkMSwgXG4gICAgICAgICAgICBudWxsKSA6IChyZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKSwgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMpLCBcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVIb3N0VGV4dChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJiB0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IG5leHRQcm9wcyAmJiAobmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyksIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzKSwgXG4gICAgICAgICAgICBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcHJpb3JpdHlMZXZlbCkge1xuICAgICAgICAgICAgaW52YXJpYW50KG51bGwgPT09IGN1cnJlbnQsIFwiQW4gaW5kZXRlcm1pbmF0ZSBjb21wb25lbnQgc2hvdWxkIG5ldmVyIGhhdmUgbW91bnRlZC4gVGhpcyBlcnJvciBpcyBcIiArIFwibGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpO1xuICAgICAgICAgICAgdmFyIHZhbHVlLCBmbiA9IHdvcmtJblByb2dyZXNzLnR5cGUsIHByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLCB1bm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQkMSh3b3JrSW5Qcm9ncmVzcyksIGNvbnRleHQgPSBnZXRNYXNrZWRDb250ZXh0JDEod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCk7XG4gICAgICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIkMi5jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MsIHZhbHVlID0gZm4ocHJvcHMsIGNvbnRleHQpLCB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUGVyZm9ybWVkV29yayQxLCBcbiAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIHZhbHVlICYmIG51bGwgIT09IHZhbHVlICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdmFsdWUucmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudGFnID0gQ2xhc3NDb21wb25lbnQkNjtcbiAgICAgICAgICAgICAgICB2YXIgaGFzQ29udGV4dCA9IHB1c2hDb250ZXh0UHJvdmlkZXIkMSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkb3B0Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgdmFsdWUpLCBtb3VudENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHByaW9yaXR5TGV2ZWwpLCBcbiAgICAgICAgICAgICAgICBmaW5pc2hDbGFzc0NvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgITAsIGhhc0NvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudGFnID0gRnVuY3Rpb25hbENvbXBvbmVudCQxO1xuICAgICAgICAgICAgdmFyIENvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICAgICAgICBpZiAoQ29tcG9uZW50ICYmIHdhcm5pbmckNyghQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzLCBcIiVzKC4uLik6IGNoaWxkQ29udGV4dFR5cGVzIGNhbm5vdCBiZSBkZWZpbmVkIG9uIGEgZnVuY3Rpb25hbCBjb21wb25lbnQuXCIsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCBcIkNvbXBvbmVudFwiKSwgXG4gICAgICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5yZWYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5mbyA9IFwiXCIsIG93bmVyTmFtZSA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIkNC5nZXRDdXJyZW50RmliZXJPd25lck5hbWUoKTtcbiAgICAgICAgICAgICAgICBvd25lck5hbWUgJiYgKGluZm8gKz0gXCJcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgXCIgKyBvd25lck5hbWUgKyBcImAuXCIpO1xuICAgICAgICAgICAgICAgIHZhciB3YXJuaW5nS2V5ID0gb3duZXJOYW1lIHx8IHdvcmtJblByb2dyZXNzLl9kZWJ1Z0lEIHx8IFwiXCIsIGRlYnVnU291cmNlID0gd29ya0luUHJvZ3Jlc3MuX2RlYnVnU291cmNlO1xuICAgICAgICAgICAgICAgIGRlYnVnU291cmNlICYmICh3YXJuaW5nS2V5ID0gZGVidWdTb3VyY2UuZmlsZU5hbWUgKyBcIjpcIiArIGRlYnVnU291cmNlLmxpbmVOdW1iZXIpLCBcbiAgICAgICAgICAgICAgICB3YXJuZWRBYm91dFN0YXRlbGVzc1JlZnNbd2FybmluZ0tleV0gfHwgKHdhcm5lZEFib3V0U3RhdGVsZXNzUmVmc1t3YXJuaW5nS2V5XSA9ICEwLCBcbiAgICAgICAgICAgICAgICB3YXJuaW5nJDcoITEsIFwiU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGJlIGdpdmVuIHJlZnMuIFwiICsgXCJBdHRlbXB0cyB0byBhY2Nlc3MgdGhpcyByZWYgd2lsbCBmYWlsLiVzJXNcIiwgaW5mbywgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQ0LmdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0oKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB2YWx1ZSksIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgcHJvcHMpLCBcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvcm91dGluZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgdmFyIG5leHRDb3JvdXRpbmUgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgICBoYXNDb250ZXh0Q2hhbmdlZCQxKCkgPyBudWxsID09PSBuZXh0Q29yb3V0aW5lICYmIChuZXh0Q29yb3V0aW5lID0gY3VycmVudCAmJiBjdXJyZW50Lm1lbW9pemVkUHJvcHMsIFxuICAgICAgICAgICAgaW52YXJpYW50KG51bGwgIT09IG5leHRDb3JvdXRpbmUsIFwiV2Ugc2hvdWxkIGFsd2F5cyBoYXZlIHBlbmRpbmcgb3IgY3VycmVudCBwcm9wcy4gVGhpcyBlcnJvciBpcyBcIiArIFwibGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpKSA6IG51bGwgIT09IG5leHRDb3JvdXRpbmUgJiYgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyAhPT0gbmV4dENvcm91dGluZSB8fCAobmV4dENvcm91dGluZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMpO1xuICAgICAgICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IG5leHRDb3JvdXRpbmUuY2hpbGRyZW4sIHByaW9yaXR5TGV2ZWwgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nV29ya1ByaW9yaXR5O1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IGN1cnJlbnQgPyB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBtb3VudENoaWxkRmliZXJzSW5QbGFjZSh3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLCBuZXh0Q2hpbGRyZW4sIHByaW9yaXR5TGV2ZWwpIDogY3VycmVudC5jaGlsZCA9PT0gd29ya0luUHJvZ3Jlc3MuY2hpbGQgPyB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLCBuZXh0Q2hpbGRyZW4sIHByaW9yaXR5TGV2ZWwpIDogd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gcmVjb25jaWxlQ2hpbGRGaWJlcnNJblBsYWNlKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUsIG5leHRDaGlsZHJlbiwgcHJpb3JpdHlMZXZlbCksIFxuICAgICAgICAgICAgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBuZXh0Q29yb3V0aW5lKSwgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0eUxldmVsID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1dvcmtQcmlvcml0eSwgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgaWYgKGhhc0NvbnRleHRDaGFuZ2VkJDEoKSkgbnVsbCA9PT0gbmV4dENoaWxkcmVuICYmIChuZXh0Q2hpbGRyZW4gPSBjdXJyZW50ICYmIGN1cnJlbnQubWVtb2l6ZWRQcm9wcywgXG4gICAgICAgICAgICBpbnZhcmlhbnQobnVsbCAhPSBuZXh0Q2hpbGRyZW4sIFwiV2Ugc2hvdWxkIGFsd2F5cyBoYXZlIHBlbmRpbmcgb3IgY3VycmVudCBwcm9wcy4gVGhpcyBlcnJvciBpcyBcIiArIFwibGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpKTsgZWxzZSBpZiAobnVsbCA9PT0gbmV4dENoaWxkcmVuIHx8IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPT09IG5leHRDaGlsZHJlbikgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IGN1cnJlbnQgPyAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVyc0luUGxhY2Uod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLmNoaWxkLCBuZXh0Q2hpbGRyZW4sIHByaW9yaXR5TGV2ZWwpLCBcbiAgICAgICAgICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKSkgOiAocmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiksIFxuICAgICAgICAgICAgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pKSwgd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbmNlbFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyksIGNsb25lQ2hpbGRGaWJlcnMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpLCBcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJhaWxvdXRPbkxvd1ByaW9yaXR5KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNhbmNlbFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyksIHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIEhvc3RSb290JDY6XG4gICAgICAgICAgICAgICAgcHVzaEhvc3RSb290Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudCQ2OlxuICAgICAgICAgICAgICAgIHB1c2hDb250ZXh0UHJvdmlkZXIkMSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSBIb3N0UG9ydGFsJDQ6XG4gICAgICAgICAgICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1lbW9pemVTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFN0YXRlKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJlZ2luV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcHJpb3JpdHlMZXZlbCkge1xuICAgICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLnBlbmRpbmdXb3JrUHJpb3JpdHkgPT09IE5vV29yayQzIHx8IHdvcmtJblByb2dyZXNzLnBlbmRpbmdXb3JrUHJpb3JpdHkgPiBwcmlvcml0eUxldmVsKSByZXR1cm4gYmFpbG91dE9uTG93UHJpb3JpdHkoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSBJbmRldGVybWluYXRlQ29tcG9uZW50JDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcHJpb3JpdHlMZXZlbCk7XG5cbiAgICAgICAgICAgICAgY2FzZSBGdW5jdGlvbmFsQ29tcG9uZW50JDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQkNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlQ2xhc3NDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHByaW9yaXR5TGV2ZWwpO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdFJvb3QkNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlSG9zdFJvb3QoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHByaW9yaXR5TGV2ZWwpO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudCQ2OlxuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVIb3N0Q29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBwcmlvcml0eUxldmVsKTtcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RUZXh0JDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RUZXh0KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcblxuICAgICAgICAgICAgICBjYXNlIENvcm91dGluZUhhbmRsZXJQaGFzZTpcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBDb3JvdXRpbmVDb21wb25lbnQkMTtcblxuICAgICAgICAgICAgICBjYXNlIENvcm91dGluZUNvbXBvbmVudCQxOlxuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVDb3JvdXRpbmVDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgICAgIGNhc2UgWWllbGRDb21wb25lbnQkMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RQb3J0YWwkNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlUG9ydGFsQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcblxuICAgICAgICAgICAgICBjYXNlIEZyYWdtZW50JDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGludmFyaWFudCghMSwgXCJVbmtub3duIHVuaXQgb2Ygd29yayB0YWcuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBcIiArIFwiUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiZWdpbkZhaWxlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQkNjpcbiAgICAgICAgICAgICAgICBwdXNoQ29udGV4dFByb3ZpZGVyJDEod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdFJvb3QkNjpcbiAgICAgICAgICAgICAgICBwdXNoSG9zdFJvb3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGludmFyaWFudCghMSwgXCJJbnZhbGlkIHR5cGUgb2Ygd29yay4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBcIiArIFwiUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBFcnIkMSwgbnVsbCA9PT0gY3VycmVudCA/IHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCA6IHdvcmtJblByb2dyZXNzLmNoaWxkICE9PSBjdXJyZW50LmNoaWxkICYmICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLCBcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdXb3JrUHJpb3JpdHkgPT09IE5vV29yayQzIHx8IHdvcmtJblByb2dyZXNzLnBlbmRpbmdXb3JrUHJpb3JpdHkgPiBwcmlvcml0eUxldmVsKSByZXR1cm4gYmFpbG91dE9uTG93UHJpb3JpdHkoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0ID0gbnVsbCwgd29ya0luUHJvZ3Jlc3MubGFzdEVmZmVjdCA9IG51bGwsIHJlY29uY2lsZUNoaWxkcmVuQXRQcmlvcml0eShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbnVsbCwgcHJpb3JpdHlMZXZlbCksIFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudGFnID09PSBDbGFzc0NvbXBvbmVudCQ2KSB7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBpbnN0YW5jZS5wcm9wcywgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiZWdpbldvcms6IGJlZ2luV29yayxcbiAgICAgICAgICAgIGJlZ2luRmFpbGVkV29yazogYmVnaW5GYWlsZWRXb3JrXG4gICAgICAgIH07XG4gICAgfSwgcmVjb25jaWxlQ2hpbGRGaWJlcnMkMiA9IFJlYWN0Q2hpbGRGaWJlci5yZWNvbmNpbGVDaGlsZEZpYmVycywgcG9wQ29udGV4dFByb3ZpZGVyJDIgPSBSZWFjdEZpYmVyQ29udGV4dC5wb3BDb250ZXh0UHJvdmlkZXIsIHBvcFRvcExldmVsQ29udGV4dE9iamVjdCQxID0gUmVhY3RGaWJlckNvbnRleHQucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LCBJbmRldGVybWluYXRlQ29tcG9uZW50JDMgPSBSZWFjdFR5cGVPZldvcmsuSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCwgRnVuY3Rpb25hbENvbXBvbmVudCQzID0gUmVhY3RUeXBlT2ZXb3JrLkZ1bmN0aW9uYWxDb21wb25lbnQsIENsYXNzQ29tcG9uZW50JDggPSBSZWFjdFR5cGVPZldvcmsuQ2xhc3NDb21wb25lbnQsIEhvc3RSb290JDcgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFJvb3QsIEhvc3RDb21wb25lbnQkNyA9IFJlYWN0VHlwZU9mV29yay5Ib3N0Q29tcG9uZW50LCBIb3N0VGV4dCQ1ID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RUZXh0LCBIb3N0UG9ydGFsJDYgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFBvcnRhbCwgQ29yb3V0aW5lQ29tcG9uZW50JDMgPSBSZWFjdFR5cGVPZldvcmsuQ29yb3V0aW5lQ29tcG9uZW50LCBDb3JvdXRpbmVIYW5kbGVyUGhhc2UkMSA9IFJlYWN0VHlwZU9mV29yay5Db3JvdXRpbmVIYW5kbGVyUGhhc2UsIFlpZWxkQ29tcG9uZW50JDQgPSBSZWFjdFR5cGVPZldvcmsuWWllbGRDb21wb25lbnQsIEZyYWdtZW50JDQgPSBSZWFjdFR5cGVPZldvcmsuRnJhZ21lbnQsIFBsYWNlbWVudCQ0ID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlBsYWNlbWVudCwgUmVmJDIgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuUmVmLCBVcGRhdGUkMiA9IFJlYWN0VHlwZU9mU2lkZUVmZmVjdC5VcGRhdGUsIE9mZnNjcmVlblByaW9yaXR5JDIgPSBSZWFjdFByaW9yaXR5TGV2ZWwuT2Zmc2NyZWVuUHJpb3JpdHksIFJlYWN0RmliZXJDb21wbGV0ZVdvcmsgPSBmdW5jdGlvbihjb25maWcsIGhvc3RDb250ZXh0LCBoeWRyYXRpb25Db250ZXh0KSB7XG4gICAgICAgIHZhciBjcmVhdGVJbnN0YW5jZSA9IGNvbmZpZy5jcmVhdGVJbnN0YW5jZSwgY3JlYXRlVGV4dEluc3RhbmNlID0gY29uZmlnLmNyZWF0ZVRleHRJbnN0YW5jZSwgYXBwZW5kSW5pdGlhbENoaWxkID0gY29uZmlnLmFwcGVuZEluaXRpYWxDaGlsZCwgZmluYWxpemVJbml0aWFsQ2hpbGRyZW4gPSBjb25maWcuZmluYWxpemVJbml0aWFsQ2hpbGRyZW4sIHByZXBhcmVVcGRhdGUgPSBjb25maWcucHJlcGFyZVVwZGF0ZSwgZ2V0Um9vdEhvc3RDb250YWluZXIgPSBob3N0Q29udGV4dC5nZXRSb290SG9zdENvbnRhaW5lciwgcG9wSG9zdENvbnRleHQgPSBob3N0Q29udGV4dC5wb3BIb3N0Q29udGV4dCwgZ2V0SG9zdENvbnRleHQgPSBob3N0Q29udGV4dC5nZXRIb3N0Q29udGV4dCwgcG9wSG9zdENvbnRhaW5lciA9IGhvc3RDb250ZXh0LnBvcEhvc3RDb250YWluZXIsIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UgPSBoeWRyYXRpb25Db250ZXh0LnByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsIHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlID0gaHlkcmF0aW9uQ29udGV4dC5wcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSwgcG9wSHlkcmF0aW9uU3RhdGUgPSBoeWRyYXRpb25Db250ZXh0LnBvcEh5ZHJhdGlvblN0YXRlO1xuICAgICAgICBmdW5jdGlvbiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlJDI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFya1JlZih3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFJlZiQyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFwcGVuZEFsbFlpZWxkcyh5aWVsZHMsIHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIGZvciAobm9kZSAmJiAobm9kZS5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyk7IG51bGwgIT09IG5vZGU7ICkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCQ3IHx8IG5vZGUudGFnID09PSBIb3N0VGV4dCQ1IHx8IG5vZGUudGFnID09PSBIb3N0UG9ydGFsJDYpIGludmFyaWFudCghMSwgXCJBIGNvcm91dGluZSBjYW5ub3QgaGF2ZSBob3N0IGNvbXBvbmVudCBjaGlsZHJlbi5cIik7IGVsc2UgaWYgKG5vZGUudGFnID09PSBZaWVsZENvbXBvbmVudCQ0KSB5aWVsZHMucHVzaChub2RlLnR5cGUpOyBlbHNlIGlmIChudWxsICE9PSBub2RlLmNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZSwgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKDtudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuLCBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1vdmVDb3JvdXRpbmVUb0hhbmRsZXJQaGFzZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgdmFyIGNvcm91dGluZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICBpbnZhcmlhbnQoY29yb3V0aW5lLCBcIlNob3VsZCBiZSByZXNvbHZlZCBieSBub3cuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBcIiArIFwiUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSwgXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBDb3JvdXRpbmVIYW5kbGVyUGhhc2UkMTtcbiAgICAgICAgICAgIHZhciB5aWVsZHMgPSBbXTtcbiAgICAgICAgICAgIGFwcGVuZEFsbFlpZWxkcyh5aWVsZHMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIHZhciBmbiA9IGNvcm91dGluZS5oYW5kbGVyLCBwcm9wcyA9IGNvcm91dGluZS5wcm9wcywgbmV4dENoaWxkcmVuID0gZm4ocHJvcHMsIHlpZWxkcyksIGN1cnJlbnRGaXJzdENoaWxkID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuY2hpbGQgOiBudWxsLCBwcmlvcml0eSA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdXb3JrUHJpb3JpdHk7XG4gICAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyQyKHdvcmtJblByb2dyZXNzLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV4dENoaWxkcmVuLCBwcmlvcml0eSksIFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXBwZW5kQWxsQ2hpbGRyZW4ocGFyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgZm9yICh2YXIgbm9kZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSBub2RlOyApIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQkNyB8fCBub2RlLnRhZyA9PT0gSG9zdFRleHQkNSkgYXBwZW5kSW5pdGlhbENoaWxkKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpOyBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCQ2KSA7IGVsc2UgaWYgKG51bGwgIT09IG5vZGUuY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gd29ya0luUHJvZ3Jlc3MpIHJldHVybjtcbiAgICAgICAgICAgICAgICBmb3IgKDtudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZVdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlclByaW9yaXR5KSB7XG4gICAgICAgICAgICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgICBzd2l0Y2ggKG51bGwgPT09IG5ld1Byb3BzID8gbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzIDogd29ya0luUHJvZ3Jlc3MucGVuZGluZ1dvcmtQcmlvcml0eSA9PT0gT2Zmc2NyZWVuUHJpb3JpdHkkMiAmJiByZW5kZXJQcmlvcml0eSAhPT0gT2Zmc2NyZWVuUHJpb3JpdHkkMiB8fCAod29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzID0gbnVsbCksIFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgRnVuY3Rpb25hbENvbXBvbmVudCQzOlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQkODpcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9wQ29udGV4dFByb3ZpZGVyJDIod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdFJvb3QkNzpcbiAgICAgICAgICAgICAgICBwb3BIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzKSwgcG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0JDEod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIHZhciBmaWJlclJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpYmVyUm9vdC5wZW5kaW5nQ29udGV4dCAmJiAoZmliZXJSb290LmNvbnRleHQgPSBmaWJlclJvb3QucGVuZGluZ0NvbnRleHQsIFxuICAgICAgICAgICAgICAgIGZpYmVyUm9vdC5wZW5kaW5nQ29udGV4dCA9IG51bGwpLCBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQuY2hpbGQgfHwgKHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKSwgXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICY9IH5QbGFjZW1lbnQkNCksIG51bGw7XG5cbiAgICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50JDc6XG4gICAgICAgICAgICAgICAgcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIHZhciByb290Q29udGFpbmVySW5zdGFuY2UgPSBnZXRSb290SG9zdENvbnRhaW5lcigpLCB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHMsIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLCBjdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpLCB1cGRhdGVQYXlsb2FkID0gcHJlcGFyZVVwZGF0ZShpbnN0YW5jZSwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gdXBkYXRlUGF5bG9hZCwgdXBkYXRlUGF5bG9hZCAmJiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSwgXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucmVmICE9PSB3b3JrSW5Qcm9ncmVzcy5yZWYgJiYgbWFya1JlZih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdQcm9wcykgcmV0dXJuIGludmFyaWFudChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUsIFwiV2UgbXVzdCBoYXZlIG5ldyBwcm9wcyBmb3IgbmV3IG1vdW50cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgXCIgKyBcImNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9jdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpKSBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKHdvcmtJblByb2dyZXNzLCByb290Q29udGFpbmVySW5zdGFuY2UsIF9jdXJyZW50SG9zdENvbnRleHQpICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaW5zdGFuY2UgPSBjcmVhdGVJbnN0YW5jZSh0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBfY3VycmVudEhvc3RDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRBbGxDaGlsZHJlbihfaW5zdGFuY2UsIHdvcmtJblByb2dyZXNzKSwgZmluYWxpemVJbml0aWFsQ2hpbGRyZW4oX2luc3RhbmNlLCB0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSAmJiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBfaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MucmVmICYmIG1hcmtSZWYod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RUZXh0JDU6XG4gICAgICAgICAgICAgICAgdmFyIG5ld1RleHQgPSBuZXdQcm9wcztcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAmJiBudWxsICE9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1RleHQgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIG5ld1RleHQpIHJldHVybiBpbnZhcmlhbnQobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLCBcIldlIG11c3QgaGF2ZSBuZXcgcHJvcHMgZm9yIG5ldyBtb3VudHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IFwiICsgXCJjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcm9vdENvbnRhaW5lckluc3RhbmNlID0gZ2V0Um9vdEhvc3RDb250YWluZXIoKSwgX2N1cnJlbnRIb3N0Q29udGV4dDIgPSBnZXRIb3N0Q29udGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykgPyBwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcykgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcykgOiB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjcmVhdGVUZXh0SW5zdGFuY2UobmV3VGV4dCwgX3Jvb3RDb250YWluZXJJbnN0YW5jZSwgX2N1cnJlbnRIb3N0Q29udGV4dDIsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgICAgY2FzZSBDb3JvdXRpbmVDb21wb25lbnQkMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbW92ZUNvcm91dGluZVRvSGFuZGxlclBoYXNlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcblxuICAgICAgICAgICAgICBjYXNlIENvcm91dGluZUhhbmRsZXJQaGFzZSQxOlxuICAgICAgICAgICAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy50YWcgPSBDb3JvdXRpbmVDb21wb25lbnQkMywgbnVsbDtcblxuICAgICAgICAgICAgICBjYXNlIFlpZWxkQ29tcG9uZW50JDQ6XG4gICAgICAgICAgICAgIGNhc2UgRnJhZ21lbnQkNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RQb3J0YWwkNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksIHBvcEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuXG4gICAgICAgICAgICAgIGNhc2UgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCQzOlxuICAgICAgICAgICAgICAgIGludmFyaWFudCghMSwgXCJBbiBpbmRldGVybWluYXRlIGNvbXBvbmVudCBzaG91bGQgaGF2ZSBiZWNvbWUgZGV0ZXJtaW5hdGUgYmVmb3JlIFwiICsgXCJjb21wbGV0aW5nLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBcIiArIFwiZmlsZSBhbiBpc3N1ZS5cIik7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoITEsIFwiVW5rbm93biB1bml0IG9mIHdvcmsgdGFnLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gXCIgKyBcIlJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbXBsZXRlV29yazogY29tcGxldGVXb3JrXG4gICAgICAgIH07XG4gICAgfSwgd2FybmluZyQxMCA9IHJlcXVpcmUkJDAsIG9uQ29tbWl0RmliZXJSb290ID0gbnVsbCwgb25Db21taXRGaWJlclVubW91bnQgPSBudWxsLCBoYXNMb2dnZWRFcnJvciA9ICExO1xuICAgIGZ1bmN0aW9uIGNhdGNoRXJyb3JzKGZuKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKGFyZyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAwIHx8IGhhc0xvZ2dlZEVycm9yIHx8IChoYXNMb2dnZWRFcnJvciA9ICEwLCB3YXJuaW5nJDEwKCExLCBcIlJlYWN0IERldlRvb2xzIGVuY291bnRlcmVkIGFuIGVycm9yOiAlc1wiLCBlcnIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5qZWN0SW50ZXJuYWxzJDEoaW50ZXJuYWxzKSB7XG4gICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pIHJldHVybiAhMTtcbiAgICAgICAgdmFyIGhvb2sgPSBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG4gICAgICAgIGlmICghaG9vay5zdXBwb3J0c0ZpYmVyKSByZXR1cm4gd2FybmluZyQxMCghMSwgXCJUaGUgaW5zdGFsbGVkIHZlcnNpb24gb2YgUmVhY3QgRGV2VG9vbHMgaXMgdG9vIG9sZCBhbmQgd2lsbCBub3Qgd29yayBcIiArIFwid2l0aCB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIFJlYWN0LiBQbGVhc2UgdXBkYXRlIFJlYWN0IERldlRvb2xzLiBcIiArIFwiaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29sc1wiKSwgXG4gICAgICAgICEwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHJlbmRlcmVySUQgPSBob29rLmluamVjdChpbnRlcm5hbHMpO1xuICAgICAgICAgICAgb25Db21taXRGaWJlclJvb3QgPSBjYXRjaEVycm9ycyhmdW5jdGlvbihyb290KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvb2sub25Db21taXRGaWJlclJvb3QocmVuZGVyZXJJRCwgcm9vdCk7XG4gICAgICAgICAgICB9KSwgb25Db21taXRGaWJlclVubW91bnQgPSBjYXRjaEVycm9ycyhmdW5jdGlvbihmaWJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBob29rLm9uQ29tbWl0RmliZXJVbm1vdW50KHJlbmRlcmVySUQsIGZpYmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHdhcm5pbmckMTAoITEsIFwiUmVhY3QgRGV2VG9vbHMgZW5jb3VudGVyZWQgYW4gZXJyb3I6ICVzLlwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Db21taXRSb290JDEocm9vdCkge1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG9uQ29tbWl0RmliZXJSb290ICYmIG9uQ29tbWl0RmliZXJSb290KHJvb3QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNvbW1pdFVubW91bnQkMShmaWJlcikge1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG9uQ29tbWl0RmliZXJVbm1vdW50ICYmIG9uQ29tbWl0RmliZXJVbm1vdW50KGZpYmVyKTtcbiAgICB9XG4gICAgdmFyIGluamVjdEludGVybmFsc18xID0gaW5qZWN0SW50ZXJuYWxzJDEsIG9uQ29tbWl0Um9vdF8xID0gb25Db21taXRSb290JDEsIG9uQ29tbWl0VW5tb3VudF8xID0gb25Db21taXRVbm1vdW50JDEsIFJlYWN0RmliZXJEZXZUb29sc0hvb2sgPSB7XG4gICAgICAgIGluamVjdEludGVybmFsczogaW5qZWN0SW50ZXJuYWxzXzEsXG4gICAgICAgIG9uQ29tbWl0Um9vdDogb25Db21taXRSb290XzEsXG4gICAgICAgIG9uQ29tbWl0VW5tb3VudDogb25Db21taXRVbm1vdW50XzFcbiAgICB9LCBDbGFzc0NvbXBvbmVudCQ5ID0gUmVhY3RUeXBlT2ZXb3JrLkNsYXNzQ29tcG9uZW50LCBIb3N0Um9vdCQ4ID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RSb290LCBIb3N0Q29tcG9uZW50JDggPSBSZWFjdFR5cGVPZldvcmsuSG9zdENvbXBvbmVudCwgSG9zdFRleHQkNiA9IFJlYWN0VHlwZU9mV29yay5Ib3N0VGV4dCwgSG9zdFBvcnRhbCQ3ID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RQb3J0YWwsIENvcm91dGluZUNvbXBvbmVudCQ0ID0gUmVhY3RUeXBlT2ZXb3JrLkNvcm91dGluZUNvbXBvbmVudCwgY29tbWl0Q2FsbGJhY2tzJDEgPSBSZWFjdEZpYmVyVXBkYXRlUXVldWUuY29tbWl0Q2FsbGJhY2tzLCBvbkNvbW1pdFVubW91bnQgPSBSZWFjdEZpYmVyRGV2VG9vbHNIb29rLm9uQ29tbWl0VW5tb3VudCwgaW52b2tlR3VhcmRlZENhbGxiYWNrJDIgPSBSZWFjdEVycm9yVXRpbHNfMS5pbnZva2VHdWFyZGVkQ2FsbGJhY2ssIGhhc0NhdWdodEVycm9yJDEgPSBSZWFjdEVycm9yVXRpbHNfMS5oYXNDYXVnaHRFcnJvciwgY2xlYXJDYXVnaHRFcnJvciQxID0gUmVhY3RFcnJvclV0aWxzXzEuY2xlYXJDYXVnaHRFcnJvciwgUGxhY2VtZW50JDUgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuUGxhY2VtZW50LCBVcGRhdGUkMyA9IFJlYWN0VHlwZU9mU2lkZUVmZmVjdC5VcGRhdGUsIENhbGxiYWNrJDEgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuQ2FsbGJhY2ssIENvbnRlbnRSZXNldCQyID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LkNvbnRlbnRSZXNldCwgX3JlcXVpcmU1JDEgPSBSZWFjdERlYnVnRmliZXJQZXJmXzEsIHN0YXJ0UGhhc2VUaW1lciQyID0gX3JlcXVpcmU1JDEuc3RhcnRQaGFzZVRpbWVyLCBzdG9wUGhhc2VUaW1lciQyID0gX3JlcXVpcmU1JDEuc3RvcFBoYXNlVGltZXIsIFJlYWN0RmliZXJDb21taXRXb3JrID0gZnVuY3Rpb24oY29uZmlnLCBjYXB0dXJlRXJyb3IpIHtcbiAgICAgICAgdmFyIGNvbW1pdE1vdW50ID0gY29uZmlnLmNvbW1pdE1vdW50LCBjb21taXRVcGRhdGUgPSBjb25maWcuY29tbWl0VXBkYXRlLCByZXNldFRleHRDb250ZW50ID0gY29uZmlnLnJlc2V0VGV4dENvbnRlbnQsIGNvbW1pdFRleHRVcGRhdGUgPSBjb25maWcuY29tbWl0VGV4dFVwZGF0ZSwgYXBwZW5kQ2hpbGQgPSBjb25maWcuYXBwZW5kQ2hpbGQsIGFwcGVuZENoaWxkVG9Db250YWluZXIgPSBjb25maWcuYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciwgaW5zZXJ0QmVmb3JlID0gY29uZmlnLmluc2VydEJlZm9yZSwgaW5zZXJ0SW5Db250YWluZXJCZWZvcmUgPSBjb25maWcuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsIHJlbW92ZUNoaWxkID0gY29uZmlnLnJlbW92ZUNoaWxkLCByZW1vdmVDaGlsZEZyb21Db250YWluZXIgPSBjb25maWcucmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyLCBnZXRQdWJsaWNJbnN0YW5jZSA9IGNvbmZpZy5nZXRQdWJsaWNJbnN0YW5jZSwgY2FsbENvbXBvbmVudFdpbGxVbm1vdW50V2l0aFRpbWVySW5EZXYgPSBmdW5jdGlvbihjdXJyZW50LCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgc3RhcnRQaGFzZVRpbWVyJDIoY3VycmVudCwgXCJjb21wb25lbnRXaWxsVW5tb3VudFwiKSwgaW5zdGFuY2UucHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHMsIFxuICAgICAgICAgICAgaW5zdGFuY2Uuc3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUsIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50KCksIHN0b3BQaGFzZVRpbWVyJDIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KGN1cnJlbnQsIGluc3RhbmNlKSB7XG4gICAgICAgICAgICBpZiAoaW52b2tlR3VhcmRlZENhbGxiYWNrJDIobnVsbCwgY2FsbENvbXBvbmVudFdpbGxVbm1vdW50V2l0aFRpbWVySW5EZXYsIG51bGwsIGN1cnJlbnQsIGluc3RhbmNlKSwgXG4gICAgICAgICAgICBoYXNDYXVnaHRFcnJvciQxKCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdW5tb3VudEVycm9yID0gY2xlYXJDYXVnaHRFcnJvciQxKCk7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUVycm9yKGN1cnJlbnQsIHVubW91bnRFcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciByZWYgPSBjdXJyZW50LnJlZjtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSByZWYgJiYgKGludm9rZUd1YXJkZWRDYWxsYmFjayQyKG51bGwsIHJlZiwgbnVsbCwgbnVsbCksIGhhc0NhdWdodEVycm9yJDEoKSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVmRXJyb3IgPSBjbGVhckNhdWdodEVycm9yJDEoKTtcbiAgICAgICAgICAgICAgICBjYXB0dXJlRXJyb3IoY3VycmVudCwgcmVmRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEhvc3RQYXJlbnRGaWJlcihmaWJlcikge1xuICAgICAgICAgICAgZm9yICh2YXIgcGFyZW50ID0gZmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7ICkge1xuICAgICAgICAgICAgICAgIGlmIChpc0hvc3RQYXJlbnQocGFyZW50KSkgcmV0dXJuIHBhcmVudDtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW52YXJpYW50KCExLCBcIkV4cGVjdGVkIHRvIGZpbmQgYSBob3N0IHBhcmVudC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIFwiICsgXCJpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzSG9zdFBhcmVudChmaWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZpYmVyLnRhZyA9PT0gSG9zdENvbXBvbmVudCQ4IHx8IGZpYmVyLnRhZyA9PT0gSG9zdFJvb3QkOCB8fCBmaWJlci50YWcgPT09IEhvc3RQb3J0YWwkNztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRIb3N0U2libGluZyhmaWJlcikge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBmaWJlcjtcbiAgICAgICAgICAgIHNpYmxpbmdzOiBmb3IgKDshMDsgKSB7XG4gICAgICAgICAgICAgICAgZm9yICg7bnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IGlzSG9zdFBhcmVudChub2RlLnJldHVybikpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuLCBub2RlID0gbm9kZS5zaWJsaW5nOyBub2RlLnRhZyAhPT0gSG9zdENvbXBvbmVudCQ4ICYmIG5vZGUudGFnICE9PSBIb3N0VGV4dCQ2OyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuZWZmZWN0VGFnICYgUGxhY2VtZW50JDUpIGNvbnRpbnVlIHNpYmxpbmdzO1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZS5jaGlsZCB8fCBub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCQ3KSBjb250aW51ZSBzaWJsaW5ncztcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlLCBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCEobm9kZS5lZmZlY3RUYWcgJiBQbGFjZW1lbnQkNSkpIHJldHVybiBub2RlLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21taXRQbGFjZW1lbnQoZmluaXNoZWRXb3JrKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50RmliZXIgPSBnZXRIb3N0UGFyZW50RmliZXIoZmluaXNoZWRXb3JrKSwgcGFyZW50ID0gdm9pZCAwLCBpc0NvbnRhaW5lciA9IHZvaWQgMDtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyZW50RmliZXIudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudCQ4OlxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZSwgaXNDb250YWluZXIgPSAhMTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RSb290JDg6XG4gICAgICAgICAgICAgIGNhc2UgSG9zdFBvcnRhbCQ3OlxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLCBpc0NvbnRhaW5lciA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KCExLCBcIkludmFsaWQgaG9zdCBwYXJlbnQgZmliZXIuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBcIiArIFwiaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudEZpYmVyLmVmZmVjdFRhZyAmIENvbnRlbnRSZXNldCQyICYmIChyZXNldFRleHRDb250ZW50KHBhcmVudCksIHBhcmVudEZpYmVyLmVmZmVjdFRhZyAmPSB+Q29udGVudFJlc2V0JDIpO1xuICAgICAgICAgICAgZm9yICh2YXIgYmVmb3JlID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKSwgbm9kZSA9IGZpbmlzaGVkV29yazsgITA7ICkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCQ4IHx8IG5vZGUudGFnID09PSBIb3N0VGV4dCQ2KSBiZWZvcmUgPyBpc0NvbnRhaW5lciA/IGluc2VydEluQ29udGFpbmVyQmVmb3JlKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUsIGJlZm9yZSkgOiBpbnNlcnRCZWZvcmUocGFyZW50LCBub2RlLnN0YXRlTm9kZSwgYmVmb3JlKSA6IGlzQ29udGFpbmVyID8gYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcihwYXJlbnQsIG5vZGUuc3RhdGVOb2RlKSA6IGFwcGVuZENoaWxkKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpOyBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCQ3KSA7IGVsc2UgaWYgKG51bGwgIT09IG5vZGUuY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlLCBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub2RlID09PSBmaW5pc2hlZFdvcmspIHJldHVybjtcbiAgICAgICAgICAgICAgICBmb3IgKDtudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybiwgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21taXROZXN0ZWRVbm1vdW50cyhyb290KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBub2RlID0gcm9vdDsgITA7ICkgaWYgKGNvbW1pdFVubW91bnQobm9kZSksIG51bGwgPT09IG5vZGUuY2hpbGQgfHwgbm9kZS50YWcgPT09IEhvc3RQb3J0YWwkNykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlID09PSByb290KSByZXR1cm47XG4gICAgICAgICAgICAgICAgZm9yICg7bnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSByb290KSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuLCBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgICAgICAgICAgfSBlbHNlIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZSwgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW5tb3VudEhvc3RDb21wb25lbnRzKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5vZGUgPSBjdXJyZW50LCBjdXJyZW50UGFyZW50SXNWYWxpZCA9ICExLCBjdXJyZW50UGFyZW50ID0gdm9pZCAwLCBjdXJyZW50UGFyZW50SXNDb250YWluZXIgPSB2b2lkIDA7ICEwOyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRQYXJlbnRJc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgZmluZFBhcmVudDogZm9yICg7ITA7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbnZhcmlhbnQobnVsbCAhPT0gcGFyZW50LCBcIkV4cGVjdGVkIHRvIGZpbmQgYSBob3N0IHBhcmVudC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IFwiICsgXCJhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50JDg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGUsIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGZpbmRQYXJlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBIb3N0Um9vdCQ4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEhvc3RQb3J0YWwkNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvLCBjdXJyZW50UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBmaW5kUGFyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFyZW50SXNWYWxpZCA9ICEwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQkOCB8fCBub2RlLnRhZyA9PT0gSG9zdFRleHQkNikgY29tbWl0TmVzdGVkVW5tb3VudHMobm9kZSksIFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA/IHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcihjdXJyZW50UGFyZW50LCBub2RlLnN0YXRlTm9kZSkgOiByZW1vdmVDaGlsZChjdXJyZW50UGFyZW50LCBub2RlLnN0YXRlTm9kZSk7IGVsc2UgaWYgKG5vZGUudGFnID09PSBIb3N0UG9ydGFsJDcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQYXJlbnQgPSBub2RlLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLCBudWxsICE9PSBub2RlLmNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGUsIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1pdFVubW91bnQobm9kZSksIG51bGwgIT09IG5vZGUuY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlLCBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub2RlID09PSBjdXJyZW50KSByZXR1cm47XG4gICAgICAgICAgICAgICAgZm9yICg7bnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSBjdXJyZW50KSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJldHVybiwgbm9kZS50YWcgPT09IEhvc3RQb3J0YWwkNyAmJiAoY3VycmVudFBhcmVudElzVmFsaWQgPSAhMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybiwgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21taXREZWxldGlvbihjdXJyZW50KSB7XG4gICAgICAgICAgICB1bm1vdW50SG9zdENvbXBvbmVudHMoY3VycmVudCksIGN1cnJlbnQucmV0dXJuID0gbnVsbCwgY3VycmVudC5jaGlsZCA9IG51bGwsIGN1cnJlbnQuYWx0ZXJuYXRlICYmIChjdXJyZW50LmFsdGVybmF0ZS5jaGlsZCA9IG51bGwsIFxuICAgICAgICAgICAgY3VycmVudC5hbHRlcm5hdGUucmV0dXJuID0gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY29tbWl0VW5tb3VudChjdXJyZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygb25Db21taXRVbm1vdW50ICYmIG9uQ29tbWl0VW5tb3VudChjdXJyZW50KSwgY3VycmVudC50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudCQ5OlxuICAgICAgICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCAmJiBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoY3VycmVudCwgaW5zdGFuY2UpKTtcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQkODpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCk7XG5cbiAgICAgICAgICAgICAgY2FzZSBDb3JvdXRpbmVDb21wb25lbnQkNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBjb21taXROZXN0ZWRVbm1vdW50cyhjdXJyZW50LnN0YXRlTm9kZSk7XG5cbiAgICAgICAgICAgICAgY2FzZSBIb3N0UG9ydGFsJDc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgdW5tb3VudEhvc3RDb21wb25lbnRzKGN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbW1pdFdvcmsoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudCQ5OlxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQkODpcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgIGlmIChudWxsICE9IGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdQcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLCBvbGRQcm9wcyA9IG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50Lm1lbW9pemVkUHJvcHMgOiBuZXdQcm9wcywgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlLCB1cGRhdGVQYXlsb2FkID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsLCBudWxsICE9PSB1cGRhdGVQYXlsb2FkICYmIGNvbW1pdFVwZGF0ZShpbnN0YW5jZSwgdXBkYXRlUGF5bG9hZCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgY2FzZSBIb3N0VGV4dCQ2OlxuICAgICAgICAgICAgICAgIGludmFyaWFudChudWxsICE9PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlLCBcIlRoaXMgc2hvdWxkIGhhdmUgYSB0ZXh0IG5vZGUgaW5pdGlhbGl6ZWQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IFwiICsgXCJjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKTtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dEluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSwgbmV3VGV4dCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLCBvbGRUZXh0ID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IG5ld1RleHQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgY29tbWl0VGV4dFVwZGF0ZSh0ZXh0SW5zdGFuY2UsIG9sZFRleHQsIG5ld1RleHQpO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdFJvb3QkODpcbiAgICAgICAgICAgICAgY2FzZSBIb3N0UG9ydGFsJDc6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KCExLCBcIlRoaXMgdW5pdCBvZiB3b3JrIHRhZyBzaG91bGQgbm90IGhhdmUgc2lkZS1lZmZlY3RzLiBUaGlzIGVycm9yIGlzIFwiICsgXCJsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY29tbWl0TGlmZUN5Y2xlcyhjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIENsYXNzQ29tcG9uZW50JDk6XG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICBpZiAoZmluaXNoZWRXb3JrLmVmZmVjdFRhZyAmIFVwZGF0ZSQzKSBpZiAobnVsbCA9PT0gY3VycmVudCkgc3RhcnRQaGFzZVRpbWVyJDIoZmluaXNoZWRXb3JrLCBcImNvbXBvbmVudERpZE1vdW50XCIpLCBcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLCBpbnN0YW5jZS5zdGF0ZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLCBcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCgpLCBzdG9wUGhhc2VUaW1lciQyKCk7IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldlByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzLCBwcmV2U3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UGhhc2VUaW1lciQyKGZpbmlzaGVkV29yaywgXCJjb21wb25lbnREaWRVcGRhdGVcIiksIGluc3RhbmNlLnByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsIFxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdGF0ZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLCBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpLCBcbiAgICAgICAgICAgICAgICAgICAgc3RvcFBoYXNlVGltZXIkMigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoZmluaXNoZWRXb3JrLmVmZmVjdFRhZyAmIENhbGxiYWNrJDEgJiYgbnVsbCAhPT0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlICYmIGNvbW1pdENhbGxiYWNrcyQxKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlLCBpbnN0YW5jZSkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdFJvb3QkODpcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWU7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHVwZGF0ZVF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuY2hpbGQgJiYgZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWl0Q2FsbGJhY2tzJDEoZmluaXNoZWRXb3JrLCB1cGRhdGVRdWV1ZSwgX2luc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudCQ4OlxuICAgICAgICAgICAgICAgIHZhciBfaW5zdGFuY2UyID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCAmJiBmaW5pc2hlZFdvcmsuZWZmZWN0VGFnICYgVXBkYXRlJDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZSwgcHJvcHMgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgICAgICAgY29tbWl0TW91bnQoX2luc3RhbmNlMiwgdHlwZSwgcHJvcHMsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RUZXh0JDY6XG4gICAgICAgICAgICAgIGNhc2UgSG9zdFBvcnRhbCQ3OlxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGludmFyaWFudCghMSwgXCJUaGlzIHVuaXQgb2Ygd29yayB0YWcgc2hvdWxkIG5vdCBoYXZlIHNpZGUtZWZmZWN0cy4gVGhpcyBlcnJvciBpcyBcIiArIFwibGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbW1pdEF0dGFjaFJlZihmaW5pc2hlZFdvcmspIHtcbiAgICAgICAgICAgIHZhciByZWYgPSBmaW5pc2hlZFdvcmsucmVmO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHJlZikge1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQkODpcbiAgICAgICAgICAgICAgICAgICAgcmVmKGdldFB1YmxpY0luc3RhbmNlKGluc3RhbmNlKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWYoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21taXREZXRhY2hSZWYoY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWYgPSBjdXJyZW50LnJlZjtcbiAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnRSZWYgJiYgY3VycmVudFJlZihudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tbWl0UGxhY2VtZW50OiBjb21taXRQbGFjZW1lbnQsXG4gICAgICAgICAgICBjb21taXREZWxldGlvbjogY29tbWl0RGVsZXRpb24sXG4gICAgICAgICAgICBjb21taXRXb3JrOiBjb21taXRXb3JrLFxuICAgICAgICAgICAgY29tbWl0TGlmZUN5Y2xlczogY29tbWl0TGlmZUN5Y2xlcyxcbiAgICAgICAgICAgIGNvbW1pdEF0dGFjaFJlZjogY29tbWl0QXR0YWNoUmVmLFxuICAgICAgICAgICAgY29tbWl0RGV0YWNoUmVmOiBjb21taXREZXRhY2hSZWZcbiAgICAgICAgfTtcbiAgICB9LCBjcmVhdGVDdXJzb3IkMiA9IFJlYWN0RmliZXJTdGFjay5jcmVhdGVDdXJzb3IsIHBvcCQyID0gUmVhY3RGaWJlclN0YWNrLnBvcCwgcHVzaCQyID0gUmVhY3RGaWJlclN0YWNrLnB1c2gsIE5PX0NPTlRFWFQgPSB7fSwgUmVhY3RGaWJlckhvc3RDb250ZXh0ID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHZhciBnZXRDaGlsZEhvc3RDb250ZXh0ID0gY29uZmlnLmdldENoaWxkSG9zdENvbnRleHQsIGdldFJvb3RIb3N0Q29udGV4dCA9IGNvbmZpZy5nZXRSb290SG9zdENvbnRleHQsIGNvbnRleHRTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvciQyKE5PX0NPTlRFWFQpLCBjb250ZXh0RmliZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvciQyKE5PX0NPTlRFWFQpLCByb290SW5zdGFuY2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvciQyKE5PX0NPTlRFWFQpO1xuICAgICAgICBmdW5jdGlvbiByZXF1aXJlZENvbnRleHQoYykge1xuICAgICAgICAgICAgcmV0dXJuIGludmFyaWFudChjICE9PSBOT19DT05URVhULCBcIkV4cGVjdGVkIGhvc3QgY29udGV4dCB0byBleGlzdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIFwiICsgXCJpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpLCBcbiAgICAgICAgICAgIGM7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0Um9vdEhvc3RDb250YWluZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZWRDb250ZXh0KHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHB1c2hIb3N0Q29udGFpbmVyKGZpYmVyLCBuZXh0Um9vdEluc3RhbmNlKSB7XG4gICAgICAgICAgICBwdXNoJDIocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UsIGZpYmVyKTtcbiAgICAgICAgICAgIHZhciBuZXh0Um9vdENvbnRleHQgPSBnZXRSb290SG9zdENvbnRleHQobmV4dFJvb3RJbnN0YW5jZSk7XG4gICAgICAgICAgICBwdXNoJDIoY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyLCBmaWJlciksIHB1c2gkMihjb250ZXh0U3RhY2tDdXJzb3IsIG5leHRSb290Q29udGV4dCwgZmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBvcEhvc3RDb250YWluZXIoZmliZXIpIHtcbiAgICAgICAgICAgIHBvcCQyKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpLCBwb3AkMihjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpLCBwb3AkMihyb290SW5zdGFuY2VTdGFja0N1cnNvciwgZmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEhvc3RDb250ZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmVkQ29udGV4dChjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHVzaEhvc3RDb250ZXh0KGZpYmVyKSB7XG4gICAgICAgICAgICB2YXIgcm9vdEluc3RhbmNlID0gcmVxdWlyZWRDb250ZXh0KHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQpLCBjb250ZXh0ID0gcmVxdWlyZWRDb250ZXh0KGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50KSwgbmV4dENvbnRleHQgPSBnZXRDaGlsZEhvc3RDb250ZXh0KGNvbnRleHQsIGZpYmVyLnR5cGUsIHJvb3RJbnN0YW5jZSk7XG4gICAgICAgICAgICBjb250ZXh0ICE9PSBuZXh0Q29udGV4dCAmJiAocHVzaCQyKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlciwgZmliZXIpLCBwdXNoJDIoY29udGV4dFN0YWNrQ3Vyc29yLCBuZXh0Q29udGV4dCwgZmliZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwb3BIb3N0Q29udGV4dChmaWJlcikge1xuICAgICAgICAgICAgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IuY3VycmVudCA9PT0gZmliZXIgJiYgKHBvcCQyKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpLCBcbiAgICAgICAgICAgIHBvcCQyKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlcikpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0SG9zdENvbnRhaW5lcigpIHtcbiAgICAgICAgICAgIGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50ID0gTk9fQ09OVEVYVCwgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudCA9IE5PX0NPTlRFWFQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldEhvc3RDb250ZXh0OiBnZXRIb3N0Q29udGV4dCxcbiAgICAgICAgICAgIGdldFJvb3RIb3N0Q29udGFpbmVyOiBnZXRSb290SG9zdENvbnRhaW5lcixcbiAgICAgICAgICAgIHBvcEhvc3RDb250YWluZXI6IHBvcEhvc3RDb250YWluZXIsXG4gICAgICAgICAgICBwb3BIb3N0Q29udGV4dDogcG9wSG9zdENvbnRleHQsXG4gICAgICAgICAgICBwdXNoSG9zdENvbnRhaW5lcjogcHVzaEhvc3RDb250YWluZXIsXG4gICAgICAgICAgICBwdXNoSG9zdENvbnRleHQ6IHB1c2hIb3N0Q29udGV4dCxcbiAgICAgICAgICAgIHJlc2V0SG9zdENvbnRhaW5lcjogcmVzZXRIb3N0Q29udGFpbmVyXG4gICAgICAgIH07XG4gICAgfSwgSG9zdENvbXBvbmVudCQ5ID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RDb21wb25lbnQsIEhvc3RUZXh0JDcgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFRleHQsIEhvc3RSb290JDkgPSBSZWFjdFR5cGVPZldvcmsuSG9zdFJvb3QsIERlbGV0aW9uJDIgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuRGVsZXRpb24sIFBsYWNlbWVudCQ2ID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlBsYWNlbWVudCwgY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb24kMSA9IFJlYWN0RmliZXIuY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb24sIFJlYWN0RmliZXJIeWRyYXRpb25Db250ZXh0ID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHZhciBzaG91bGRTZXRUZXh0Q29udGVudCA9IGNvbmZpZy5zaG91bGRTZXRUZXh0Q29udGVudCwgY2FuSHlkcmF0ZUluc3RhbmNlID0gY29uZmlnLmNhbkh5ZHJhdGVJbnN0YW5jZSwgY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSA9IGNvbmZpZy5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLCBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcgPSBjb25maWcuZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nLCBnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCA9IGNvbmZpZy5nZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCwgaHlkcmF0ZUluc3RhbmNlID0gY29uZmlnLmh5ZHJhdGVJbnN0YW5jZSwgaHlkcmF0ZVRleHRJbnN0YW5jZSA9IGNvbmZpZy5oeWRyYXRlVGV4dEluc3RhbmNlLCBkaWROb3RIeWRyYXRlSW5zdGFuY2UgPSBjb25maWcuZGlkTm90SHlkcmF0ZUluc3RhbmNlLCBkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlID0gY29uZmlnLmRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UsIGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlID0gY29uZmlnLmRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlO1xuICAgICAgICBpZiAoIShjYW5IeWRyYXRlSW5zdGFuY2UgJiYgY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSAmJiBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcgJiYgZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQgJiYgaHlkcmF0ZUluc3RhbmNlICYmIGh5ZHJhdGVUZXh0SW5zdGFuY2UgJiYgZGlkTm90SHlkcmF0ZUluc3RhbmNlICYmIGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UgJiYgZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UpKSByZXR1cm4ge1xuICAgICAgICAgICAgZW50ZXJIeWRyYXRpb25TdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGU6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICB0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGludmFyaWFudCghMSwgXCJFeHBlY3RlZCBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKCkgdG8gbmV2ZXIgYmUgY2FsbGVkLiBcIiArIFwiVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGludmFyaWFudCghMSwgXCJFeHBlY3RlZCBwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSgpIHRvIG5ldmVyIGJlIGNhbGxlZC4gXCIgKyBcIlRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlOiBmdW5jdGlvbihmaWJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbCwgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGwsIGlzSHlkcmF0aW5nID0gITE7XG4gICAgICAgIGZ1bmN0aW9uIGVudGVySHlkcmF0aW9uU3RhdGUoZmliZXIpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnRJbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICAgICAgcmV0dXJuIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZChwYXJlbnRJbnN0YW5jZSksIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXIsIFxuICAgICAgICAgICAgaXNIeWRyYXRpbmcgPSAhMCwgITA7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlSHlkcmF0YWJsZUluc3RhbmNlKHJldHVybkZpYmVyLCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgc3dpdGNoIChyZXR1cm5GaWJlci50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSBIb3N0Um9vdCQ5OlxuICAgICAgICAgICAgICAgIGRpZE5vdEh5ZHJhdGVJbnN0YW5jZShyZXR1cm5GaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbywgaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudCQ5OlxuICAgICAgICAgICAgICAgIGRpZE5vdEh5ZHJhdGVJbnN0YW5jZShyZXR1cm5GaWJlci5zdGF0ZU5vZGUsIGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaGlsZFRvRGVsZXRlID0gY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb24kMSgpO1xuICAgICAgICAgICAgY2hpbGRUb0RlbGV0ZS5zdGF0ZU5vZGUgPSBpbnN0YW5jZSwgY2hpbGRUb0RlbGV0ZS5yZXR1cm4gPSByZXR1cm5GaWJlciwgY2hpbGRUb0RlbGV0ZS5lZmZlY3RUYWcgPSBEZWxldGlvbiQyLCBcbiAgICAgICAgICAgIG51bGwgIT09IHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPyAocmV0dXJuRmliZXIubGFzdEVmZmVjdC5uZXh0RWZmZWN0ID0gY2hpbGRUb0RlbGV0ZSwgXG4gICAgICAgICAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gY2hpbGRUb0RlbGV0ZSkgOiByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGluc2VydE5vbkh5ZHJhdGVkSW5zdGFuY2UocmV0dXJuRmliZXIsIGZpYmVyKSB7XG4gICAgICAgICAgICBmaWJlci5lZmZlY3RUYWcgfD0gUGxhY2VtZW50JDY7XG4gICAgICAgICAgICB2YXIgcGFyZW50SW5zdGFuY2U7XG4gICAgICAgICAgICBzd2l0Y2ggKHJldHVybkZpYmVyLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQkOTpcbiAgICAgICAgICAgICAgICBwYXJlbnRJbnN0YW5jZSA9IHJldHVybkZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudCQ5OlxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZmliZXIudHlwZSwgcHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgICAgICAgZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZShwYXJlbnRJbnN0YW5jZSwgdHlwZSwgcHJvcHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgSG9zdFRleHQkNzpcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGZpYmVyLnBlbmRpbmdQcm9wcztcbiAgICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZShwYXJlbnRJbnN0YW5jZSwgdGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2FuSHlkcmF0ZShmaWJlciwgbmV4dEluc3RhbmNlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQkOTpcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGZpYmVyLnR5cGUsIHByb3BzID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW5IeWRyYXRlSW5zdGFuY2UobmV4dEluc3RhbmNlLCB0eXBlLCBwcm9wcyk7XG5cbiAgICAgICAgICAgICAgY2FzZSBIb3N0VGV4dCQ3OlxuICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW5IeWRyYXRlVGV4dEluc3RhbmNlKG5leHRJbnN0YW5jZSwgdGV4dCk7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UoZmliZXIpIHtcbiAgICAgICAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICAgICAgICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGlmICghbmV4dEluc3RhbmNlKSByZXR1cm4gaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZShoeWRyYXRpb25QYXJlbnRGaWJlciwgZmliZXIpLCBcbiAgICAgICAgICAgICAgICBpc0h5ZHJhdGluZyA9ICExLCB2b2lkIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNhbkh5ZHJhdGUoZmliZXIsIG5leHRJbnN0YW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobmV4dEluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nKG5leHRJbnN0YW5jZSkpIHx8ICFjYW5IeWRyYXRlKGZpYmVyLCBuZXh0SW5zdGFuY2UpKSByZXR1cm4gaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZShoeWRyYXRpb25QYXJlbnRGaWJlciwgZmliZXIpLCBcbiAgICAgICAgICAgICAgICAgICAgaXNIeWRyYXRpbmcgPSAhMSwgdm9pZCAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlcik7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZShoeWRyYXRpb25QYXJlbnRGaWJlciwgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpYmVyLnN0YXRlTm9kZSA9IG5leHRJbnN0YW5jZSwgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlciwgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKG5leHRJbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZShmaWJlciwgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlLCB1cGRhdGVQYXlsb2FkID0gaHlkcmF0ZUluc3RhbmNlKGluc3RhbmNlLCBmaWJlci50eXBlLCBmaWJlci5tZW1vaXplZFByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0LCBmaWJlcik7XG4gICAgICAgICAgICByZXR1cm4gZmliZXIudXBkYXRlUXVldWUgPSB1cGRhdGVQYXlsb2FkLCBudWxsICE9PSB1cGRhdGVQYXlsb2FkO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlKGZpYmVyKSB7XG4gICAgICAgICAgICB2YXIgdGV4dEluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgcmV0dXJuIGh5ZHJhdGVUZXh0SW5zdGFuY2UodGV4dEluc3RhbmNlLCBmaWJlci5tZW1vaXplZFByb3BzLCBmaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcikge1xuICAgICAgICAgICAgZm9yICh2YXIgcGFyZW50ID0gZmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQgJiYgcGFyZW50LnRhZyAhPT0gSG9zdENvbXBvbmVudCQ5ICYmIHBhcmVudC50YWcgIT09IEhvc3RSb290JDk7ICkgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBvcEh5ZHJhdGlvblN0YXRlKGZpYmVyKSB7XG4gICAgICAgICAgICBpZiAoZmliZXIgIT09IGh5ZHJhdGlvblBhcmVudEZpYmVyKSByZXR1cm4gITE7XG4gICAgICAgICAgICBpZiAoIWlzSHlkcmF0aW5nKSByZXR1cm4gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlciksIGlzSHlkcmF0aW5nID0gITAsICExO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICAgICAgaWYgKGZpYmVyLnRhZyAhPT0gSG9zdENvbXBvbmVudCQ5IHx8IFwiaGVhZFwiICE9PSB0eXBlICYmIFwiYm9keVwiICE9PSB0eXBlICYmICFzaG91bGRTZXRUZXh0Q29udGVudCh0eXBlLCBmaWJlci5tZW1vaXplZFByb3BzKSkgZm9yICh2YXIgbmV4dEluc3RhbmNlID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZTsgbmV4dEluc3RhbmNlOyApIGRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZShmaWJlciwgbmV4dEluc3RhbmNlKSwgXG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcobmV4dEluc3RhbmNlKTtcbiAgICAgICAgICAgIHJldHVybiBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKSwgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyID8gZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nKGZpYmVyLnN0YXRlTm9kZSkgOiBudWxsLCBcbiAgICAgICAgICAgICEwO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSB7XG4gICAgICAgICAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGwsIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsLCBpc0h5ZHJhdGluZyA9ICExO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbnRlckh5ZHJhdGlvblN0YXRlOiBlbnRlckh5ZHJhdGlvblN0YXRlLFxuICAgICAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZTogcmVzZXRIeWRyYXRpb25TdGF0ZSxcbiAgICAgICAgICAgIHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOiB0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSxcbiAgICAgICAgICAgIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6IHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsXG4gICAgICAgICAgICBwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTogcHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZTogcG9wSHlkcmF0aW9uU3RhdGVcbiAgICAgICAgfTtcbiAgICB9LCBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uJDIgPSB7XG4gICAgICAgIGRlYnVnVG9vbDogbnVsbFxuICAgIH0sIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMSA9IFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24kMiwgcG9wQ29udGV4dFByb3ZpZGVyJDEgPSBSZWFjdEZpYmVyQ29udGV4dC5wb3BDb250ZXh0UHJvdmlkZXIsIHJlc2V0JDEgPSBSZWFjdEZpYmVyU3RhY2sucmVzZXQsIGdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXIkMiA9IFJlYWN0RmliZXJDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyLCBsb2dDYXB0dXJlZEVycm9yJDEgPSBSZWFjdEZpYmVyRXJyb3JMb2dnZXIubG9nQ2FwdHVyZWRFcnJvciwgaW52b2tlR3VhcmRlZENhbGxiYWNrJDEgPSBSZWFjdEVycm9yVXRpbHNfMS5pbnZva2VHdWFyZGVkQ2FsbGJhY2ssIGhhc0NhdWdodEVycm9yID0gUmVhY3RFcnJvclV0aWxzXzEuaGFzQ2F1Z2h0RXJyb3IsIGNsZWFyQ2F1Z2h0RXJyb3IgPSBSZWFjdEVycm9yVXRpbHNfMS5jbGVhckNhdWdodEVycm9yLCBSZWFjdEN1cnJlbnRPd25lciQxID0gUmVhY3RHbG9iYWxTaGFyZWRTdGF0ZV8xLlJlYWN0Q3VycmVudE93bmVyLCBjcmVhdGVXb3JrSW5Qcm9ncmVzcyQxID0gUmVhY3RGaWJlci5jcmVhdGVXb3JrSW5Qcm9ncmVzcywgbGFyZ2VyUHJpb3JpdHkkMSA9IFJlYWN0RmliZXIubGFyZ2VyUHJpb3JpdHksIG9uQ29tbWl0Um9vdCA9IFJlYWN0RmliZXJEZXZUb29sc0hvb2sub25Db21taXRSb290LCBOb1dvcmskMiA9IFJlYWN0UHJpb3JpdHlMZXZlbC5Ob1dvcmssIFN5bmNocm9ub3VzUHJpb3JpdHkkMSA9IFJlYWN0UHJpb3JpdHlMZXZlbC5TeW5jaHJvbm91c1ByaW9yaXR5LCBUYXNrUHJpb3JpdHkkMSA9IFJlYWN0UHJpb3JpdHlMZXZlbC5UYXNrUHJpb3JpdHksIEhpZ2hQcmlvcml0eSA9IFJlYWN0UHJpb3JpdHlMZXZlbC5IaWdoUHJpb3JpdHksIExvd1ByaW9yaXR5ID0gUmVhY3RQcmlvcml0eUxldmVsLkxvd1ByaW9yaXR5LCBPZmZzY3JlZW5Qcmlvcml0eSA9IFJlYWN0UHJpb3JpdHlMZXZlbC5PZmZzY3JlZW5Qcmlvcml0eSwgQXN5bmNVcGRhdGVzID0gUmVhY3RUeXBlT2ZJbnRlcm5hbENvbnRleHQuQXN5bmNVcGRhdGVzLCBQZXJmb3JtZWRXb3JrID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlBlcmZvcm1lZFdvcmssIFBsYWNlbWVudCQxID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlBsYWNlbWVudCwgVXBkYXRlID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlVwZGF0ZSwgUGxhY2VtZW50QW5kVXBkYXRlID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LlBsYWNlbWVudEFuZFVwZGF0ZSwgRGVsZXRpb24gPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuRGVsZXRpb24sIENvbnRlbnRSZXNldCA9IFJlYWN0VHlwZU9mU2lkZUVmZmVjdC5Db250ZW50UmVzZXQsIENhbGxiYWNrID0gUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LkNhbGxiYWNrLCBFcnIgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuRXJyLCBSZWYgPSBSZWFjdFR5cGVPZlNpZGVFZmZlY3QuUmVmLCBIb3N0Um9vdCQ1ID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RSb290LCBIb3N0Q29tcG9uZW50JDUgPSBSZWFjdFR5cGVPZldvcmsuSG9zdENvbXBvbmVudCwgSG9zdFBvcnRhbCQzID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RQb3J0YWwsIENsYXNzQ29tcG9uZW50JDUgPSBSZWFjdFR5cGVPZldvcmsuQ2xhc3NDb21wb25lbnQsIGdldFVwZGF0ZVByaW9yaXR5JDEgPSBSZWFjdEZpYmVyVXBkYXRlUXVldWUuZ2V0VXBkYXRlUHJpb3JpdHksIF9yZXF1aXJlMTQgPSBSZWFjdEZpYmVyQ29udGV4dCwgcmVzZXRDb250ZXh0JDEgPSBfcmVxdWlyZTE0LnJlc2V0Q29udGV4dCwgd2FybmluZyQ2ID0gcmVxdWlyZSQkMCwgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbiQxID0gUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLCBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDMgPSBSZWFjdERlYnVnQ3VycmVudEZpYmVyXzEsIF9yZXF1aXJlMTUgPSBSZWFjdERlYnVnRmliZXJQZXJmXzEsIHJlY29yZEVmZmVjdCA9IF9yZXF1aXJlMTUucmVjb3JkRWZmZWN0LCByZWNvcmRTY2hlZHVsZVVwZGF0ZSA9IF9yZXF1aXJlMTUucmVjb3JkU2NoZWR1bGVVcGRhdGUsIHN0YXJ0V29ya1RpbWVyID0gX3JlcXVpcmUxNS5zdGFydFdvcmtUaW1lciwgc3RvcFdvcmtUaW1lciA9IF9yZXF1aXJlMTUuc3RvcFdvcmtUaW1lciwgc3RvcEZhaWxlZFdvcmtUaW1lciA9IF9yZXF1aXJlMTUuc3RvcEZhaWxlZFdvcmtUaW1lciwgc3RhcnRXb3JrTG9vcFRpbWVyID0gX3JlcXVpcmUxNS5zdGFydFdvcmtMb29wVGltZXIsIHN0b3BXb3JrTG9vcFRpbWVyID0gX3JlcXVpcmUxNS5zdG9wV29ya0xvb3BUaW1lciwgc3RhcnRDb21taXRUaW1lciA9IF9yZXF1aXJlMTUuc3RhcnRDb21taXRUaW1lciwgc3RvcENvbW1pdFRpbWVyID0gX3JlcXVpcmUxNS5zdG9wQ29tbWl0VGltZXIsIHN0YXJ0Q29tbWl0SG9zdEVmZmVjdHNUaW1lciA9IF9yZXF1aXJlMTUuc3RhcnRDb21taXRIb3N0RWZmZWN0c1RpbWVyLCBzdG9wQ29tbWl0SG9zdEVmZmVjdHNUaW1lciA9IF9yZXF1aXJlMTUuc3RvcENvbW1pdEhvc3RFZmZlY3RzVGltZXIsIHN0YXJ0Q29tbWl0TGlmZUN5Y2xlc1RpbWVyID0gX3JlcXVpcmUxNS5zdGFydENvbW1pdExpZmVDeWNsZXNUaW1lciwgc3RvcENvbW1pdExpZmVDeWNsZXNUaW1lciA9IF9yZXF1aXJlMTUuc3RvcENvbW1pdExpZmVDeWNsZXNUaW1lciwgd2FybkFib3V0VXBkYXRlT25Vbm1vdW50ZWQgPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgICAgICB2YXIgY3RvciA9IGluc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgICAgICB3YXJuaW5nJDYoITEsIFwiQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuIFRoaXMgdXN1YWxseSBtZWFucyBcIiArIFwieW91IGNhbGxlZCBzZXRTdGF0ZSwgcmVwbGFjZVN0YXRlLCBvciBmb3JjZVVwZGF0ZSBvbiBhbiB1bm1vdW50ZWQgXCIgKyBcImNvbXBvbmVudC4gVGhpcyBpcyBhIG5vLW9wLlxcblxcblBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlIFwiICsgXCIlcyBjb21wb25lbnQuXCIsIGN0b3IgJiYgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSB8fCBcIlJlYWN0Q2xhc3NcIik7XG4gICAgfSwgd2FybkFib3V0SW52YWxpZFVwZGF0ZXMgPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgICAgICBzd2l0Y2ggKFJlYWN0RGVidWdDdXJyZW50RmliZXIkMy5waGFzZSkge1xuICAgICAgICAgIGNhc2UgXCJnZXRDaGlsZENvbnRleHRcIjpcbiAgICAgICAgICAgIHdhcm5pbmckNighMSwgXCJzZXRTdGF0ZSguLi4pOiBDYW5ub3QgY2FsbCBzZXRTdGF0ZSgpIGluc2lkZSBnZXRDaGlsZENvbnRleHQoKVwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcInJlbmRlclwiOlxuICAgICAgICAgICAgd2FybmluZyQ2KCExLCBcIkNhbm5vdCB1cGRhdGUgZHVyaW5nIGFuIGV4aXN0aW5nIHN0YXRlIHRyYW5zaXRpb24gKHN1Y2ggYXMgd2l0aGluIFwiICsgXCJgcmVuZGVyYCBvciBhbm90aGVyIGNvbXBvbmVudCdzIGNvbnN0cnVjdG9yKS4gUmVuZGVyIG1ldGhvZHMgc2hvdWxkIFwiICsgXCJiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlOyBjb25zdHJ1Y3RvciBzaWRlLWVmZmVjdHMgYXJlIFwiICsgXCJhbiBhbnRpLXBhdHRlcm4sIGJ1dCBjYW4gYmUgbW92ZWQgdG8gYGNvbXBvbmVudFdpbGxNb3VudGAuXCIpO1xuICAgICAgICB9XG4gICAgfSwgdGltZUhldXJpc3RpY0ZvclVuaXRPZldvcmsgPSAxLCBSZWFjdEZpYmVyU2NoZWR1bGVyID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHZhciBob3N0Q29udGV4dCA9IFJlYWN0RmliZXJIb3N0Q29udGV4dChjb25maWcpLCBoeWRyYXRpb25Db250ZXh0ID0gUmVhY3RGaWJlckh5ZHJhdGlvbkNvbnRleHQoY29uZmlnKSwgcG9wSG9zdENvbnRhaW5lciA9IGhvc3RDb250ZXh0LnBvcEhvc3RDb250YWluZXIsIHBvcEhvc3RDb250ZXh0ID0gaG9zdENvbnRleHQucG9wSG9zdENvbnRleHQsIHJlc2V0SG9zdENvbnRhaW5lciA9IGhvc3RDb250ZXh0LnJlc2V0SG9zdENvbnRhaW5lciwgX1JlYWN0RmliZXJCZWdpbldvcmsgPSBSZWFjdEZpYmVyQmVnaW5Xb3JrKGNvbmZpZywgaG9zdENvbnRleHQsIGh5ZHJhdGlvbkNvbnRleHQsIHNjaGVkdWxlVXBkYXRlLCBnZXRQcmlvcml0eUNvbnRleHQpLCBiZWdpbldvcmsgPSBfUmVhY3RGaWJlckJlZ2luV29yay5iZWdpbldvcmssIGJlZ2luRmFpbGVkV29yayA9IF9SZWFjdEZpYmVyQmVnaW5Xb3JrLmJlZ2luRmFpbGVkV29yaywgX1JlYWN0RmliZXJDb21wbGV0ZVdvID0gUmVhY3RGaWJlckNvbXBsZXRlV29yayhjb25maWcsIGhvc3RDb250ZXh0LCBoeWRyYXRpb25Db250ZXh0KSwgY29tcGxldGVXb3JrID0gX1JlYWN0RmliZXJDb21wbGV0ZVdvLmNvbXBsZXRlV29yaywgX1JlYWN0RmliZXJDb21taXRXb3JrID0gUmVhY3RGaWJlckNvbW1pdFdvcmsoY29uZmlnLCBjYXB0dXJlRXJyb3IpLCBjb21taXRQbGFjZW1lbnQgPSBfUmVhY3RGaWJlckNvbW1pdFdvcmsuY29tbWl0UGxhY2VtZW50LCBjb21taXREZWxldGlvbiA9IF9SZWFjdEZpYmVyQ29tbWl0V29yay5jb21taXREZWxldGlvbiwgY29tbWl0V29yayA9IF9SZWFjdEZpYmVyQ29tbWl0V29yay5jb21taXRXb3JrLCBjb21taXRMaWZlQ3ljbGVzID0gX1JlYWN0RmliZXJDb21taXRXb3JrLmNvbW1pdExpZmVDeWNsZXMsIGNvbW1pdEF0dGFjaFJlZiA9IF9SZWFjdEZpYmVyQ29tbWl0V29yay5jb21taXRBdHRhY2hSZWYsIGNvbW1pdERldGFjaFJlZiA9IF9SZWFjdEZpYmVyQ29tbWl0V29yay5jb21taXREZXRhY2hSZWYsIHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayA9IGNvbmZpZy5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssIHVzZVN5bmNTY2hlZHVsaW5nID0gY29uZmlnLnVzZVN5bmNTY2hlZHVsaW5nLCBwcmVwYXJlRm9yQ29tbWl0ID0gY29uZmlnLnByZXBhcmVGb3JDb21taXQsIHJlc2V0QWZ0ZXJDb21taXQgPSBjb25maWcucmVzZXRBZnRlckNvbW1pdCwgcHJpb3JpdHlDb250ZXh0ID0gTm9Xb3JrJDIsIGlzUGVyZm9ybWluZ1dvcmsgPSAhMSwgZGVhZGxpbmVIYXNFeHBpcmVkID0gITEsIGlzQmF0Y2hpbmdVcGRhdGVzID0gITEsIGlzVW5iYXRjaGluZ1VwZGF0ZXMgPSAhMSwgbmV4dFVuaXRPZldvcmsgPSBudWxsLCBuZXh0UHJpb3JpdHlMZXZlbCA9IE5vV29yayQyLCBuZXh0RWZmZWN0ID0gbnVsbCwgcGVuZGluZ0NvbW1pdCA9IG51bGwsIG5leHRTY2hlZHVsZWRSb290ID0gbnVsbCwgbGFzdFNjaGVkdWxlZFJvb3QgPSBudWxsLCBpc0NhbGxiYWNrU2NoZWR1bGVkID0gITEsIGNhcHR1cmVkRXJyb3JzID0gbnVsbCwgZmFpbGVkQm91bmRhcmllcyA9IG51bGwsIGNvbW1pdFBoYXNlQm91bmRhcmllcyA9IG51bGwsIGZpcnN0VW5jYXVnaHRFcnJvciA9IG51bGwsIGRpZEZhdGFsID0gITEsIGlzQ29tbWl0dGluZyA9ICExLCBpc1VubW91bnRpbmcgPSAhMSwgTkVTVEVEX1VQREFURV9MSU1JVCA9IDFlMywgbmVzdGVkVXBkYXRlQ291bnQgPSAwLCBuZXh0UmVuZGVyZWRUcmVlID0gbnVsbDtcbiAgICAgICAgZnVuY3Rpb24gcmVzZXRDb250ZXh0U3RhY2soKSB7XG4gICAgICAgICAgICByZXNldCQxKCksIHJlc2V0Q29udGV4dCQxKCksIHJlc2V0SG9zdENvbnRhaW5lcigpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0TmV4dFVuaXRPZldvcmsoKSB7XG4gICAgICAgICAgICBmb3IgKDtudWxsICE9PSBuZXh0U2NoZWR1bGVkUm9vdCAmJiBuZXh0U2NoZWR1bGVkUm9vdC5jdXJyZW50LnBlbmRpbmdXb3JrUHJpb3JpdHkgPT09IE5vV29yayQyOyApIHtcbiAgICAgICAgICAgICAgICBuZXh0U2NoZWR1bGVkUm9vdC5pc1NjaGVkdWxlZCA9ICExO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gbmV4dFNjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3Q7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRTY2hlZHVsZWRSb290Lm5leHRTY2hlZHVsZWRSb290ID0gbnVsbCwgbmV4dFNjaGVkdWxlZFJvb3QgPT09IGxhc3RTY2hlZHVsZWRSb290KSByZXR1cm4gbmV4dFNjaGVkdWxlZFJvb3QgPSBudWxsLCBcbiAgICAgICAgICAgICAgICBsYXN0U2NoZWR1bGVkUm9vdCA9IG51bGwsIG5leHRQcmlvcml0eUxldmVsID0gTm9Xb3JrJDIsIG51bGw7XG4gICAgICAgICAgICAgICAgbmV4dFNjaGVkdWxlZFJvb3QgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgcm9vdCA9IG5leHRTY2hlZHVsZWRSb290LCBoaWdoZXN0UHJpb3JpdHlSb290ID0gbnVsbCwgaGlnaGVzdFByaW9yaXR5TGV2ZWwgPSBOb1dvcmskMjsgbnVsbCAhPT0gcm9vdDsgKSByb290LmN1cnJlbnQucGVuZGluZ1dvcmtQcmlvcml0eSAhPT0gTm9Xb3JrJDIgJiYgKGhpZ2hlc3RQcmlvcml0eUxldmVsID09PSBOb1dvcmskMiB8fCBoaWdoZXN0UHJpb3JpdHlMZXZlbCA+IHJvb3QuY3VycmVudC5wZW5kaW5nV29ya1ByaW9yaXR5KSAmJiAoaGlnaGVzdFByaW9yaXR5TGV2ZWwgPSByb290LmN1cnJlbnQucGVuZGluZ1dvcmtQcmlvcml0eSwgXG4gICAgICAgICAgICBoaWdoZXN0UHJpb3JpdHlSb290ID0gcm9vdCksIHJvb3QgPSByb290Lm5leHRTY2hlZHVsZWRSb290O1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGhpZ2hlc3RQcmlvcml0eVJvb3QpIHJldHVybiBuZXh0UHJpb3JpdHlMZXZlbCA9IGhpZ2hlc3RQcmlvcml0eUxldmVsLCBcbiAgICAgICAgICAgIHJlc2V0Q29udGV4dFN0YWNrKCksIG5leHRVbml0T2ZXb3JrID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MkMShoaWdoZXN0UHJpb3JpdHlSb290LmN1cnJlbnQsIGhpZ2hlc3RQcmlvcml0eUxldmVsKSwgXG4gICAgICAgICAgICB2b2lkIChoaWdoZXN0UHJpb3JpdHlSb290ICE9PSBuZXh0UmVuZGVyZWRUcmVlICYmIChuZXN0ZWRVcGRhdGVDb3VudCA9IDAsIG5leHRSZW5kZXJlZFRyZWUgPSBoaWdoZXN0UHJpb3JpdHlSb290KSk7XG4gICAgICAgICAgICBuZXh0UHJpb3JpdHlMZXZlbCA9IE5vV29yayQyLCBuZXh0VW5pdE9mV29yayA9IG51bGwsIG5leHRSZW5kZXJlZFRyZWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbW1pdEFsbEhvc3RFZmZlY3RzKCkge1xuICAgICAgICAgICAgZm9yICg7bnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgICAgICAgICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQzLnNldEN1cnJlbnRGaWJlcihuZXh0RWZmZWN0KSwgcmVjb3JkRWZmZWN0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGVmZmVjdFRhZyA9IG5leHRFZmZlY3QuZWZmZWN0VGFnO1xuICAgICAgICAgICAgICAgIGlmIChlZmZlY3RUYWcgJiBDb250ZW50UmVzZXQgJiYgY29uZmlnLnJlc2V0VGV4dENvbnRlbnQobmV4dEVmZmVjdC5zdGF0ZU5vZGUpLCBlZmZlY3RUYWcgJiBSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBuZXh0RWZmZWN0LmFsdGVybmF0ZTtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBjb21taXREZXRhY2hSZWYoY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZWZmZWN0VGFnICYgfihDYWxsYmFjayB8IEVyciB8IENvbnRlbnRSZXNldCB8IFJlZiB8IFBlcmZvcm1lZFdvcmspKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFBsYWNlbWVudCQxOlxuICAgICAgICAgICAgICAgICAgICBjb21taXRQbGFjZW1lbnQobmV4dEVmZmVjdCksIG5leHRFZmZlY3QuZWZmZWN0VGFnICY9IH5QbGFjZW1lbnQkMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgUGxhY2VtZW50QW5kVXBkYXRlOlxuICAgICAgICAgICAgICAgICAgICBjb21taXRQbGFjZW1lbnQobmV4dEVmZmVjdCksIG5leHRFZmZlY3QuZWZmZWN0VGFnICY9IH5QbGFjZW1lbnQkMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9jdXJyZW50ID0gbmV4dEVmZmVjdC5hbHRlcm5hdGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1pdFdvcmsoX2N1cnJlbnQsIG5leHRFZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBVcGRhdGU6XG4gICAgICAgICAgICAgICAgICAgIHZhciBfY3VycmVudDIgPSBuZXh0RWZmZWN0LmFsdGVybmF0ZTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWl0V29yayhfY3VycmVudDIsIG5leHRFZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBEZWxldGlvbjpcbiAgICAgICAgICAgICAgICAgICAgaXNVbm1vdW50aW5nID0gITAsIGNvbW1pdERlbGV0aW9uKG5leHRFZmZlY3QpLCBpc1VubW91bnRpbmcgPSAhMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMy5yZXNldEN1cnJlbnRGaWJlcigpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbW1pdEFsbExpZmVDeWNsZXMoKSB7XG4gICAgICAgICAgICBmb3IgKDtudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICAgICAgICAgICAgICB2YXIgZWZmZWN0VGFnID0gbmV4dEVmZmVjdC5lZmZlY3RUYWc7XG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdFRhZyAmIChVcGRhdGUgfCBDYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkRWZmZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gbmV4dEVmZmVjdC5hbHRlcm5hdGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1pdExpZmVDeWNsZXMoY3VycmVudCwgbmV4dEVmZmVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVmZmVjdFRhZyAmIFJlZiAmJiAocmVjb3JkRWZmZWN0KCksIGNvbW1pdEF0dGFjaFJlZihuZXh0RWZmZWN0KSksIGVmZmVjdFRhZyAmIEVyciAmJiAocmVjb3JkRWZmZWN0KCksIFxuICAgICAgICAgICAgICAgIGNvbW1pdEVycm9ySGFuZGxpbmcobmV4dEVmZmVjdCkpO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gbmV4dEVmZmVjdC5uZXh0RWZmZWN0O1xuICAgICAgICAgICAgICAgIG5leHRFZmZlY3QubmV4dEVmZmVjdCA9IG51bGwsIG5leHRFZmZlY3QgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNvbW1pdEFsbFdvcmsoZmluaXNoZWRXb3JrKSB7XG4gICAgICAgICAgICBpc0NvbW1pdHRpbmcgPSAhMCwgc3RhcnRDb21taXRUaW1lcigpLCBwZW5kaW5nQ29tbWl0ID0gbnVsbDtcbiAgICAgICAgICAgIHZhciByb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIGludmFyaWFudChyb290LmN1cnJlbnQgIT09IGZpbmlzaGVkV29yaywgXCJDYW5ub3QgY29tbWl0IHRoZSBzYW1lIHRyZWUgYXMgYmVmb3JlLiBUaGlzIGlzIHByb2JhYmx5IGEgYnVnIFwiICsgXCJyZWxhdGVkIHRvIHRoZSByZXR1cm4gZmllbGQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBcIiArIFwiaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSwgXG4gICAgICAgICAgICBuZXh0UHJpb3JpdHlMZXZlbCAhPT0gU3luY2hyb25vdXNQcmlvcml0eSQxICYmIG5leHRQcmlvcml0eUxldmVsICE9PSBUYXNrUHJpb3JpdHkkMSB8fCBuZXN0ZWRVcGRhdGVDb3VudCsrLCBcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgZmlyc3RFZmZlY3QgPSB2b2lkIDA7XG4gICAgICAgICAgICBmb3IgKGZpbmlzaGVkV29yay5lZmZlY3RUYWcgPiBQZXJmb3JtZWRXb3JrID8gbnVsbCAhPT0gZmluaXNoZWRXb3JrLmxhc3RFZmZlY3QgPyAoZmluaXNoZWRXb3JrLmxhc3RFZmZlY3QubmV4dEVmZmVjdCA9IGZpbmlzaGVkV29yaywgXG4gICAgICAgICAgICBmaXJzdEVmZmVjdCA9IGZpbmlzaGVkV29yay5maXJzdEVmZmVjdCkgOiBmaXJzdEVmZmVjdCA9IGZpbmlzaGVkV29yayA6IGZpcnN0RWZmZWN0ID0gZmluaXNoZWRXb3JrLmZpcnN0RWZmZWN0LCBcbiAgICAgICAgICAgIHByZXBhcmVGb3JDb21taXQoKSwgbmV4dEVmZmVjdCA9IGZpcnN0RWZmZWN0LCBzdGFydENvbW1pdEhvc3RFZmZlY3RzVGltZXIoKTsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpZEVycm9yID0gITEsIF9lcnJvciA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2skMShudWxsLCBjb21taXRBbGxIb3N0RWZmZWN0cywgbnVsbCksIGhhc0NhdWdodEVycm9yKCkgJiYgKGRpZEVycm9yID0gITAsIFxuICAgICAgICAgICAgICAgIF9lcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKSksIGRpZEVycm9yICYmIChpbnZhcmlhbnQobnVsbCAhPT0gbmV4dEVmZmVjdCwgXCJTaG91bGQgaGF2ZSBuZXh0IGVmZmVjdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIFwiICsgXCJpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpLCBcbiAgICAgICAgICAgICAgICBjYXB0dXJlRXJyb3IobmV4dEVmZmVjdCwgX2Vycm9yKSwgbnVsbCAhPT0gbmV4dEVmZmVjdCAmJiAobmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChzdG9wQ29tbWl0SG9zdEVmZmVjdHNUaW1lcigpLCByZXNldEFmdGVyQ29tbWl0KCksIHJvb3QuY3VycmVudCA9IGZpbmlzaGVkV29yaywgXG4gICAgICAgICAgICBuZXh0RWZmZWN0ID0gZmlyc3RFZmZlY3QsIHN0YXJ0Q29tbWl0TGlmZUN5Y2xlc1RpbWVyKCk7IG51bGwgIT09IG5leHRFZmZlY3Q7ICkge1xuICAgICAgICAgICAgICAgIHZhciBfZGlkRXJyb3IgPSAhMSwgX2Vycm9yMiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2skMShudWxsLCBjb21taXRBbGxMaWZlQ3ljbGVzLCBudWxsKSwgaGFzQ2F1Z2h0RXJyb3IoKSAmJiAoX2RpZEVycm9yID0gITAsIFxuICAgICAgICAgICAgICAgIF9lcnJvcjIgPSBjbGVhckNhdWdodEVycm9yKCkpLCBfZGlkRXJyb3IgJiYgKGludmFyaWFudChudWxsICE9PSBuZXh0RWZmZWN0LCBcIlNob3VsZCBoYXZlIG5leHQgZWZmZWN0LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgXCIgKyBcImluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIiksIFxuICAgICAgICAgICAgICAgIGNhcHR1cmVFcnJvcihuZXh0RWZmZWN0LCBfZXJyb3IyKSwgbnVsbCAhPT0gbmV4dEVmZmVjdCAmJiAobmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNDb21taXR0aW5nID0gITEsIHN0b3BDb21taXRMaWZlQ3ljbGVzVGltZXIoKSwgc3RvcENvbW1pdFRpbWVyKCksIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygb25Db21taXRSb290ICYmIG9uQ29tbWl0Um9vdChmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSwgXG4gICAgICAgICAgICAhMCAmJiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uJDEuZGVidWdUb29sICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24kMS5kZWJ1Z1Rvb2wub25Db21taXRXb3JrKGZpbmlzaGVkV29yayksIFxuICAgICAgICAgICAgY29tbWl0UGhhc2VCb3VuZGFyaWVzICYmIChjb21taXRQaGFzZUJvdW5kYXJpZXMuZm9yRWFjaChzY2hlZHVsZUVycm9yUmVjb3ZlcnkpLCBcbiAgICAgICAgICAgIGNvbW1pdFBoYXNlQm91bmRhcmllcyA9IG51bGwpLCByZXNldE5leHRVbml0T2ZXb3JrKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRXb3JrUHJpb3JpdHkod29ya0luUHJvZ3Jlc3MsIHJlbmRlclByaW9yaXR5KSB7XG4gICAgICAgICAgICBpZiAoISh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nV29ya1ByaW9yaXR5ICE9PSBOb1dvcmskMiAmJiB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nV29ya1ByaW9yaXR5ID4gcmVuZGVyUHJpb3JpdHkpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmV3UHJpb3JpdHkgPSBnZXRVcGRhdGVQcmlvcml0eSQxKHdvcmtJblByb2dyZXNzKSwgY2hpbGQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gY2hpbGQ7ICkgbmV3UHJpb3JpdHkgPSBsYXJnZXJQcmlvcml0eSQxKG5ld1ByaW9yaXR5LCBjaGlsZC5wZW5kaW5nV29ya1ByaW9yaXR5KSwgXG4gICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdXb3JrUHJpb3JpdHkgPSBuZXdQcmlvcml0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIGZvciAoOyEwOyApIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgICAgICAgICAgICAgICBSZWFjdERlYnVnQ3VycmVudEZpYmVyJDMuc2V0Q3VycmVudEZpYmVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IGNvbXBsZXRlV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByaW9yaXR5TGV2ZWwpO1xuICAgICAgICAgICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMy5yZXNldEN1cnJlbnRGaWJlcigpO1xuICAgICAgICAgICAgICAgIHZhciByZXR1cm5GaWJlciA9IHdvcmtJblByb2dyZXNzLnJldHVybiwgc2libGluZ0ZpYmVyID0gd29ya0luUHJvZ3Jlc3Muc2libGluZztcbiAgICAgICAgICAgICAgICBpZiAocmVzZXRXb3JrUHJpb3JpdHkod29ya0luUHJvZ3Jlc3MsIG5leHRQcmlvcml0eUxldmVsKSwgbnVsbCAhPT0gbmV4dCkgcmV0dXJuIHN0b3BXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpLCBcbiAgICAgICAgICAgICAgICAhMCAmJiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uJDEuZGVidWdUb29sICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24kMS5kZWJ1Z1Rvb2wub25Db21wbGV0ZVdvcmsod29ya0luUHJvZ3Jlc3MpLCBcbiAgICAgICAgICAgICAgICBuZXh0O1xuICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSByZXR1cm5GaWJlcikge1xuICAgICAgICAgICAgICAgICAgICBudWxsID09PSByZXR1cm5GaWJlci5maXJzdEVmZmVjdCAmJiAocmV0dXJuRmliZXIuZmlyc3RFZmZlY3QgPSB3b3JrSW5Qcm9ncmVzcy5maXJzdEVmZmVjdCksIFxuICAgICAgICAgICAgICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5sYXN0RWZmZWN0ICYmIChudWxsICE9PSByZXR1cm5GaWJlci5sYXN0RWZmZWN0ICYmIChyZXR1cm5GaWJlci5sYXN0RWZmZWN0Lm5leHRFZmZlY3QgPSB3b3JrSW5Qcm9ncmVzcy5maXJzdEVmZmVjdCksIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3MubGFzdEVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyA+IFBlcmZvcm1lZFdvcmsgJiYgKG51bGwgIT09IHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPyByZXR1cm5GaWJlci5sYXN0RWZmZWN0Lm5leHRFZmZlY3QgPSB3b3JrSW5Qcm9ncmVzcyA6IHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3MsIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3RvcFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyksICEwICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24kMS5kZWJ1Z1Rvb2wgJiYgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbiQxLmRlYnVnVG9vbC5vbkNvbXBsZXRlV29yayh3b3JrSW5Qcm9ncmVzcyksIFxuICAgICAgICAgICAgICAgIG51bGwgIT09IHNpYmxpbmdGaWJlcikgcmV0dXJuIHNpYmxpbmdGaWJlcjtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gcmV0dXJuRmliZXIpIHJldHVybiBwZW5kaW5nQ29tbWl0ID0gd29ya0luUHJvZ3Jlc3MsIG51bGw7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBlcmZvcm1Vbml0T2ZXb3JrKHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgICAgICAgICAgIHN0YXJ0V29ya1RpbWVyKHdvcmtJblByb2dyZXNzKSwgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQzLnNldEN1cnJlbnRGaWJlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IGJlZ2luV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByaW9yaXR5TGV2ZWwpO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMy5yZXNldEN1cnJlbnRGaWJlcigpLCAhMCAmJiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uJDEuZGVidWdUb29sICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24kMS5kZWJ1Z1Rvb2wub25CZWdpbldvcmsod29ya0luUHJvZ3Jlc3MpLCBcbiAgICAgICAgICAgIG51bGwgPT09IG5leHQgJiYgKG5leHQgPSBjb21wbGV0ZVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpKSwgUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50ID0gbnVsbCwgXG4gICAgICAgICAgICBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBlcmZvcm1GYWlsZWRVbml0T2ZXb3JrKHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgICAgICAgICAgIHN0YXJ0V29ya1RpbWVyKHdvcmtJblByb2dyZXNzKSwgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciQzLnNldEN1cnJlbnRGaWJlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IGJlZ2luRmFpbGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByaW9yaXR5TGV2ZWwpO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMy5yZXNldEN1cnJlbnRGaWJlcigpLCAhMCAmJiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uJDEuZGVidWdUb29sICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24kMS5kZWJ1Z1Rvb2wub25CZWdpbldvcmsod29ya0luUHJvZ3Jlc3MpLCBcbiAgICAgICAgICAgIG51bGwgPT09IG5leHQgJiYgKG5leHQgPSBjb21wbGV0ZVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpKSwgUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50ID0gbnVsbCwgXG4gICAgICAgICAgICBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBlcmZvcm1EZWZlcnJlZFdvcmsoZGVhZGxpbmUpIHtcbiAgICAgICAgICAgIHBlcmZvcm1Xb3JrKE9mZnNjcmVlblByaW9yaXR5LCBkZWFkbGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlQ29tbWl0UGhhc2VFcnJvcnMoKSB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gY2FwdHVyZWRFcnJvcnMgJiYgY2FwdHVyZWRFcnJvcnMuc2l6ZSA+IDAgJiYgbmV4dFByaW9yaXR5TGV2ZWwgPT09IFRhc2tQcmlvcml0eSQxKSBmb3IgKDtudWxsICE9PSBuZXh0VW5pdE9mV29yayAmJiAobnVsbCAhPT0gKG5leHRVbml0T2ZXb3JrID0gaGFzQ2FwdHVyZWRFcnJvcihuZXh0VW5pdE9mV29yaykgPyBwZXJmb3JtRmFpbGVkVW5pdE9mV29yayhuZXh0VW5pdE9mV29yaykgOiBwZXJmb3JtVW5pdE9mV29yayhuZXh0VW5pdE9mV29yaykpIHx8IChpbnZhcmlhbnQobnVsbCAhPT0gcGVuZGluZ0NvbW1pdCwgXCJTaG91bGQgaGF2ZSBhIHBlbmRpbmcgY29tbWl0LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgXCIgKyBcImEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIiksIFxuICAgICAgICAgICAgcHJpb3JpdHlDb250ZXh0ID0gVGFza1ByaW9yaXR5JDEsIGNvbW1pdEFsbFdvcmsocGVuZGluZ0NvbW1pdCksIHByaW9yaXR5Q29udGV4dCA9IG5leHRQcmlvcml0eUxldmVsLCBcbiAgICAgICAgICAgIG51bGwgIT09IGNhcHR1cmVkRXJyb3JzICYmIDAgIT09IGNhcHR1cmVkRXJyb3JzLnNpemUgJiYgbmV4dFByaW9yaXR5TGV2ZWwgPT09IFRhc2tQcmlvcml0eSQxKSk7ICkgO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHdvcmtMb29wKG1pblByaW9yaXR5TGV2ZWwsIGRlYWRsaW5lKSB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gcGVuZGluZ0NvbW1pdCA/IChwcmlvcml0eUNvbnRleHQgPSBUYXNrUHJpb3JpdHkkMSwgY29tbWl0QWxsV29yayhwZW5kaW5nQ29tbWl0KSwgXG4gICAgICAgICAgICBoYW5kbGVDb21taXRQaGFzZUVycm9ycygpKSA6IG51bGwgPT09IG5leHRVbml0T2ZXb3JrICYmIHJlc2V0TmV4dFVuaXRPZldvcmsoKSwgIShuZXh0UHJpb3JpdHlMZXZlbCA9PT0gTm9Xb3JrJDIgfHwgbmV4dFByaW9yaXR5TGV2ZWwgPiBtaW5Qcmlvcml0eUxldmVsKSkge1xuICAgICAgICAgICAgICAgIHByaW9yaXR5Q29udGV4dCA9IG5leHRQcmlvcml0eUxldmVsO1xuICAgICAgICAgICAgICAgIGxvb3A6IGRvIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRQcmlvcml0eUxldmVsIDw9IFRhc2tQcmlvcml0eSQxKSBmb3IgKDtudWxsICE9PSBuZXh0VW5pdE9mV29yayAmJiAhKG51bGwgPT09IChuZXh0VW5pdE9mV29yayA9IHBlcmZvcm1Vbml0T2ZXb3JrKG5leHRVbml0T2ZXb3JrKSkgJiYgKGludmFyaWFudChudWxsICE9PSBwZW5kaW5nQ29tbWl0LCBcIlNob3VsZCBoYXZlIGEgcGVuZGluZyBjb21taXQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBcIiArIFwiYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIHByaW9yaXR5Q29udGV4dCA9IFRhc2tQcmlvcml0eSQxLCBjb21taXRBbGxXb3JrKHBlbmRpbmdDb21taXQpLCBwcmlvcml0eUNvbnRleHQgPSBuZXh0UHJpb3JpdHlMZXZlbCwgXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUNvbW1pdFBoYXNlRXJyb3JzKCksIG5leHRQcmlvcml0eUxldmVsID09PSBOb1dvcmskMiB8fCBuZXh0UHJpb3JpdHlMZXZlbCA+IG1pblByaW9yaXR5TGV2ZWwgfHwgbmV4dFByaW9yaXR5TGV2ZWwgPiBUYXNrUHJpb3JpdHkkMSkpOyApIDsgZWxzZSBpZiAobnVsbCAhPT0gZGVhZGxpbmUpIGZvciAoO251bGwgIT09IG5leHRVbml0T2ZXb3JrICYmICFkZWFkbGluZUhhc0V4cGlyZWQ7ICkgaWYgKGRlYWRsaW5lLnRpbWVSZW1haW5pbmcoKSA+IHRpbWVIZXVyaXN0aWNGb3JVbml0T2ZXb3JrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gKG5leHRVbml0T2ZXb3JrID0gcGVyZm9ybVVuaXRPZldvcmsobmV4dFVuaXRPZldvcmspKSkgaWYgKGludmFyaWFudChudWxsICE9PSBwZW5kaW5nQ29tbWl0LCBcIlNob3VsZCBoYXZlIGEgcGVuZGluZyBjb21taXQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBcIiArIFwiYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWFkbGluZS50aW1lUmVtYWluaW5nKCkgPiB0aW1lSGV1cmlzdGljRm9yVW5pdE9mV29yaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmlvcml0eUNvbnRleHQgPSBUYXNrUHJpb3JpdHkkMSwgY29tbWl0QWxsV29yayhwZW5kaW5nQ29tbWl0KSwgcHJpb3JpdHlDb250ZXh0ID0gbmV4dFByaW9yaXR5TGV2ZWwsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNvbW1pdFBoYXNlRXJyb3JzKCksIG5leHRQcmlvcml0eUxldmVsID09PSBOb1dvcmskMiB8fCBuZXh0UHJpb3JpdHlMZXZlbCA+IG1pblByaW9yaXR5TGV2ZWwgfHwgbmV4dFByaW9yaXR5TGV2ZWwgPCBIaWdoUHJpb3JpdHkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGRlYWRsaW5lSGFzRXhwaXJlZCA9ICEwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZGVhZGxpbmVIYXNFeHBpcmVkID0gITA7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobmV4dFByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFN5bmNocm9ub3VzUHJpb3JpdHkkMTpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRhc2tQcmlvcml0eSQxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRQcmlvcml0eUxldmVsIDw9IG1pblByaW9yaXR5TGV2ZWwpIGNvbnRpbnVlIGxvb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhayBsb29wO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBIaWdoUHJpb3JpdHk6XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBMb3dQcmlvcml0eTpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIE9mZnNjcmVlblByaW9yaXR5OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IGRlYWRsaW5lKSBicmVhayBsb29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWFkbGluZUhhc0V4cGlyZWQgJiYgbmV4dFByaW9yaXR5TGV2ZWwgPD0gbWluUHJpb3JpdHlMZXZlbCkgY29udGludWUgbG9vcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIE5vV29yayQyOlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcblxuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQoITEsIFwiU3dpdGNoIHN0YXRlbWVudCBzaG91bGQgYmUgZXhodWFzdGl2ZS4gXCIgKyBcIlRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoITApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBlcmZvcm1Xb3JrQ2F0Y2hCbG9jayhmYWlsZWRXb3JrLCBib3VuZGFyeSwgbWluUHJpb3JpdHlMZXZlbCwgZGVhZGxpbmUpIHtcbiAgICAgICAgICAgIHVud2luZENvbnRleHRzKGZhaWxlZFdvcmssIGJvdW5kYXJ5KSwgbmV4dFVuaXRPZldvcmsgPSBwZXJmb3JtRmFpbGVkVW5pdE9mV29yayhib3VuZGFyeSksIFxuICAgICAgICAgICAgd29ya0xvb3AobWluUHJpb3JpdHlMZXZlbCwgZGVhZGxpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBlcmZvcm1Xb3JrKG1pblByaW9yaXR5TGV2ZWwsIGRlYWRsaW5lKSB7XG4gICAgICAgICAgICBzdGFydFdvcmtMb29wVGltZXIoKSwgaW52YXJpYW50KCFpc1BlcmZvcm1pbmdXb3JrLCBcInBlcmZvcm1Xb3JrIHdhcyBjYWxsZWQgcmVjdXJzaXZlbHkuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBcIiArIFwiYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSwgXG4gICAgICAgICAgICBpc1BlcmZvcm1pbmdXb3JrID0gITA7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNQcmlvcml0eUNvbnRleHQgPSBwcmlvcml0eUNvbnRleHQsIGRpZEVycm9yID0gITEsIGVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAoaW52b2tlR3VhcmRlZENhbGxiYWNrJDEobnVsbCwgd29ya0xvb3AsIG51bGwsIG1pblByaW9yaXR5TGV2ZWwsIGRlYWRsaW5lKSwgXG4gICAgICAgICAgICBoYXNDYXVnaHRFcnJvcigpICYmIChkaWRFcnJvciA9ICEwLCBlcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKSk7IGRpZEVycm9yOyApIHtcbiAgICAgICAgICAgICAgICBpZiAoZGlkRmF0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RVbmNhdWdodEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZmFpbGVkV29yayA9IG5leHRVbml0T2ZXb3JrO1xuICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBmYWlsZWRXb3JrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeSA9IGNhcHR1cmVFcnJvcihmYWlsZWRXb3JrLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnZhcmlhbnQobnVsbCAhPT0gYm91bmRhcnksIFwiU2hvdWxkIGhhdmUgZm91bmQgYW4gZXJyb3IgYm91bmRhcnkuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IFwiICsgXCJjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiKSwgXG4gICAgICAgICAgICAgICAgICAgICFkaWRGYXRhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpZEVycm9yID0gITEsIGVycm9yID0gbnVsbCwgaW52b2tlR3VhcmRlZENhbGxiYWNrJDEobnVsbCwgcGVyZm9ybVdvcmtDYXRjaEJsb2NrLCBudWxsLCBmYWlsZWRXb3JrLCBib3VuZGFyeSwgbWluUHJpb3JpdHlMZXZlbCwgZGVhZGxpbmUpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICFoYXNDYXVnaHRFcnJvcigpKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZEVycm9yID0gITAsIGVycm9yID0gY2xlYXJDYXVnaHRFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGRpZEZhdGFsID0gITA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmlvcml0eUNvbnRleHQgPSBwcmV2aW91c1ByaW9yaXR5Q29udGV4dCwgbnVsbCAhPT0gZGVhZGxpbmUgJiYgKGlzQ2FsbGJhY2tTY2hlZHVsZWQgPSAhMSksIFxuICAgICAgICAgICAgbmV4dFByaW9yaXR5TGV2ZWwgPiBUYXNrUHJpb3JpdHkkMSAmJiAhaXNDYWxsYmFja1NjaGVkdWxlZCAmJiAoc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrKHBlcmZvcm1EZWZlcnJlZFdvcmspLCBcbiAgICAgICAgICAgIGlzQ2FsbGJhY2tTY2hlZHVsZWQgPSAhMCk7XG4gICAgICAgICAgICB2YXIgZXJyb3JUb1Rocm93ID0gZmlyc3RVbmNhdWdodEVycm9yO1xuICAgICAgICAgICAgaWYgKGlzUGVyZm9ybWluZ1dvcmsgPSAhMSwgZGVhZGxpbmVIYXNFeHBpcmVkID0gITEsIGRpZEZhdGFsID0gITEsIGZpcnN0VW5jYXVnaHRFcnJvciA9IG51bGwsIFxuICAgICAgICAgICAgY2FwdHVyZWRFcnJvcnMgPSBudWxsLCBmYWlsZWRCb3VuZGFyaWVzID0gbnVsbCwgbmV4dFJlbmRlcmVkVHJlZSA9IG51bGwsIG5lc3RlZFVwZGF0ZUNvdW50ID0gMCwgXG4gICAgICAgICAgICBzdG9wV29ya0xvb3BUaW1lcigpLCBudWxsICE9PSBlcnJvclRvVGhyb3cpIHRocm93IGVycm9yVG9UaHJvdztcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZmFpbGVkV29yaywgZXJyb3IpIHtcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudCA9IG51bGwsIFJlYWN0RGVidWdDdXJyZW50RmliZXIkMy5yZXNldEN1cnJlbnRGaWJlcigpO1xuICAgICAgICAgICAgdmFyIGJvdW5kYXJ5ID0gbnVsbCwgZXJyb3JCb3VuZGFyeUZvdW5kID0gITEsIHdpbGxSZXRyeSA9ICExLCBlcnJvckJvdW5kYXJ5TmFtZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZmFpbGVkV29yay50YWcgPT09IEhvc3RSb290JDUpIGJvdW5kYXJ5ID0gZmFpbGVkV29yaywgaXNGYWlsZWRCb3VuZGFyeShmYWlsZWRXb3JrKSAmJiAoZGlkRmF0YWwgPSAhMCk7IGVsc2UgZm9yICh2YXIgbm9kZSA9IGZhaWxlZFdvcmsucmV0dXJuOyBudWxsICE9PSBub2RlICYmIG51bGwgPT09IGJvdW5kYXJ5OyApIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS50YWcgPT09IENsYXNzQ29tcG9uZW50JDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gbm9kZS5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggJiYgKGVycm9yQm91bmRhcnlGb3VuZCA9ICEwLCBlcnJvckJvdW5kYXJ5TmFtZSA9IGdldENvbXBvbmVudE5hbWVfMShub2RlKSwgXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5ID0gbm9kZSwgd2lsbFJldHJ5ID0gITApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBub2RlLnRhZyA9PT0gSG9zdFJvb3QkNSAmJiAoYm91bmRhcnkgPSBub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGYWlsZWRCb3VuZGFyeShub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbm1vdW50aW5nKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGNvbW1pdFBoYXNlQm91bmRhcmllcyAmJiAoY29tbWl0UGhhc2VCb3VuZGFyaWVzLmhhcyhub2RlKSB8fCBudWxsICE9PSBub2RlLmFsdGVybmF0ZSAmJiBjb21taXRQaGFzZUJvdW5kYXJpZXMuaGFzKG5vZGUuYWx0ZXJuYXRlKSkpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeSA9IG51bGwsIHdpbGxSZXRyeSA9ICExO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gYm91bmRhcnkpIHtcbiAgICAgICAgICAgICAgICBudWxsID09PSBmYWlsZWRCb3VuZGFyaWVzICYmIChmYWlsZWRCb3VuZGFyaWVzID0gbmV3IFNldCgpKSwgZmFpbGVkQm91bmRhcmllcy5hZGQoYm91bmRhcnkpO1xuICAgICAgICAgICAgICAgIHZhciBfY29tcG9uZW50U3RhY2sgPSBnZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyJDIoZmFpbGVkV29yayksIF9jb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZV8xKGZhaWxlZFdvcmspO1xuICAgICAgICAgICAgICAgIG51bGwgPT09IGNhcHR1cmVkRXJyb3JzICYmIChjYXB0dXJlZEVycm9ycyA9IG5ldyBNYXAoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGNhcHR1cmVkRXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudE5hbWU6IF9jb21wb25lbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRTdGFjazogX2NvbXBvbmVudFN0YWNrLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yQm91bmRhcnk6IGVycm9yQm91bmRhcnlGb3VuZCA/IGJvdW5kYXJ5LnN0YXRlTm9kZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yQm91bmRhcnlGb3VuZDogZXJyb3JCb3VuZGFyeUZvdW5kLFxuICAgICAgICAgICAgICAgICAgICBlcnJvckJvdW5kYXJ5TmFtZTogZXJyb3JCb3VuZGFyeU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHdpbGxSZXRyeTogd2lsbFJldHJ5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjYXB0dXJlZEVycm9ycy5zZXQoYm91bmRhcnksIGNhcHR1cmVkRXJyb3IpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ0NhcHR1cmVkRXJyb3IkMShjYXB0dXJlZEVycm9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpc0NvbW1pdHRpbmcgPyAobnVsbCA9PT0gY29tbWl0UGhhc2VCb3VuZGFyaWVzICYmIChjb21taXRQaGFzZUJvdW5kYXJpZXMgPSBuZXcgU2V0KCkpLCBcbiAgICAgICAgICAgICAgICBjb21taXRQaGFzZUJvdW5kYXJpZXMuYWRkKGJvdW5kYXJ5KSkgOiBzY2hlZHVsZUVycm9yUmVjb3ZlcnkoYm91bmRhcnkpLCBib3VuZGFyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsID09PSBmaXJzdFVuY2F1Z2h0RXJyb3IgJiYgKGZpcnN0VW5jYXVnaHRFcnJvciA9IGVycm9yKSwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYXNDYXB0dXJlZEVycm9yKGZpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCAhPT0gY2FwdHVyZWRFcnJvcnMgJiYgKGNhcHR1cmVkRXJyb3JzLmhhcyhmaWJlcikgfHwgbnVsbCAhPT0gZmliZXIuYWx0ZXJuYXRlICYmIGNhcHR1cmVkRXJyb3JzLmhhcyhmaWJlci5hbHRlcm5hdGUpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0ZhaWxlZEJvdW5kYXJ5KGZpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCAhPT0gZmFpbGVkQm91bmRhcmllcyAmJiAoZmFpbGVkQm91bmRhcmllcy5oYXMoZmliZXIpIHx8IG51bGwgIT09IGZpYmVyLmFsdGVybmF0ZSAmJiBmYWlsZWRCb3VuZGFyaWVzLmhhcyhmaWJlci5hbHRlcm5hdGUpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21taXRFcnJvckhhbmRsaW5nKGVmZmVjdGZ1bEZpYmVyKSB7XG4gICAgICAgICAgICB2YXIgY2FwdHVyZWRFcnJvciA9IHZvaWQgMDtcbiAgICAgICAgICAgIHN3aXRjaCAobnVsbCAhPT0gY2FwdHVyZWRFcnJvcnMgJiYgKGNhcHR1cmVkRXJyb3IgPSBjYXB0dXJlZEVycm9ycy5nZXQoZWZmZWN0ZnVsRmliZXIpLCBcbiAgICAgICAgICAgIGNhcHR1cmVkRXJyb3JzLmRlbGV0ZShlZmZlY3RmdWxGaWJlciksIG51bGwgPT0gY2FwdHVyZWRFcnJvciAmJiBudWxsICE9PSBlZmZlY3RmdWxGaWJlci5hbHRlcm5hdGUgJiYgKGVmZmVjdGZ1bEZpYmVyID0gZWZmZWN0ZnVsRmliZXIuYWx0ZXJuYXRlLCBcbiAgICAgICAgICAgIGNhcHR1cmVkRXJyb3IgPSBjYXB0dXJlZEVycm9ycy5nZXQoZWZmZWN0ZnVsRmliZXIpLCBjYXB0dXJlZEVycm9ycy5kZWxldGUoZWZmZWN0ZnVsRmliZXIpKSksIFxuICAgICAgICAgICAgaW52YXJpYW50KG51bGwgIT0gY2FwdHVyZWRFcnJvciwgXCJObyBlcnJvciBmb3IgZ2l2ZW4gdW5pdCBvZiB3b3JrLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBcIiArIFwiYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIiksIFxuICAgICAgICAgICAgZWZmZWN0ZnVsRmliZXIudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQkNTpcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBlZmZlY3RmdWxGaWJlci5zdGF0ZU5vZGUsIGluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFN0YWNrOiBjYXB0dXJlZEVycm9yLmNvbXBvbmVudFN0YWNrXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCBpbnN0YW5jZS5jb21wb25lbnREaWRDYXRjaChjYXB0dXJlZEVycm9yLmVycm9yLCBpbmZvKTtcblxuICAgICAgICAgICAgICBjYXNlIEhvc3RSb290JDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKG51bGwgPT09IGZpcnN0VW5jYXVnaHRFcnJvciAmJiAoZmlyc3RVbmNhdWdodEVycm9yID0gY2FwdHVyZWRFcnJvci5lcnJvcikpO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KCExLCBcIkludmFsaWQgdHlwZSBvZiB3b3JrLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gXCIgKyBcIlJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW53aW5kQ29udGV4dHMoZnJvbSwgdG8pIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5vZGUgPSBmcm9tOyBudWxsICE9PSBub2RlOyApIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vZGUudGFnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIENsYXNzQ29tcG9uZW50JDU6XG4gICAgICAgICAgICAgICAgICAgIHBvcENvbnRleHRQcm92aWRlciQxKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50JDU6XG4gICAgICAgICAgICAgICAgICAgIHBvcEhvc3RDb250ZXh0KG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBIb3N0Um9vdCQ1OlxuICAgICAgICAgICAgICAgICAgY2FzZSBIb3N0UG9ydGFsJDM6XG4gICAgICAgICAgICAgICAgICAgIHBvcEhvc3RDb250YWluZXIobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub2RlID09PSB0byB8fCBub2RlLmFsdGVybmF0ZSA9PT0gdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcEZhaWxlZFdvcmtUaW1lcihub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0b3BXb3JrVGltZXIobm9kZSksIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzY2hlZHVsZVJvb3Qocm9vdCwgcHJpb3JpdHlMZXZlbCkge1xuICAgICAgICAgICAgcHJpb3JpdHlMZXZlbCAhPT0gTm9Xb3JrJDIgJiYgKHJvb3QuaXNTY2hlZHVsZWQgfHwgKHJvb3QuaXNTY2hlZHVsZWQgPSAhMCwgbGFzdFNjaGVkdWxlZFJvb3QgPyAobGFzdFNjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSByb290LCBcbiAgICAgICAgICAgIGxhc3RTY2hlZHVsZWRSb290ID0gcm9vdCkgOiAobmV4dFNjaGVkdWxlZFJvb3QgPSByb290LCBsYXN0U2NoZWR1bGVkUm9vdCA9IHJvb3QpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2NoZWR1bGVVcGRhdGUoZmliZXIsIHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVVwZGF0ZUltcGwoZmliZXIsIHByaW9yaXR5TGV2ZWwsICExKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzY2hlZHVsZVVwZGF0ZUltcGwoZmliZXIsIHByaW9yaXR5TGV2ZWwsIGlzRXJyb3JSZWNvdmVyeSkge1xuICAgICAgICAgICAgaWYgKHJlY29yZFNjaGVkdWxlVXBkYXRlKCksIG5lc3RlZFVwZGF0ZUNvdW50ID4gTkVTVEVEX1VQREFURV9MSU1JVCAmJiAoZGlkRmF0YWwgPSAhMCwgXG4gICAgICAgICAgICBpbnZhcmlhbnQoITEsIFwiTWF4aW11bSB1cGRhdGUgZGVwdGggZXhjZWVkZWQuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIGEgXCIgKyBcImNvbXBvbmVudCByZXBlYXRlZGx5IGNhbGxzIHNldFN0YXRlIGluc2lkZSBjb21wb25lbnRXaWxsVXBkYXRlIG9yIFwiICsgXCJjb21wb25lbnREaWRVcGRhdGUuIFJlYWN0IGxpbWl0cyB0aGUgbnVtYmVyIG9mIG5lc3RlZCB1cGRhdGVzIHRvIFwiICsgXCJwcmV2ZW50IGluZmluaXRlIGxvb3BzLlwiKSksIFxuICAgICAgICAgICAgIWlzUGVyZm9ybWluZ1dvcmsgJiYgcHJpb3JpdHlMZXZlbCA8PSBuZXh0UHJpb3JpdHlMZXZlbCAmJiAobmV4dFVuaXRPZldvcmsgPSBudWxsKSwgXG4gICAgICAgICAgICAhaXNFcnJvclJlY292ZXJ5ICYmIGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQkNSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICB3YXJuQWJvdXRJbnZhbGlkVXBkYXRlcyhpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBub2RlID0gZmliZXIsIHNob3VsZENvbnRpbnVlID0gITA7IG51bGwgIT09IG5vZGUgJiYgc2hvdWxkQ29udGludWU7ICkge1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRDb250aW51ZSA9ICExLCAobm9kZS5wZW5kaW5nV29ya1ByaW9yaXR5ID09PSBOb1dvcmskMiB8fCBub2RlLnBlbmRpbmdXb3JrUHJpb3JpdHkgPiBwcmlvcml0eUxldmVsKSAmJiAoc2hvdWxkQ29udGludWUgPSAhMCwgXG4gICAgICAgICAgICAgICAgbm9kZS5wZW5kaW5nV29ya1ByaW9yaXR5ID0gcHJpb3JpdHlMZXZlbCksIG51bGwgIT09IG5vZGUuYWx0ZXJuYXRlICYmIChub2RlLmFsdGVybmF0ZS5wZW5kaW5nV29ya1ByaW9yaXR5ID09PSBOb1dvcmskMiB8fCBub2RlLmFsdGVybmF0ZS5wZW5kaW5nV29ya1ByaW9yaXR5ID4gcHJpb3JpdHlMZXZlbCkgJiYgKHNob3VsZENvbnRpbnVlID0gITAsIFxuICAgICAgICAgICAgICAgIG5vZGUuYWx0ZXJuYXRlLnBlbmRpbmdXb3JrUHJpb3JpdHkgPSBwcmlvcml0eUxldmVsKSwgbnVsbCA9PT0gbm9kZS5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudGFnICE9PSBIb3N0Um9vdCQ1KSByZXR1cm4gdm9pZCAoaXNFcnJvclJlY292ZXJ5IHx8IGZpYmVyLnRhZyAhPT0gQ2xhc3NDb21wb25lbnQkNSB8fCB3YXJuQWJvdXRVcGRhdGVPblVubW91bnRlZChmaWJlci5zdGF0ZU5vZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVkdWxlUm9vdChub2RlLnN0YXRlTm9kZSwgcHJpb3JpdHlMZXZlbCksICFpc1BlcmZvcm1pbmdXb3JrKSBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFN5bmNocm9ub3VzUHJpb3JpdHkkMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVW5iYXRjaGluZ1VwZGF0ZXMgPyBwZXJmb3JtV29yayhTeW5jaHJvbm91c1ByaW9yaXR5JDEsIG51bGwpIDogcGVyZm9ybVdvcmsoVGFza1ByaW9yaXR5JDEsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRhc2tQcmlvcml0eSQxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaW52YXJpYW50KGlzQmF0Y2hpbmdVcGRhdGVzLCBcIlRhc2sgdXBkYXRlcyBjYW4gb25seSBiZSBzY2hlZHVsZWQgYXMgYSBuZXN0ZWQgdXBkYXRlIG9yIFwiICsgXCJpbnNpZGUgYmF0Y2hlZFVwZGF0ZXMuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDYWxsYmFja1NjaGVkdWxlZCB8fCAoc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrKHBlcmZvcm1EZWZlcnJlZFdvcmspLCBpc0NhbGxiYWNrU2NoZWR1bGVkID0gITApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRQcmlvcml0eUNvbnRleHQoZmliZXIsIGZvcmNlQXN5bmMpIHtcbiAgICAgICAgICAgIHZhciBwcmlvcml0eUxldmVsID0gcHJpb3JpdHlDb250ZXh0O1xuICAgICAgICAgICAgcmV0dXJuIHByaW9yaXR5TGV2ZWwgPT09IE5vV29yayQyICYmIChwcmlvcml0eUxldmVsID0gIXVzZVN5bmNTY2hlZHVsaW5nIHx8IGZpYmVyLmludGVybmFsQ29udGV4dFRhZyAmIEFzeW5jVXBkYXRlcyB8fCBmb3JjZUFzeW5jID8gTG93UHJpb3JpdHkgOiBTeW5jaHJvbm91c1ByaW9yaXR5JDEpLCBcbiAgICAgICAgICAgIHByaW9yaXR5TGV2ZWwgPT09IFN5bmNocm9ub3VzUHJpb3JpdHkkMSAmJiAoaXNQZXJmb3JtaW5nV29yayB8fCBpc0JhdGNoaW5nVXBkYXRlcykgPyBUYXNrUHJpb3JpdHkkMSA6IHByaW9yaXR5TGV2ZWw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2NoZWR1bGVFcnJvclJlY292ZXJ5KGZpYmVyKSB7XG4gICAgICAgICAgICBzY2hlZHVsZVVwZGF0ZUltcGwoZmliZXIsIFRhc2tQcmlvcml0eSQxLCAhMCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoZm4sIGEpIHtcbiAgICAgICAgICAgIHZhciBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzID0gaXNCYXRjaGluZ1VwZGF0ZXM7XG4gICAgICAgICAgICBpc0JhdGNoaW5nVXBkYXRlcyA9ICEwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oYSk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlzQmF0Y2hpbmdVcGRhdGVzID0gcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcywgaXNQZXJmb3JtaW5nV29yayB8fCBpc0JhdGNoaW5nVXBkYXRlcyB8fCBwZXJmb3JtV29yayhUYXNrUHJpb3JpdHkkMSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdW5iYXRjaGVkVXBkYXRlcyhmbikge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzSXNVbmJhdGNoaW5nVXBkYXRlcyA9IGlzVW5iYXRjaGluZ1VwZGF0ZXMsIHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXMgPSBpc0JhdGNoaW5nVXBkYXRlcztcbiAgICAgICAgICAgIGlzVW5iYXRjaGluZ1VwZGF0ZXMgPSBpc0JhdGNoaW5nVXBkYXRlcywgaXNCYXRjaGluZ1VwZGF0ZXMgPSAhMTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlzQmF0Y2hpbmdVcGRhdGVzID0gcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcywgaXNVbmJhdGNoaW5nVXBkYXRlcyA9IHByZXZpb3VzSXNVbmJhdGNoaW5nVXBkYXRlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmbHVzaFN5bmMoYmF0Y2gpIHtcbiAgICAgICAgICAgIHZhciBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzID0gaXNCYXRjaGluZ1VwZGF0ZXMsIHByZXZpb3VzUHJpb3JpdHlDb250ZXh0ID0gcHJpb3JpdHlDb250ZXh0O1xuICAgICAgICAgICAgaXNCYXRjaGluZ1VwZGF0ZXMgPSAhMCwgcHJpb3JpdHlDb250ZXh0ID0gU3luY2hyb25vdXNQcmlvcml0eSQxO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmF0Y2goKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgaXNCYXRjaGluZ1VwZGF0ZXMgPSBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzLCBwcmlvcml0eUNvbnRleHQgPSBwcmV2aW91c1ByaW9yaXR5Q29udGV4dCwgXG4gICAgICAgICAgICAgICAgaW52YXJpYW50KCFpc1BlcmZvcm1pbmdXb3JrLCBcImZsdXNoU3luYyB3YXMgY2FsbGVkIGZyb20gaW5zaWRlIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgY2Fubm90IGJlIFwiICsgXCJjYWxsZWQgd2hlbiBSZWFjdCBpcyBhbHJlYWR5IHJlbmRlcmluZy5cIiksIFxuICAgICAgICAgICAgICAgIHBlcmZvcm1Xb3JrKFRhc2tQcmlvcml0eSQxLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBkZWZlcnJlZFVwZGF0ZXMoZm4pIHtcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1ByaW9yaXR5Q29udGV4dCA9IHByaW9yaXR5Q29udGV4dDtcbiAgICAgICAgICAgIHByaW9yaXR5Q29udGV4dCA9IExvd1ByaW9yaXR5O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgcHJpb3JpdHlDb250ZXh0ID0gcHJldmlvdXNQcmlvcml0eUNvbnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlOiBzY2hlZHVsZVVwZGF0ZSxcbiAgICAgICAgICAgIGdldFByaW9yaXR5Q29udGV4dDogZ2V0UHJpb3JpdHlDb250ZXh0LFxuICAgICAgICAgICAgYmF0Y2hlZFVwZGF0ZXM6IGJhdGNoZWRVcGRhdGVzLFxuICAgICAgICAgICAgdW5iYXRjaGVkVXBkYXRlczogdW5iYXRjaGVkVXBkYXRlcyxcbiAgICAgICAgICAgIGZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgICAgICAgICAgZGVmZXJyZWRVcGRhdGVzOiBkZWZlcnJlZFVwZGF0ZXNcbiAgICAgICAgfTtcbiAgICB9LCBhZGRUb3BMZXZlbFVwZGF0ZSA9IFJlYWN0RmliZXJVcGRhdGVRdWV1ZS5hZGRUb3BMZXZlbFVwZGF0ZSwgZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQgPSBSZWFjdEZpYmVyQ29udGV4dC5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCwgaXNDb250ZXh0UHJvdmlkZXIgPSBSZWFjdEZpYmVyQ29udGV4dC5pc0NvbnRleHRQcm92aWRlciwgcHJvY2Vzc0NoaWxkQ29udGV4dCA9IFJlYWN0RmliZXJDb250ZXh0LnByb2Nlc3NDaGlsZENvbnRleHQsIGNyZWF0ZUZpYmVyUm9vdCA9IFJlYWN0RmliZXJSb290LmNyZWF0ZUZpYmVyUm9vdCwgSG9zdENvbXBvbmVudCA9IFJlYWN0VHlwZU9mV29yay5Ib3N0Q29tcG9uZW50LCB3YXJuaW5nJDEgPSByZXF1aXJlJCQwLCBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uID0gUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLCBSZWFjdERlYnVnQ3VycmVudEZpYmVyID0gUmVhY3REZWJ1Z0N1cnJlbnRGaWJlcl8xLCBnZXRDb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZV8xLCBmaW5kQ3VycmVudEhvc3RGaWJlciA9IFJlYWN0RmliZXJUcmVlUmVmbGVjdGlvbi5maW5kQ3VycmVudEhvc3RGaWJlciwgZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzID0gUmVhY3RGaWJlclRyZWVSZWZsZWN0aW9uLmZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFscztcbiAgICBmdW5jdGlvbiBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgICAgaWYgKCFwYXJlbnRDb21wb25lbnQpIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICAgICAgdmFyIGZpYmVyID0gUmVhY3RJbnN0YW5jZU1hcF8xLmdldChwYXJlbnRDb21wb25lbnQpLCBwYXJlbnRDb250ZXh0ID0gZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQoZmliZXIpO1xuICAgICAgICByZXR1cm4gaXNDb250ZXh0UHJvdmlkZXIoZmliZXIpID8gcHJvY2Vzc0NoaWxkQ29udGV4dChmaWJlciwgcGFyZW50Q29udGV4dCkgOiBwYXJlbnRDb250ZXh0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICB2YXIgb2JqZWN0cyA9IHt9LCB1bmlxdWVJRCA9IDEsIGVtcHR5T2JqZWN0JDMgPSB7fSwgUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnkoKSB7XG4gICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFjdE5hdGl2ZVByb3BSZWdpc3RyeS5yZWdpc3RlciA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgICAgdmFyIGlkID0gKyt1bmlxdWVJRDtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKG9iamVjdCksIG9iamVjdHNbaWRdID0gb2JqZWN0LCBpZDtcbiAgICAgICAgfSwgUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnkuZ2V0QnlJRCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICBpZiAoIWlkKSByZXR1cm4gZW1wdHlPYmplY3QkMztcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBvYmplY3RzW2lkXTtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgfHwgKGNvbnNvbGUud2FybihcIkludmFsaWQgc3R5bGUgd2l0aCBpZCBgXCIgKyBpZCArIFwiYC4gU2tpcHBpbmcgLi4uXCIpLCBcbiAgICAgICAgICAgIGVtcHR5T2JqZWN0JDMpO1xuICAgICAgICB9LCBSZWFjdE5hdGl2ZVByb3BSZWdpc3RyeTtcbiAgICB9KCksIFJlYWN0TmF0aXZlUHJvcFJlZ2lzdHJ5XzEgPSBSZWFjdE5hdGl2ZVByb3BSZWdpc3RyeSwgZW1wdHlPYmplY3QkMiA9IHt9LCByZW1vdmVkS2V5cyA9IG51bGwsIHJlbW92ZWRLZXlDb3VudCA9IDA7XG4gICAgZnVuY3Rpb24gZGVmYXVsdERpZmZlcihwcmV2UHJvcCwgbmV4dFByb3ApIHtcbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgIT0gdHlwZW9mIG5leHRQcm9wIHx8IG51bGwgPT09IG5leHRQcm9wIHx8IGRlZXBEaWZmZXIocHJldlByb3AsIG5leHRQcm9wKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzb2x2ZU9iamVjdChpZE9yT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiBpZE9yT2JqZWN0ID8gUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnlfMS5nZXRCeUlEKGlkT3JPYmplY3QpIDogaWRPck9iamVjdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzdG9yZURlbGV0ZWRWYWx1ZXNJbk5lc3RlZEFycmF5KHVwZGF0ZVBheWxvYWQsIG5vZGUsIHZhbGlkQXR0cmlidXRlcykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkgZm9yICh2YXIgaSA9IG5vZGUubGVuZ3RoOyBpLS0gJiYgcmVtb3ZlZEtleUNvdW50ID4gMDsgKSByZXN0b3JlRGVsZXRlZFZhbHVlc0luTmVzdGVkQXJyYXkodXBkYXRlUGF5bG9hZCwgbm9kZVtpXSwgdmFsaWRBdHRyaWJ1dGVzKTsgZWxzZSBpZiAobm9kZSAmJiByZW1vdmVkS2V5Q291bnQgPiAwKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gcmVzb2x2ZU9iamVjdChub2RlKTtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BLZXkgaW4gcmVtb3ZlZEtleXMpIGlmIChyZW1vdmVkS2V5c1twcm9wS2V5XSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXh0UHJvcCA9IG9ialtwcm9wS2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBuZXh0UHJvcCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlQ29uZmlnID0gdmFsaWRBdHRyaWJ1dGVzW3Byb3BLZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBuZXh0UHJvcCAmJiAobmV4dFByb3AgPSAhMCksIHZvaWQgMCA9PT0gbmV4dFByb3AgJiYgKG5leHRQcm9wID0gbnVsbCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgYXR0cmlidXRlQ29uZmlnKSB1cGRhdGVQYXlsb2FkW3Byb3BLZXldID0gbmV4dFByb3A7IGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYXR0cmlidXRlQ29uZmlnLmRpZmYgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBhdHRyaWJ1dGVDb25maWcucHJvY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGF0dHJpYnV0ZUNvbmZpZy5wcm9jZXNzID8gYXR0cmlidXRlQ29uZmlnLnByb2Nlc3MobmV4dFByb3ApIDogbmV4dFByb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUGF5bG9hZFtwcm9wS2V5XSA9IG5leHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRLZXlzW3Byb3BLZXldID0gITEsIHJlbW92ZWRLZXlDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpZmZOZXN0ZWRBcnJheVByb3BlcnR5KHVwZGF0ZVBheWxvYWQsIHByZXZBcnJheSwgbmV4dEFycmF5LCB2YWxpZEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdmFyIGksIG1pbkxlbmd0aCA9IHByZXZBcnJheS5sZW5ndGggPCBuZXh0QXJyYXkubGVuZ3RoID8gcHJldkFycmF5Lmxlbmd0aCA6IG5leHRBcnJheS5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtaW5MZW5ndGg7IGkrKykgdXBkYXRlUGF5bG9hZCA9IGRpZmZOZXN0ZWRQcm9wZXJ0eSh1cGRhdGVQYXlsb2FkLCBwcmV2QXJyYXlbaV0sIG5leHRBcnJheVtpXSwgdmFsaWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgZm9yICg7aSA8IHByZXZBcnJheS5sZW5ndGg7IGkrKykgdXBkYXRlUGF5bG9hZCA9IGNsZWFyTmVzdGVkUHJvcGVydHkodXBkYXRlUGF5bG9hZCwgcHJldkFycmF5W2ldLCB2YWxpZEF0dHJpYnV0ZXMpO1xuICAgICAgICBmb3IgKDtpIDwgbmV4dEFycmF5Lmxlbmd0aDsgaSsrKSB1cGRhdGVQYXlsb2FkID0gYWRkTmVzdGVkUHJvcGVydHkodXBkYXRlUGF5bG9hZCwgbmV4dEFycmF5W2ldLCB2YWxpZEF0dHJpYnV0ZXMpO1xuICAgICAgICByZXR1cm4gdXBkYXRlUGF5bG9hZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlmZk5lc3RlZFByb3BlcnR5KHVwZGF0ZVBheWxvYWQsIHByZXZQcm9wLCBuZXh0UHJvcCwgdmFsaWRBdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVQYXlsb2FkIHx8IHByZXZQcm9wICE9PSBuZXh0UHJvcCA/IHByZXZQcm9wICYmIG5leHRQcm9wID8gQXJyYXkuaXNBcnJheShwcmV2UHJvcCkgfHwgQXJyYXkuaXNBcnJheShuZXh0UHJvcCkgPyBBcnJheS5pc0FycmF5KHByZXZQcm9wKSAmJiBBcnJheS5pc0FycmF5KG5leHRQcm9wKSA/IGRpZmZOZXN0ZWRBcnJheVByb3BlcnR5KHVwZGF0ZVBheWxvYWQsIHByZXZQcm9wLCBuZXh0UHJvcCwgdmFsaWRBdHRyaWJ1dGVzKSA6IEFycmF5LmlzQXJyYXkocHJldlByb3ApID8gZGlmZlByb3BlcnRpZXModXBkYXRlUGF5bG9hZCwgZmxhdHRlblN0eWxlKHByZXZQcm9wKSwgcmVzb2x2ZU9iamVjdChuZXh0UHJvcCksIHZhbGlkQXR0cmlidXRlcykgOiBkaWZmUHJvcGVydGllcyh1cGRhdGVQYXlsb2FkLCByZXNvbHZlT2JqZWN0KHByZXZQcm9wKSwgZmxhdHRlblN0eWxlKG5leHRQcm9wKSwgdmFsaWRBdHRyaWJ1dGVzKSA6IGRpZmZQcm9wZXJ0aWVzKHVwZGF0ZVBheWxvYWQsIHJlc29sdmVPYmplY3QocHJldlByb3ApLCByZXNvbHZlT2JqZWN0KG5leHRQcm9wKSwgdmFsaWRBdHRyaWJ1dGVzKSA6IG5leHRQcm9wID8gYWRkTmVzdGVkUHJvcGVydHkodXBkYXRlUGF5bG9hZCwgbmV4dFByb3AsIHZhbGlkQXR0cmlidXRlcykgOiBwcmV2UHJvcCA/IGNsZWFyTmVzdGVkUHJvcGVydHkodXBkYXRlUGF5bG9hZCwgcHJldlByb3AsIHZhbGlkQXR0cmlidXRlcykgOiB1cGRhdGVQYXlsb2FkIDogdXBkYXRlUGF5bG9hZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkTmVzdGVkUHJvcGVydHkodXBkYXRlUGF5bG9hZCwgbmV4dFByb3AsIHZhbGlkQXR0cmlidXRlcykge1xuICAgICAgICBpZiAoIW5leHRQcm9wKSByZXR1cm4gdXBkYXRlUGF5bG9hZDtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5leHRQcm9wKSkgcmV0dXJuIGFkZFByb3BlcnRpZXModXBkYXRlUGF5bG9hZCwgcmVzb2x2ZU9iamVjdChuZXh0UHJvcCksIHZhbGlkQXR0cmlidXRlcyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV4dFByb3AubGVuZ3RoOyBpKyspIHVwZGF0ZVBheWxvYWQgPSBhZGROZXN0ZWRQcm9wZXJ0eSh1cGRhdGVQYXlsb2FkLCBuZXh0UHJvcFtpXSwgdmFsaWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVBheWxvYWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsZWFyTmVzdGVkUHJvcGVydHkodXBkYXRlUGF5bG9hZCwgcHJldlByb3AsIHZhbGlkQXR0cmlidXRlcykge1xuICAgICAgICBpZiAoIXByZXZQcm9wKSByZXR1cm4gdXBkYXRlUGF5bG9hZDtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByZXZQcm9wKSkgcmV0dXJuIGNsZWFyUHJvcGVydGllcyh1cGRhdGVQYXlsb2FkLCByZXNvbHZlT2JqZWN0KHByZXZQcm9wKSwgdmFsaWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmV2UHJvcC5sZW5ndGg7IGkrKykgdXBkYXRlUGF5bG9hZCA9IGNsZWFyTmVzdGVkUHJvcGVydHkodXBkYXRlUGF5bG9hZCwgcHJldlByb3BbaV0sIHZhbGlkQXR0cmlidXRlcyk7XG4gICAgICAgIHJldHVybiB1cGRhdGVQYXlsb2FkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaWZmUHJvcGVydGllcyh1cGRhdGVQYXlsb2FkLCBwcmV2UHJvcHMsIG5leHRQcm9wcywgdmFsaWRBdHRyaWJ1dGVzKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVDb25maWcsIG5leHRQcm9wLCBwcmV2UHJvcDtcbiAgICAgICAgZm9yICh2YXIgcHJvcEtleSBpbiBuZXh0UHJvcHMpIGlmIChhdHRyaWJ1dGVDb25maWcgPSB2YWxpZEF0dHJpYnV0ZXNbcHJvcEtleV0pIGlmIChwcmV2UHJvcCA9IHByZXZQcm9wc1twcm9wS2V5XSwgXG4gICAgICAgIG5leHRQcm9wID0gbmV4dFByb3BzW3Byb3BLZXldLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG5leHRQcm9wICYmIChuZXh0UHJvcCA9ICEwLCBcbiAgICAgICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBwcmV2UHJvcCAmJiAocHJldlByb3AgPSAhMCkpLCB2b2lkIDAgPT09IG5leHRQcm9wICYmIChuZXh0UHJvcCA9IG51bGwsIFxuICAgICAgICB2b2lkIDAgPT09IHByZXZQcm9wICYmIChwcmV2UHJvcCA9IG51bGwpKSwgcmVtb3ZlZEtleXMgJiYgKHJlbW92ZWRLZXlzW3Byb3BLZXldID0gITEpLCBcbiAgICAgICAgdXBkYXRlUGF5bG9hZCAmJiB2b2lkIDAgIT09IHVwZGF0ZVBheWxvYWRbcHJvcEtleV0pIHtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBhdHRyaWJ1dGVDb25maWcpIHVwZGF0ZVBheWxvYWRbcHJvcEtleV0gPSBuZXh0UHJvcDsgZWxzZSBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBhdHRyaWJ1dGVDb25maWcuZGlmZiB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGF0dHJpYnV0ZUNvbmZpZy5wcm9jZXNzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYXR0cmlidXRlQ29uZmlnLnByb2Nlc3MgPyBhdHRyaWJ1dGVDb25maWcucHJvY2VzcyhuZXh0UHJvcCkgOiBuZXh0UHJvcDtcbiAgICAgICAgICAgICAgICB1cGRhdGVQYXlsb2FkW3Byb3BLZXldID0gbmV4dFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHByZXZQcm9wICE9PSBuZXh0UHJvcCkgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGF0dHJpYnV0ZUNvbmZpZykgZGVmYXVsdERpZmZlcihwcmV2UHJvcCwgbmV4dFByb3ApICYmICgodXBkYXRlUGF5bG9hZCB8fCAodXBkYXRlUGF5bG9hZCA9IHt9KSlbcHJvcEtleV0gPSBuZXh0UHJvcCk7IGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYXR0cmlidXRlQ29uZmlnLmRpZmYgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBhdHRyaWJ1dGVDb25maWcucHJvY2Vzcykge1xuICAgICAgICAgICAgdmFyIHNob3VsZFVwZGF0ZSA9IHZvaWQgMCA9PT0gcHJldlByb3AgfHwgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYXR0cmlidXRlQ29uZmlnLmRpZmYgPyBhdHRyaWJ1dGVDb25maWcuZGlmZihwcmV2UHJvcCwgbmV4dFByb3ApIDogZGVmYXVsdERpZmZlcihwcmV2UHJvcCwgbmV4dFByb3ApKTtcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZSAmJiAobmV4dFZhbHVlID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBhdHRyaWJ1dGVDb25maWcucHJvY2VzcyA/IGF0dHJpYnV0ZUNvbmZpZy5wcm9jZXNzKG5leHRQcm9wKSA6IG5leHRQcm9wLCBcbiAgICAgICAgICAgICh1cGRhdGVQYXlsb2FkIHx8ICh1cGRhdGVQYXlsb2FkID0ge30pKVtwcm9wS2V5XSA9IG5leHRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSByZW1vdmVkS2V5cyA9IG51bGwsIHJlbW92ZWRLZXlDb3VudCA9IDAsIHVwZGF0ZVBheWxvYWQgPSBkaWZmTmVzdGVkUHJvcGVydHkodXBkYXRlUGF5bG9hZCwgcHJldlByb3AsIG5leHRQcm9wLCBhdHRyaWJ1dGVDb25maWcpLCBcbiAgICAgICAgcmVtb3ZlZEtleUNvdW50ID4gMCAmJiB1cGRhdGVQYXlsb2FkICYmIChyZXN0b3JlRGVsZXRlZFZhbHVlc0luTmVzdGVkQXJyYXkodXBkYXRlUGF5bG9hZCwgbmV4dFByb3AsIGF0dHJpYnV0ZUNvbmZpZyksIFxuICAgICAgICByZW1vdmVkS2V5cyA9IG51bGwpO1xuICAgICAgICBmb3IgKHByb3BLZXkgaW4gcHJldlByb3BzKSB2b2lkIDAgPT09IG5leHRQcm9wc1twcm9wS2V5XSAmJiAoYXR0cmlidXRlQ29uZmlnID0gdmFsaWRBdHRyaWJ1dGVzW3Byb3BLZXldKSAmJiAodXBkYXRlUGF5bG9hZCAmJiB2b2lkIDAgIT09IHVwZGF0ZVBheWxvYWRbcHJvcEtleV0gfHwgdm9pZCAwICE9PSAocHJldlByb3AgPSBwcmV2UHJvcHNbcHJvcEtleV0pICYmIChcIm9iamVjdFwiICE9IHR5cGVvZiBhdHRyaWJ1dGVDb25maWcgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBhdHRyaWJ1dGVDb25maWcuZGlmZiB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGF0dHJpYnV0ZUNvbmZpZy5wcm9jZXNzID8gKCh1cGRhdGVQYXlsb2FkIHx8ICh1cGRhdGVQYXlsb2FkID0ge30pKVtwcm9wS2V5XSA9IG51bGwsIFxuICAgICAgICByZW1vdmVkS2V5cyB8fCAocmVtb3ZlZEtleXMgPSB7fSksIHJlbW92ZWRLZXlzW3Byb3BLZXldIHx8IChyZW1vdmVkS2V5c1twcm9wS2V5XSA9ICEwLCBcbiAgICAgICAgcmVtb3ZlZEtleUNvdW50KyspKSA6IHVwZGF0ZVBheWxvYWQgPSBjbGVhck5lc3RlZFByb3BlcnR5KHVwZGF0ZVBheWxvYWQsIHByZXZQcm9wLCBhdHRyaWJ1dGVDb25maWcpKSk7XG4gICAgICAgIHJldHVybiB1cGRhdGVQYXlsb2FkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRQcm9wZXJ0aWVzKHVwZGF0ZVBheWxvYWQsIHByb3BzLCB2YWxpZEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0dXJuIGRpZmZQcm9wZXJ0aWVzKHVwZGF0ZVBheWxvYWQsIGVtcHR5T2JqZWN0JDIsIHByb3BzLCB2YWxpZEF0dHJpYnV0ZXMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGVhclByb3BlcnRpZXModXBkYXRlUGF5bG9hZCwgcHJldlByb3BzLCB2YWxpZEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0dXJuIGRpZmZQcm9wZXJ0aWVzKHVwZGF0ZVBheWxvYWQsIHByZXZQcm9wcywgZW1wdHlPYmplY3QkMiwgdmFsaWRBdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgdmFyIFJlYWN0TmF0aXZlQXR0cmlidXRlUGF5bG9hZCA9IHtcbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbihwcm9wcywgdmFsaWRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRkUHJvcGVydGllcyhudWxsLCBwcm9wcywgdmFsaWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGlmZjogZnVuY3Rpb24ocHJldlByb3BzLCBuZXh0UHJvcHMsIHZhbGlkQXR0cmlidXRlcykge1xuICAgICAgICAgICAgcmV0dXJuIGRpZmZQcm9wZXJ0aWVzKG51bGwsIHByZXZQcm9wcywgbmV4dFByb3BzLCB2YWxpZEF0dHJpYnV0ZXMpO1xuICAgICAgICB9XG4gICAgfSwgUmVhY3ROYXRpdmVBdHRyaWJ1dGVQYXlsb2FkXzEgPSBSZWFjdE5hdGl2ZUF0dHJpYnV0ZVBheWxvYWQ7XG4gICAgZnVuY3Rpb24gbW91bnRTYWZlQ2FsbGJhY2skMShjb250ZXh0LCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJib29sZWFuXCIgPT0gdHlwZW9mIGNvbnRleHQuX19pc01vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0Ll9faXNNb3VudGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGNvbnRleHQuaXNNb3VudGVkICYmICFjb250ZXh0LmlzTW91bnRlZCgpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRocm93T25TdHlsZXNQcm9wKGNvbXBvbmVudCwgcHJvcHMpIHtcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gcHJvcHMuc3R5bGVzKSB7XG4gICAgICAgICAgICB2YXIgb3duZXIgPSBjb21wb25lbnQuX293bmVyIHx8IG51bGwsIG5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWUsIG1zZyA9IFwiYHN0eWxlc2AgaXMgbm90IGEgc3VwcG9ydGVkIHByb3BlcnR5IG9mIGBcIiArIG5hbWUgKyBcImAsIGRpZCBcIiArIFwieW91IG1lYW4gYHN0eWxlYCAoc2luZ3VsYXIpP1wiO1xuICAgICAgICAgICAgdGhyb3cgb3duZXIgJiYgb3duZXIuY29uc3RydWN0b3IgJiYgb3duZXIuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgJiYgKG1zZyArPSBcIlxcblxcbkNoZWNrIHRoZSBgXCIgKyBvd25lci5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSArIFwiYCBwYXJlbnQgXCIgKyBcIiBjb21wb25lbnQuXCIpLCBcbiAgICAgICAgICAgIG5ldyBFcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdhcm5Gb3JTdHlsZVByb3BzJDEocHJvcHMsIHZhbGlkQXR0cmlidXRlcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsaWRBdHRyaWJ1dGVzLnN0eWxlKSB2YWxpZEF0dHJpYnV0ZXNba2V5XSB8fCB2b2lkIDAgPT09IHByb3BzW2tleV0gfHwgY29uc29sZS5lcnJvcihcIllvdSBhcmUgc2V0dGluZyB0aGUgc3R5bGUgYHsgXCIgKyBrZXkgKyBcIjogLi4uIH1gIGFzIGEgcHJvcC4gWW91IFwiICsgXCJzaG91bGQgbmVzdCBpdCBpbiBhIHN0eWxlIG9iamVjdC4gXCIgKyBcIkUuZy4gYHsgc3R5bGU6IHsgXCIgKyBrZXkgKyBcIjogLi4uIH0gfWBcIik7XG4gICAgfVxuICAgIHZhciBOYXRpdmVNZXRob2RzTWl4aW5VdGlscyA9IHtcbiAgICAgICAgbW91bnRTYWZlQ2FsbGJhY2s6IG1vdW50U2FmZUNhbGxiYWNrJDEsXG4gICAgICAgIHRocm93T25TdHlsZXNQcm9wOiB0aHJvd09uU3R5bGVzUHJvcCxcbiAgICAgICAgd2FybkZvclN0eWxlUHJvcHM6IHdhcm5Gb3JTdHlsZVByb3BzJDFcbiAgICB9O1xuICAgIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayQxKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgdmFyIG1vdW50U2FmZUNhbGxiYWNrID0gTmF0aXZlTWV0aG9kc01peGluVXRpbHMubW91bnRTYWZlQ2FsbGJhY2ssIHdhcm5Gb3JTdHlsZVByb3BzID0gTmF0aXZlTWV0aG9kc01peGluVXRpbHMud2FybkZvclN0eWxlUHJvcHMsIFJlYWN0TmF0aXZlRmliZXJIb3N0Q29tcG9uZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmN0aW9uIFJlYWN0TmF0aXZlRmliZXJIb3N0Q29tcG9uZW50KHRhZywgdmlld0NvbmZpZykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrJDEodGhpcywgUmVhY3ROYXRpdmVGaWJlckhvc3RDb21wb25lbnQpLCB0aGlzLl9uYXRpdmVUYWcgPSB0YWcsIHRoaXMuX2NoaWxkcmVuID0gW10sIFxuICAgICAgICAgICAgdGhpcy52aWV3Q29uZmlnID0gdmlld0NvbmZpZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVhY3ROYXRpdmVGaWJlckhvc3RDb21wb25lbnQucHJvdG90eXBlLmJsdXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFRleHRJbnB1dFN0YXRlLmJsdXJUZXh0SW5wdXQodGhpcy5fbmF0aXZlVGFnKTtcbiAgICAgICAgfSwgUmVhY3ROYXRpdmVGaWJlckhvc3RDb21wb25lbnQucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBUZXh0SW5wdXRTdGF0ZS5mb2N1c1RleHRJbnB1dCh0aGlzLl9uYXRpdmVUYWcpO1xuICAgICAgICB9LCBSZWFjdE5hdGl2ZUZpYmVySG9zdENvbXBvbmVudC5wcm90b3R5cGUubWVhc3VyZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBVSU1hbmFnZXIubWVhc3VyZSh0aGlzLl9uYXRpdmVUYWcsIG1vdW50U2FmZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKSk7XG4gICAgICAgIH0sIFJlYWN0TmF0aXZlRmliZXJIb3N0Q29tcG9uZW50LnByb3RvdHlwZS5tZWFzdXJlSW5XaW5kb3cgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgVUlNYW5hZ2VyLm1lYXN1cmVJbldpbmRvdyh0aGlzLl9uYXRpdmVUYWcsIG1vdW50U2FmZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKSk7XG4gICAgICAgIH0sIFJlYWN0TmF0aXZlRmliZXJIb3N0Q29tcG9uZW50LnByb3RvdHlwZS5tZWFzdXJlTGF5b3V0ID0gZnVuY3Rpb24ocmVsYXRpdmVUb05hdGl2ZU5vZGUsIG9uU3VjY2Vzcywgb25GYWlsKSB7XG4gICAgICAgICAgICBVSU1hbmFnZXIubWVhc3VyZUxheW91dCh0aGlzLl9uYXRpdmVUYWcsIHJlbGF0aXZlVG9OYXRpdmVOb2RlLCBtb3VudFNhZmVDYWxsYmFjayh0aGlzLCBvbkZhaWwpLCBtb3VudFNhZmVDYWxsYmFjayh0aGlzLCBvblN1Y2Nlc3MpKTtcbiAgICAgICAgfSwgUmVhY3ROYXRpdmVGaWJlckhvc3RDb21wb25lbnQucHJvdG90eXBlLnNldE5hdGl2ZVByb3BzID0gZnVuY3Rpb24obmF0aXZlUHJvcHMpIHtcbiAgICAgICAgICAgIHdhcm5Gb3JTdHlsZVByb3BzKG5hdGl2ZVByb3BzLCB0aGlzLnZpZXdDb25maWcudmFsaWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIHZhciB1cGRhdGVQYXlsb2FkID0gUmVhY3ROYXRpdmVBdHRyaWJ1dGVQYXlsb2FkXzEuY3JlYXRlKG5hdGl2ZVByb3BzLCB0aGlzLnZpZXdDb25maWcudmFsaWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIG51bGwgIT0gdXBkYXRlUGF5bG9hZCAmJiBVSU1hbmFnZXIudXBkYXRlVmlldyh0aGlzLl9uYXRpdmVUYWcsIHRoaXMudmlld0NvbmZpZy51aVZpZXdDbGFzc05hbWUsIHVwZGF0ZVBheWxvYWQpO1xuICAgICAgICB9LCBSZWFjdE5hdGl2ZUZpYmVySG9zdENvbXBvbmVudDtcbiAgICB9KCksIFJlYWN0TmF0aXZlRmliZXJIb3N0Q29tcG9uZW50XzEgPSBSZWFjdE5hdGl2ZUZpYmVySG9zdENvbXBvbmVudCwgSU5JVElBTF9UQUdfQ09VTlQgPSAxLCBSZWFjdE5hdGl2ZVRhZ0hhbmRsZXMgPSB7XG4gICAgICAgIHRhZ3NTdGFydEF0OiBJTklUSUFMX1RBR19DT1VOVCxcbiAgICAgICAgdGFnQ291bnQ6IElOSVRJQUxfVEFHX0NPVU5ULFxuICAgICAgICBhbGxvY2F0ZVRhZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKDt0aGlzLnJlYWN0VGFnSXNOYXRpdmVUb3BSb290SUQoUmVhY3ROYXRpdmVUYWdIYW5kbGVzLnRhZ0NvdW50KTsgKSBSZWFjdE5hdGl2ZVRhZ0hhbmRsZXMudGFnQ291bnQrKztcbiAgICAgICAgICAgIHZhciB0YWcgPSBSZWFjdE5hdGl2ZVRhZ0hhbmRsZXMudGFnQ291bnQ7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3ROYXRpdmVUYWdIYW5kbGVzLnRhZ0NvdW50KyssIHRhZztcbiAgICAgICAgfSxcbiAgICAgICAgYXNzZXJ0Um9vdFRhZzogZnVuY3Rpb24odGFnKSB7XG4gICAgICAgICAgICBpbnZhcmlhbnQodGhpcy5yZWFjdFRhZ0lzTmF0aXZlVG9wUm9vdElEKHRhZyksIFwiRXhwZWN0IGEgbmF0aXZlIHJvb3QgdGFnLCBpbnN0ZWFkIGdvdCAlc1wiLCB0YWcpO1xuICAgICAgICB9LFxuICAgICAgICByZWFjdFRhZ0lzTmF0aXZlVG9wUm9vdElEOiBmdW5jdGlvbihyZWFjdFRhZykge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWN0VGFnICUgMTAgPT0gMTtcbiAgICAgICAgfVxuICAgIH0sIFJlYWN0TmF0aXZlVGFnSGFuZGxlc18xID0gUmVhY3ROYXRpdmVUYWdIYW5kbGVzLCB2aWV3Q29uZmlnQ2FsbGJhY2tzID0gbmV3IE1hcCgpLCB2aWV3Q29uZmlncyA9IG5ldyBNYXAoKSwgUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkgPSB7XG4gICAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGludmFyaWFudCghdmlld0NvbmZpZ0NhbGxiYWNrcy5oYXMobmFtZSksIFwiVHJpZWQgdG8gcmVnaXN0ZXIgdHdvIHZpZXdzIHdpdGggdGhlIHNhbWUgbmFtZSAlc1wiLCBuYW1lKSwgXG4gICAgICAgICAgICB2aWV3Q29uZmlnQ2FsbGJhY2tzLnNldChuYW1lLCBjYWxsYmFjayksIG5hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgdmFyIHZpZXdDb25maWcgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodmlld0NvbmZpZ3MuaGFzKG5hbWUpKSB2aWV3Q29uZmlnID0gdmlld0NvbmZpZ3MuZ2V0KG5hbWUpOyBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSB2aWV3Q29uZmlnQ2FsbGJhY2tzLmdldChuYW1lKTtcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoXCJmdW5jdGlvblwiID09IHR5cGVvZiBjYWxsYmFjaywgXCJWaWV3IGNvbmZpZyBub3QgZm91bmQgZm9yIG5hbWUgJXNcIiwgbmFtZSksIFxuICAgICAgICAgICAgICAgIHZpZXdDb25maWdDYWxsYmFja3Muc2V0KG5hbWUsIG51bGwpLCB2aWV3Q29uZmlnID0gY2FsbGJhY2soKSwgdmlld0NvbmZpZ3Muc2V0KG5hbWUsIHZpZXdDb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGludmFyaWFudCh2aWV3Q29uZmlnLCBcIlZpZXcgY29uZmlnIG5vdCBmb3VuZCBmb3IgbmFtZSAlc1wiLCBuYW1lKSwgdmlld0NvbmZpZztcbiAgICAgICAgfVxuICAgIH0sIFJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5XzEgPSBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSwgcHJlY2FjaGVGaWJlck5vZGUkMSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50VHJlZV8xLnByZWNhY2hlRmliZXJOb2RlLCB1bmNhY2hlRmliZXJOb2RlJDEgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudFRyZWVfMS51bmNhY2hlRmliZXJOb2RlLCB1cGRhdGVGaWJlclByb3BzJDEgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudFRyZWVfMS51cGRhdGVGaWJlclByb3BzO1xuICAgIGZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VW5jYWNoZUZpYmVyTm9kZShub2RlKSB7XG4gICAgICAgIFwibnVtYmVyXCIgPT0gdHlwZW9mIG5vZGUgPyB1bmNhY2hlRmliZXJOb2RlJDEobm9kZSkgOiAodW5jYWNoZUZpYmVyTm9kZSQxKG5vZGUuX25hdGl2ZVRhZyksIFxuICAgICAgICBub2RlLl9jaGlsZHJlbi5mb3JFYWNoKHJlY3Vyc2l2ZWx5VW5jYWNoZUZpYmVyTm9kZSkpO1xuICAgIH1cbiAgICB2YXIgTmF0aXZlUmVuZGVyZXIgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdmFyIGdldFB1YmxpY0luc3RhbmNlID0gY29uZmlnLmdldFB1YmxpY0luc3RhbmNlLCBfUmVhY3RGaWJlclNjaGVkdWxlciA9IFJlYWN0RmliZXJTY2hlZHVsZXIoY29uZmlnKSwgc2NoZWR1bGVVcGRhdGUgPSBfUmVhY3RGaWJlclNjaGVkdWxlci5zY2hlZHVsZVVwZGF0ZSwgZ2V0UHJpb3JpdHlDb250ZXh0ID0gX1JlYWN0RmliZXJTY2hlZHVsZXIuZ2V0UHJpb3JpdHlDb250ZXh0LCBiYXRjaGVkVXBkYXRlcyA9IF9SZWFjdEZpYmVyU2NoZWR1bGVyLmJhdGNoZWRVcGRhdGVzLCB1bmJhdGNoZWRVcGRhdGVzID0gX1JlYWN0RmliZXJTY2hlZHVsZXIudW5iYXRjaGVkVXBkYXRlcywgZmx1c2hTeW5jID0gX1JlYWN0RmliZXJTY2hlZHVsZXIuZmx1c2hTeW5jLCBkZWZlcnJlZFVwZGF0ZXMgPSBfUmVhY3RGaWJlclNjaGVkdWxlci5kZWZlcnJlZFVwZGF0ZXM7XG4gICAgICAgIGZ1bmN0aW9uIHNjaGVkdWxlVG9wTGV2ZWxVcGRhdGUoY3VycmVudCwgZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIFwicmVuZGVyXCIgPT09IFJlYWN0RGVidWdDdXJyZW50RmliZXIucGhhc2UgJiYgbnVsbCAhPT0gUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5jdXJyZW50ICYmIHdhcm5pbmckMSghMSwgXCJSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZTsgXCIgKyBcInRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyIGlzIG5vdCBhbGxvd2VkLiBcIiArIFwiSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluIGNvbXBvbmVudERpZFVwZGF0ZS5cXG5cXG5cIiArIFwiQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJXMuXCIsIGdldENvbXBvbmVudE5hbWUoUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5jdXJyZW50KSB8fCBcIlVua25vd25cIik7XG4gICAgICAgICAgICB2YXIgZm9yY2VBc3luYyA9IFJlYWN0RmVhdHVyZUZsYWdzXzEuZW5hYmxlQXN5bmNTdWJ0cmVlQVBJICYmIG51bGwgIT0gZWxlbWVudCAmJiBudWxsICE9IGVsZW1lbnQudHlwZSAmJiBudWxsICE9IGVsZW1lbnQudHlwZS5wcm90b3R5cGUgJiYgITAgPT09IGVsZW1lbnQudHlwZS5wcm90b3R5cGUudW5zdGFibGVfaXNBc3luY1JlYWN0Q29tcG9uZW50LCBwcmlvcml0eUxldmVsID0gZ2V0UHJpb3JpdHlDb250ZXh0KGN1cnJlbnQsIGZvcmNlQXN5bmMpLCBuZXh0U3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdm9pZCAwID09PSBjYWxsYmFjayA/IG51bGwgOiBjYWxsYmFjaywgd2FybmluZyQxKG51bGwgPT09IGNhbGxiYWNrIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgY2FsbGJhY2ssIFwicmVuZGVyKC4uLik6IEV4cGVjdGVkIHRoZSBsYXN0IG9wdGlvbmFsIGBjYWxsYmFja2AgYXJndW1lbnQgdG8gYmUgYSBcIiArIFwiZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLlwiLCBjYWxsYmFjayksIFxuICAgICAgICAgICAgYWRkVG9wTGV2ZWxVcGRhdGUoY3VycmVudCwgbmV4dFN0YXRlLCBjYWxsYmFjaywgcHJpb3JpdHlMZXZlbCksIHNjaGVkdWxlVXBkYXRlKGN1cnJlbnQsIHByaW9yaXR5TGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGVDb250YWluZXI6IGZ1bmN0aW9uKGNvbnRhaW5lckluZm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJSb290KGNvbnRhaW5lckluZm8pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwZGF0ZUNvbnRhaW5lcjogZnVuY3Rpb24oZWxlbWVudCwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBjb250YWluZXIuY3VycmVudDtcbiAgICAgICAgICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbCAmJiAobnVsbCA9PT0gY3VycmVudC5hbHRlcm5hdGUgPyBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk1vdW50Q29udGFpbmVyKGNvbnRhaW5lcikgOiBudWxsID09PSBlbGVtZW50ID8gUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29udGFpbmVyKGNvbnRhaW5lcikgOiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVwZGF0ZUNvbnRhaW5lcihjb250YWluZXIpKTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gY29udGFpbmVyLmNvbnRleHQgPyBjb250YWluZXIuY29udGV4dCA9IGNvbnRleHQgOiBjb250YWluZXIucGVuZGluZ0NvbnRleHQgPSBjb250ZXh0LCBcbiAgICAgICAgICAgICAgICBzY2hlZHVsZVRvcExldmVsVXBkYXRlKGN1cnJlbnQsIGVsZW1lbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiYXRjaGVkVXBkYXRlczogYmF0Y2hlZFVwZGF0ZXMsXG4gICAgICAgICAgICB1bmJhdGNoZWRVcGRhdGVzOiB1bmJhdGNoZWRVcGRhdGVzLFxuICAgICAgICAgICAgZGVmZXJyZWRVcGRhdGVzOiBkZWZlcnJlZFVwZGF0ZXMsXG4gICAgICAgICAgICBmbHVzaFN5bmM6IGZsdXNoU3luYyxcbiAgICAgICAgICAgIGdldFB1YmxpY1Jvb3RJbnN0YW5jZTogZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckZpYmVyID0gY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKCFjb250YWluZXJGaWJlci5jaGlsZCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb250YWluZXJGaWJlci5jaGlsZC50YWcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFB1YmxpY0luc3RhbmNlKGNvbnRhaW5lckZpYmVyLmNoaWxkLnN0YXRlTm9kZSk7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXJGaWJlci5jaGlsZC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbmRIb3N0SW5zdGFuY2U6IGZ1bmN0aW9uKGZpYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhvc3RGaWJlciA9IGZpbmRDdXJyZW50SG9zdEZpYmVyKGZpYmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gaG9zdEZpYmVyID8gbnVsbCA6IGhvc3RGaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6IGZ1bmN0aW9uKGZpYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhvc3RGaWJlciA9IGZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFscyhmaWJlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IGhvc3RGaWJlciA/IG51bGwgOiBob3N0RmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0oe1xuICAgICAgICBhcHBlbmRDaGlsZDogZnVuY3Rpb24ocGFyZW50SW5zdGFuY2UsIGNoaWxkKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRUYWcgPSBcIm51bWJlclwiID09IHR5cGVvZiBjaGlsZCA/IGNoaWxkIDogY2hpbGQuX25hdGl2ZVRhZywgY2hpbGRyZW4gPSBwYXJlbnRJbnN0YW5jZS5fY2hpbGRyZW4sIGluZGV4ID0gY2hpbGRyZW4uaW5kZXhPZihjaGlsZCk7XG4gICAgICAgICAgICBpbmRleCA+PSAwID8gKGNoaWxkcmVuLnNwbGljZShpbmRleCwgMSksIGNoaWxkcmVuLnB1c2goY2hpbGQpLCBVSU1hbmFnZXIubWFuYWdlQ2hpbGRyZW4ocGFyZW50SW5zdGFuY2UuX25hdGl2ZVRhZywgWyBpbmRleCBdLCBbIGNoaWxkcmVuLmxlbmd0aCAtIDEgXSwgW10sIFtdLCBbXSkpIDogKGNoaWxkcmVuLnB1c2goY2hpbGQpLCBcbiAgICAgICAgICAgIFVJTWFuYWdlci5tYW5hZ2VDaGlsZHJlbihwYXJlbnRJbnN0YW5jZS5fbmF0aXZlVGFnLCBbXSwgW10sIFsgY2hpbGRUYWcgXSwgWyBjaGlsZHJlbi5sZW5ndGggLSAxIF0sIFtdKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGVuZENoaWxkVG9Db250YWluZXI6IGZ1bmN0aW9uKHBhcmVudEluc3RhbmNlLCBjaGlsZCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkVGFnID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgY2hpbGQgPyBjaGlsZCA6IGNoaWxkLl9uYXRpdmVUYWc7XG4gICAgICAgICAgICBVSU1hbmFnZXIuc2V0Q2hpbGRyZW4ocGFyZW50SW5zdGFuY2UsIFsgY2hpbGRUYWcgXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGVuZEluaXRpYWxDaGlsZDogZnVuY3Rpb24ocGFyZW50SW5zdGFuY2UsIGNoaWxkKSB7XG4gICAgICAgICAgICBwYXJlbnRJbnN0YW5jZS5fY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbW1pdFRleHRVcGRhdGU6IGZ1bmN0aW9uKHRleHRJbnN0YW5jZSwgb2xkVGV4dCwgbmV3VGV4dCkge1xuICAgICAgICAgICAgVUlNYW5hZ2VyLnVwZGF0ZVZpZXcodGV4dEluc3RhbmNlLCBcIlJDVFJhd1RleHRcIiwge1xuICAgICAgICAgICAgICAgIHRleHQ6IG5ld1RleHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBjb21taXRNb3VudDogZnVuY3Rpb24oaW5zdGFuY2UsIHR5cGUsIG5ld1Byb3BzLCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7fSxcbiAgICAgICAgY29tbWl0VXBkYXRlOiBmdW5jdGlvbihpbnN0YW5jZSwgdXBkYXRlUGF5bG9hZFRPRE8sIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICAgICAgICAgICAgdmFyIHZpZXdDb25maWcgPSBpbnN0YW5jZS52aWV3Q29uZmlnO1xuICAgICAgICAgICAgdXBkYXRlRmliZXJQcm9wcyQxKGluc3RhbmNlLl9uYXRpdmVUYWcsIG5ld1Byb3BzKTtcbiAgICAgICAgICAgIHZhciB1cGRhdGVQYXlsb2FkID0gUmVhY3ROYXRpdmVBdHRyaWJ1dGVQYXlsb2FkXzEuZGlmZihvbGRQcm9wcywgbmV3UHJvcHMsIHZpZXdDb25maWcudmFsaWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIG51bGwgIT0gdXBkYXRlUGF5bG9hZCAmJiBVSU1hbmFnZXIudXBkYXRlVmlldyhpbnN0YW5jZS5fbmF0aXZlVGFnLCB2aWV3Q29uZmlnLnVpVmlld0NsYXNzTmFtZSwgdXBkYXRlUGF5bG9hZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUluc3RhbmNlOiBmdW5jdGlvbih0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCwgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICAgICAgICAgICAgdmFyIHRhZyA9IFJlYWN0TmF0aXZlVGFnSGFuZGxlc18xLmFsbG9jYXRlVGFnKCksIHZpZXdDb25maWcgPSBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeV8xLmdldCh0eXBlKTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB2aWV3Q29uZmlnLnZhbGlkQXR0cmlidXRlcykgcHJvcHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYocHJvcHNba2V5XSk7XG4gICAgICAgICAgICB2YXIgdXBkYXRlUGF5bG9hZCA9IFJlYWN0TmF0aXZlQXR0cmlidXRlUGF5bG9hZF8xLmNyZWF0ZShwcm9wcywgdmlld0NvbmZpZy52YWxpZEF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgVUlNYW5hZ2VyLmNyZWF0ZVZpZXcodGFnLCB2aWV3Q29uZmlnLnVpVmlld0NsYXNzTmFtZSwgcm9vdENvbnRhaW5lckluc3RhbmNlLCB1cGRhdGVQYXlsb2FkKTtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBuZXcgUmVhY3ROYXRpdmVGaWJlckhvc3RDb21wb25lbnRfMSh0YWcsIHZpZXdDb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuIHByZWNhY2hlRmliZXJOb2RlJDEoaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSwgdGFnKSwgdXBkYXRlRmliZXJQcm9wcyQxKHRhZywgcHJvcHMpLCBcbiAgICAgICAgICAgIGNvbXBvbmVudDtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlVGV4dEluc3RhbmNlOiBmdW5jdGlvbih0ZXh0LCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0LCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gICAgICAgICAgICB2YXIgdGFnID0gUmVhY3ROYXRpdmVUYWdIYW5kbGVzXzEuYWxsb2NhdGVUYWcoKTtcbiAgICAgICAgICAgIHJldHVybiBVSU1hbmFnZXIuY3JlYXRlVmlldyh0YWcsIFwiUkNUUmF3VGV4dFwiLCByb290Q29udGFpbmVySW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgICB9KSwgcHJlY2FjaGVGaWJlck5vZGUkMShpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCB0YWcpLCB0YWc7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOiBmdW5jdGlvbihwYXJlbnRJbnN0YW5jZSwgdHlwZSwgcHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKDAgPT09IHBhcmVudEluc3RhbmNlLl9jaGlsZHJlbi5sZW5ndGgpIHJldHVybiAhMTtcbiAgICAgICAgICAgIHZhciBuYXRpdmVUYWdzID0gcGFyZW50SW5zdGFuY2UuX2NoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIm51bWJlclwiID09IHR5cGVvZiBjaGlsZCA/IGNoaWxkIDogY2hpbGQuX25hdGl2ZVRhZztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFVJTWFuYWdlci5zZXRDaGlsZHJlbihwYXJlbnRJbnN0YW5jZS5fbmF0aXZlVGFnLCBuYXRpdmVUYWdzKSwgITE7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFJvb3RIb3N0Q29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZW1wdHlPYmplY3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGdldENoaWxkSG9zdENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGVtcHR5T2JqZWN0O1xuICAgICAgICB9LFxuICAgICAgICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihwYXJlbnRJbnN0YW5jZSwgY2hpbGQsIGJlZm9yZUNoaWxkKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBwYXJlbnRJbnN0YW5jZS5fY2hpbGRyZW4sIGluZGV4ID0gY2hpbGRyZW4uaW5kZXhPZihjaGlsZCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgdmFyIGJlZm9yZUNoaWxkSW5kZXggPSBjaGlsZHJlbi5pbmRleE9mKGJlZm9yZUNoaWxkKTtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5zcGxpY2UoYmVmb3JlQ2hpbGRJbmRleCwgMCwgY2hpbGQpLCBVSU1hbmFnZXIubWFuYWdlQ2hpbGRyZW4ocGFyZW50SW5zdGFuY2UuX25hdGl2ZVRhZywgWyBpbmRleCBdLCBbIGJlZm9yZUNoaWxkSW5kZXggXSwgW10sIFtdLCBbXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBfYmVmb3JlQ2hpbGRJbmRleCA9IGNoaWxkcmVuLmluZGV4T2YoYmVmb3JlQ2hpbGQpO1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShfYmVmb3JlQ2hpbGRJbmRleCwgMCwgY2hpbGQpO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZFRhZyA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIGNoaWxkID8gY2hpbGQgOiBjaGlsZC5fbmF0aXZlVGFnO1xuICAgICAgICAgICAgICAgIFVJTWFuYWdlci5tYW5hZ2VDaGlsZHJlbihwYXJlbnRJbnN0YW5jZS5fbmF0aXZlVGFnLCBbXSwgW10sIFsgY2hpbGRUYWcgXSwgWyBfYmVmb3JlQ2hpbGRJbmRleCBdLCBbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGluc2VydEluQ29udGFpbmVyQmVmb3JlOiBmdW5jdGlvbihwYXJlbnRJbnN0YW5jZSwgY2hpbGQsIGJlZm9yZUNoaWxkKSB7XG4gICAgICAgICAgICBpbnZhcmlhbnQoXCJudW1iZXJcIiAhPSB0eXBlb2YgcGFyZW50SW5zdGFuY2UsIFwiQ29udGFpbmVyIGRvZXMgbm90IHN1cHBvcnQgaW5zZXJ0QmVmb3JlIG9wZXJhdGlvblwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyZUZvckNvbW1pdDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgcHJlcGFyZVVwZGF0ZTogZnVuY3Rpb24oaW5zdGFuY2UsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGVtcHR5T2JqZWN0O1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVDaGlsZDogZnVuY3Rpb24ocGFyZW50SW5zdGFuY2UsIGNoaWxkKSB7XG4gICAgICAgICAgICByZWN1cnNpdmVseVVuY2FjaGVGaWJlck5vZGUoY2hpbGQpO1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcGFyZW50SW5zdGFuY2UuX2NoaWxkcmVuLCBpbmRleCA9IGNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKSwgVUlNYW5hZ2VyLm1hbmFnZUNoaWxkcmVuKHBhcmVudEluc3RhbmNlLl9uYXRpdmVUYWcsIFtdLCBbXSwgW10sIFtdLCBbIGluZGV4IF0pO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVDaGlsZEZyb21Db250YWluZXI6IGZ1bmN0aW9uKHBhcmVudEluc3RhbmNlLCBjaGlsZCkge1xuICAgICAgICAgICAgcmVjdXJzaXZlbHlVbmNhY2hlRmliZXJOb2RlKGNoaWxkKSwgVUlNYW5hZ2VyLm1hbmFnZUNoaWxkcmVuKHBhcmVudEluc3RhbmNlLCBbXSwgW10sIFtdLCBbXSwgWyAwIF0pO1xuICAgICAgICB9LFxuICAgICAgICByZXNldEFmdGVyQ29tbWl0OiBmdW5jdGlvbigpIHt9LFxuICAgICAgICByZXNldFRleHRDb250ZW50OiBmdW5jdGlvbihpbnN0YW5jZSkge30sXG4gICAgICAgIHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWU6IGZ1bmN0aW9uKHR5cGUsIHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH0sXG4gICAgICAgIHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjazogY29tbW9uanNHbG9iYWwucmVxdWVzdElkbGVDYWxsYmFjayxcbiAgICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQ6IGZ1bmN0aW9uKHR5cGUsIHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH0sXG4gICAgICAgIHVzZVN5bmNTY2hlZHVsaW5nOiAhMFxuICAgIH0pLCBSZWFjdE5hdGl2ZUZpYmVyUmVuZGVyZXIgPSBOYXRpdmVSZW5kZXJlciwgZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudFRyZWVfMS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSwgZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgkMSA9IFJlYWN0RmliZXJUcmVlUmVmbGVjdGlvbi5maW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aCwgSG9zdENvbXBvbmVudCQxMCA9IFJlYWN0VHlwZU9mV29yay5Ib3N0Q29tcG9uZW50LCBnZXRJbnNwZWN0b3JEYXRhRm9yVmlld1RhZyA9IHZvaWQgMCwgdHJhdmVyc2VPd25lclRyZWVVcCA9IGZ1bmN0aW9uKGhpZXJhcmNoeSwgaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UgJiYgKGhpZXJhcmNoeS51bnNoaWZ0KGluc3RhbmNlKSwgdHJhdmVyc2VPd25lclRyZWVVcChoaWVyYXJjaHksIGluc3RhbmNlLl9kZWJ1Z093bmVyKSk7XG4gICAgfSwgZ2V0T3duZXJIaWVyYXJjaHkgPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgICAgICB2YXIgaGllcmFyY2h5ID0gW107XG4gICAgICAgIHJldHVybiB0cmF2ZXJzZU93bmVyVHJlZVVwKGhpZXJhcmNoeSwgaW5zdGFuY2UpLCBoaWVyYXJjaHk7XG4gICAgfSwgbGFzdE5vbkhvc3RJbnN0YW5jZSA9IGZ1bmN0aW9uKGhpZXJhcmNoeSkge1xuICAgICAgICBmb3IgKHZhciBpID0gaGllcmFyY2h5Lmxlbmd0aCAtIDE7IGkgPiAxOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGhpZXJhcmNoeVtpXTtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS50YWcgIT09IEhvc3RDb21wb25lbnQkMTApIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGllcmFyY2h5WzBdO1xuICAgIH0sIGdldEhvc3RQcm9wcyA9IGZ1bmN0aW9uKGZpYmVyKSB7XG4gICAgICAgIHZhciBob3N0ID0gUmVhY3RGaWJlclRyZWVSZWZsZWN0aW9uLmZpbmRDdXJyZW50SG9zdEZpYmVyKGZpYmVyKTtcbiAgICAgICAgcmV0dXJuIGhvc3QgPyBob3N0Lm1lbW9pemVkUHJvcHMgfHwgZW1wdHlPYmplY3QgOiBlbXB0eU9iamVjdDtcbiAgICB9LCBnZXRIb3N0Tm9kZSA9IGZ1bmN0aW9uKGZpYmVyLCBmaW5kTm9kZUhhbmRsZSkge1xuICAgICAgICBmb3IgKHZhciBob3N0Tm9kZSA9IHZvaWQgMDsgZmliZXI7ICkge1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGZpYmVyLnN0YXRlTm9kZSAmJiBmaWJlci50YWcgPT09IEhvc3RDb21wb25lbnQkMTAgJiYgKGhvc3ROb2RlID0gZmluZE5vZGVIYW5kbGUoZmliZXIuc3RhdGVOb2RlKSksIFxuICAgICAgICAgICAgaG9zdE5vZGUpIHJldHVybiBob3N0Tm9kZTtcbiAgICAgICAgICAgIGZpYmVyID0gZmliZXIuY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgY3JlYXRlSGllcmFyY2h5ID0gZnVuY3Rpb24oZmliZXJIaWVyYXJjaHkpIHtcbiAgICAgICAgcmV0dXJuIGZpYmVySGllcmFyY2h5Lm1hcChmdW5jdGlvbihmaWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBnZXRDb21wb25lbnROYW1lXzEoZmliZXIpLFxuICAgICAgICAgICAgICAgIGdldEluc3BlY3RvckRhdGE6IGZ1bmN0aW9uKGZpbmROb2RlSGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVSU1hbmFnZXIubWVhc3VyZShnZXRIb3N0Tm9kZShmaWJlciwgZmluZE5vZGVIYW5kbGUpLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHM6IGdldEhvc3RQcm9wcyhmaWJlciksXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGZpYmVyLl9kZWJ1Z1NvdXJjZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgZ2V0SW5zcGVjdG9yRGF0YUZvclZpZXdUYWcgPSBmdW5jdGlvbih2aWV3VGFnKSB7XG4gICAgICAgIHZhciBjbG9zZXN0SW5zdGFuY2UgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSh2aWV3VGFnKTtcbiAgICAgICAgaWYgKCFjbG9zZXN0SW5zdGFuY2UpIHJldHVybiB7XG4gICAgICAgICAgICBoaWVyYXJjaHk6IFtdLFxuICAgICAgICAgICAgcHJvcHM6IGVtcHR5T2JqZWN0LFxuICAgICAgICAgICAgc2VsZWN0aW9uOiBudWxsLFxuICAgICAgICAgICAgc291cmNlOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHZhciBmaWJlciA9IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoJDEoY2xvc2VzdEluc3RhbmNlKSwgZmliZXJIaWVyYXJjaHkgPSBnZXRPd25lckhpZXJhcmNoeShmaWJlciksIGluc3RhbmNlID0gbGFzdE5vbkhvc3RJbnN0YW5jZShmaWJlckhpZXJhcmNoeSksIGhpZXJhcmNoeSA9IGNyZWF0ZUhpZXJhcmNoeShmaWJlckhpZXJhcmNoeSksIHByb3BzID0gZ2V0SG9zdFByb3BzKGluc3RhbmNlKSwgc291cmNlID0gaW5zdGFuY2UuX2RlYnVnU291cmNlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGllcmFyY2h5OiBoaWVyYXJjaHksXG4gICAgICAgICAgICBwcm9wczogcHJvcHMsXG4gICAgICAgICAgICBzZWxlY3Rpb246IGZpYmVySGllcmFyY2h5LmluZGV4T2YoaW5zdGFuY2UpLFxuICAgICAgICAgICAgc291cmNlOiBzb3VyY2VcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBSZWFjdE5hdGl2ZUZpYmVySW5zcGVjdG9yID0ge1xuICAgICAgICBnZXRJbnNwZWN0b3JEYXRhRm9yVmlld1RhZzogZ2V0SW5zcGVjdG9yRGF0YUZvclZpZXdUYWdcbiAgICB9LCBSZWFjdFZlcnNpb24gPSBcIjE2LjAuMFwiLCBSZWFjdEN1cnJlbnRPd25lciQzID0gUmVhY3RHbG9iYWxTaGFyZWRTdGF0ZV8xLlJlYWN0Q3VycmVudE93bmVyLCB3YXJuaW5nJDExID0gcmVxdWlyZSQkMDtcbiAgICBmdW5jdGlvbiBmaW5kTm9kZUhhbmRsZShjb21wb25lbnRPckhhbmRsZSkge1xuICAgICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lciQzLmN1cnJlbnQ7XG4gICAgICAgIGlmIChudWxsICE9PSBvd25lciAmJiBudWxsICE9PSBvd25lci5zdGF0ZU5vZGUgJiYgKHdhcm5pbmckMTEob3duZXIuc3RhdGVOb2RlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciwgXCIlcyBpcyBhY2Nlc3NpbmcgZmluZE5vZGVIYW5kbGUgaW5zaWRlIGl0cyByZW5kZXIoKS4gXCIgKyBcInJlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgXCIgKyBcIm5ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzIFwiICsgXCJyZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCBcIiArIFwiY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuXCIsIGdldENvbXBvbmVudE5hbWVfMShvd25lcikgfHwgXCJBIGNvbXBvbmVudFwiKSwgXG4gICAgICAgIG93bmVyLnN0YXRlTm9kZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSAhMCksIG51bGwgPT0gY29tcG9uZW50T3JIYW5kbGUpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgY29tcG9uZW50T3JIYW5kbGUpIHJldHVybiBjb21wb25lbnRPckhhbmRsZTtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IGNvbXBvbmVudE9ySGFuZGxlLCBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcF8xLmdldChjb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gaW50ZXJuYWxJbnN0YW5jZSA/IFJlYWN0TmF0aXZlRmliZXJSZW5kZXJlci5maW5kSG9zdEluc3RhbmNlKGludGVybmFsSW5zdGFuY2UpIDogY29tcG9uZW50IHx8IChpbnZhcmlhbnQoXCJvYmplY3RcIiA9PSB0eXBlb2YgY29tcG9uZW50ICYmIFwiX25hdGl2ZVRhZ1wiIGluIGNvbXBvbmVudCB8fCBudWxsICE9IGNvbXBvbmVudC5yZW5kZXIgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBjb21wb25lbnQucmVuZGVyLCBcImZpbmROb2RlSGFuZGxlKC4uLik6IEFyZ3VtZW50IGlzIG5vdCBhIGNvbXBvbmVudCBcIiArIFwiKHR5cGU6ICVzLCBrZXlzOiAlcylcIiwgdHlwZW9mIGNvbXBvbmVudCwgT2JqZWN0LmtleXMoY29tcG9uZW50KSksIFxuICAgICAgICB2b2lkIGludmFyaWFudCghMSwgXCJmaW5kTm9kZUhhbmRsZSguLi4pOiBVbmFibGUgdG8gZmluZCBub2RlIGhhbmRsZSBmb3IgdW5tb3VudGVkIFwiICsgXCJjb21wb25lbnQuXCIpKTtcbiAgICB9XG4gICAgdmFyIGZpbmROb2RlSGFuZGxlXzEgPSBmaW5kTm9kZUhhbmRsZSwgZmluZE51bWVyaWNOb2RlSGFuZGxlID0gZnVuY3Rpb24oY29tcG9uZW50T3JIYW5kbGUpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluZE5vZGVIYW5kbGVfMShjb21wb25lbnRPckhhbmRsZSk7XG4gICAgICAgIHJldHVybiBudWxsID09IGluc3RhbmNlIHx8IFwibnVtYmVyXCIgPT0gdHlwZW9mIGluc3RhbmNlID8gaW5zdGFuY2UgOiBpbnN0YW5jZS5fbmF0aXZlVGFnO1xuICAgIH0sIGV2ZW50UGx1Z2luT3JkZXIgPSBudWxsLCBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuICAgIGZ1bmN0aW9uIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCkge1xuICAgICAgICBpZiAoZXZlbnRQbHVnaW5PcmRlcikgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgICAgICAgICAgdmFyIHBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdLCBwbHVnaW5JbmRleCA9IGV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAgICAgICAgIGlmIChpbnZhcmlhbnQocGx1Z2luSW5kZXggPiAtMSwgXCJFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gXCIgKyBcInRoZSBwbHVnaW4gb3JkZXJpbmcsIGAlc2AuXCIsIHBsdWdpbk5hbWUpLCBcbiAgICAgICAgICAgICFFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KHBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzLCBcIkV2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgIFwiICsgXCJtZXRob2QsIGJ1dCBgJXNgIGRvZXMgbm90LlwiLCBwbHVnaW5OYW1lKSwgXG4gICAgICAgICAgICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zW3BsdWdpbkluZGV4XSA9IHBsdWdpbk1vZHVsZTtcbiAgICAgICAgICAgICAgICB2YXIgcHVibGlzaGVkRXZlbnRzID0gcGx1Z2luTW9kdWxlLmV2ZW50VHlwZXM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cykgaW52YXJpYW50KHB1Ymxpc2hFdmVudEZvclBsdWdpbihwdWJsaXNoZWRFdmVudHNbZXZlbnROYW1lXSwgcGx1Z2luTW9kdWxlLCBldmVudE5hbWUpLCBcIkV2ZW50UGx1Z2luUmVnaXN0cnk6IEZhaWxlZCB0byBwdWJsaXNoIGV2ZW50IGAlc2AgZm9yIHBsdWdpbiBgJXNgLlwiLCBldmVudE5hbWUsIHBsdWdpbk5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihkaXNwYXRjaENvbmZpZywgcGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgICAgICAgaW52YXJpYW50KCFFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpLCBcIkV2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSBcIiArIFwiZXZlbnQgbmFtZSwgYCVzYC5cIiwgZXZlbnROYW1lKSwgXG4gICAgICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcbiAgICAgICAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzID0gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7XG4gICAgICAgIGlmIChwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgICAgICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICAgICAgICAgIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lID0gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VOYW1lXTtcbiAgICAgICAgICAgICAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShwaGFzZWRSZWdpc3RyYXRpb25OYW1lLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gITA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSAmJiAocHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSwgcGx1Z2luTW9kdWxlLCBldmVudE5hbWUpLCBcbiAgICAgICAgITApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShyZWdpc3RyYXRpb25OYW1lLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAgICAgICBpbnZhcmlhbnQoIUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0sIFwiRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lIFwiICsgXCJyZWdpc3RyYXRpb24gbmFtZSwgYCVzYC5cIiwgcmVnaXN0cmF0aW9uTmFtZSksIFxuICAgICAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gcGx1Z2luTW9kdWxlLCBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBwbHVnaW5Nb2R1bGUuZXZlbnRUeXBlc1tldmVudE5hbWVdLmRlcGVuZGVuY2llcztcbiAgICAgICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gcmVnaXN0cmF0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXNbbG93ZXJDYXNlZE5hbWVdID0gcmVnaXN0cmF0aW9uTmFtZSwgXG4gICAgICAgIFwib25Eb3VibGVDbGlja1wiID09PSByZWdpc3RyYXRpb25OYW1lICYmIChFdmVudFBsdWdpblJlZ2lzdHJ5LnBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMub25kYmxjbGljayA9IHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIH1cbiAgICB2YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcbiAgICAgICAgcGx1Z2luczogW10sXG4gICAgICAgIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczoge30sXG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiB7fSxcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczoge30sXG4gICAgICAgIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6IHt9LFxuICAgICAgICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBmdW5jdGlvbihpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAgICAgICAgIGludmFyaWFudCghZXZlbnRQbHVnaW5PcmRlciwgXCJFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbiBvcmRlcmluZyBtb3JlIHRoYW4gXCIgKyBcIm9uY2UuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdC5cIiksIFxuICAgICAgICAgICAgZXZlbnRQbHVnaW5PcmRlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGluamVjdGVkRXZlbnRQbHVnaW5PcmRlciksIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogZnVuY3Rpb24oaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgICAgICAgICAgdmFyIGlzT3JkZXJpbmdEaXJ0eSA9ICExO1xuICAgICAgICAgICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSBpZiAoaW5qZWN0ZWROYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSkge1xuICAgICAgICAgICAgICAgIHZhciBwbHVnaW5Nb2R1bGUgPSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgICAgICAgICAgIG5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpICYmIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID09PSBwbHVnaW5Nb2R1bGUgfHwgKGludmFyaWFudCghbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0sIFwiRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCB0d28gZGlmZmVyZW50IGV2ZW50IHBsdWdpbnMgXCIgKyBcInVzaW5nIHRoZSBzYW1lIG5hbWUsIGAlc2AuXCIsIHBsdWdpbk5hbWUpLCBcbiAgICAgICAgICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA9IHBsdWdpbk1vZHVsZSwgaXNPcmRlcmluZ0RpcnR5ID0gITApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNPcmRlcmluZ0RpcnR5ICYmIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9LCBFdmVudFBsdWdpblJlZ2lzdHJ5XzEgPSBFdmVudFBsdWdpblJlZ2lzdHJ5O1xuICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGVJbnRvKGN1cnJlbnQsIG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGludmFyaWFudChudWxsICE9IG5leHQsIFwiYWNjdW11bGF0ZUludG8oLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuXCIpLCBcbiAgICAgICAgbnVsbCA9PSBjdXJyZW50ID8gbmV4dCA6IEFycmF5LmlzQXJyYXkoY3VycmVudCkgPyBBcnJheS5pc0FycmF5KG5leHQpID8gKGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KSwgXG4gICAgICAgIGN1cnJlbnQpIDogKGN1cnJlbnQucHVzaChuZXh0KSwgY3VycmVudCkgOiBBcnJheS5pc0FycmF5KG5leHQpID8gWyBjdXJyZW50IF0uY29uY2F0KG5leHQpIDogWyBjdXJyZW50LCBuZXh0IF07XG4gICAgfVxuICAgIHZhciBhY2N1bXVsYXRlSW50b18xID0gYWNjdW11bGF0ZUludG87XG4gICAgZnVuY3Rpb24gZm9yRWFjaEFjY3VtdWxhdGVkKGFyciwgY2IsIHNjb3BlKSB7XG4gICAgICAgIEFycmF5LmlzQXJyYXkoYXJyKSA/IGFyci5mb3JFYWNoKGNiLCBzY29wZSkgOiBhcnIgJiYgY2IuY2FsbChzY29wZSwgYXJyKTtcbiAgICB9XG4gICAgdmFyIGZvckVhY2hBY2N1bXVsYXRlZF8xID0gZm9yRWFjaEFjY3VtdWxhdGVkLCBldmVudFF1ZXVlID0gbnVsbCwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlID0gZnVuY3Rpb24oZXZlbnQsIHNpbXVsYXRlZCkge1xuICAgICAgICBldmVudCAmJiAoRXZlbnRQbHVnaW5VdGlsc18xLmV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCwgc2ltdWxhdGVkKSwgZXZlbnQuaXNQZXJzaXN0ZW50KCkgfHwgZXZlbnQuY29uc3RydWN0b3IucmVsZWFzZShldmVudCkpO1xuICAgIH0sIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCAhMCk7XG4gICAgfSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UoZSwgITEpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gaXNJbnRlcmFjdGl2ZSh0YWcpIHtcbiAgICAgICAgcmV0dXJuIFwiYnV0dG9uXCIgPT09IHRhZyB8fCBcImlucHV0XCIgPT09IHRhZyB8fCBcInNlbGVjdFwiID09PSB0YWcgfHwgXCJ0ZXh0YXJlYVwiID09PSB0YWc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KG5hbWUsIHR5cGUsIHByb3BzKSB7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJvbkNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpcbiAgICAgICAgICBjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpcbiAgICAgICAgICBjYXNlIFwib25Nb3VzZURvd25cIjpcbiAgICAgICAgICBjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcIm9uTW91c2VNb3ZlXCI6XG4gICAgICAgICAgY2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOlxuICAgICAgICAgIGNhc2UgXCJvbk1vdXNlVXBcIjpcbiAgICAgICAgICBjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOlxuICAgICAgICAgICAgcmV0dXJuICEoIXByb3BzLmRpc2FibGVkIHx8ICFpc0ludGVyYWN0aXZlKHR5cGUpKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIEV2ZW50UGx1Z2luSHViID0ge1xuICAgICAgICBpbmplY3Rpb246IHtcbiAgICAgICAgICAgIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IEV2ZW50UGx1Z2luUmVnaXN0cnlfMS5pbmplY3RFdmVudFBsdWdpbk9yZGVyLFxuICAgICAgICAgICAgaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOiBFdmVudFBsdWdpblJlZ2lzdHJ5XzEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG4gICAgICAgIH0sXG4gICAgICAgIGdldExpc3RlbmVyOiBmdW5jdGlvbihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIsIHN0YXRlTm9kZSA9IGluc3Quc3RhdGVOb2RlO1xuICAgICAgICAgICAgaWYgKCFzdGF0ZU5vZGUpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gRXZlbnRQbHVnaW5VdGlsc18xLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoc3RhdGVOb2RlKTtcbiAgICAgICAgICAgIHJldHVybiBwcm9wcyA/IChsaXN0ZW5lciA9IHByb3BzW3JlZ2lzdHJhdGlvbk5hbWVdLCBzaG91bGRQcmV2ZW50TW91c2VFdmVudChyZWdpc3RyYXRpb25OYW1lLCBpbnN0LnR5cGUsIHByb3BzKSA/IG51bGwgOiAoaW52YXJpYW50KCFsaXN0ZW5lciB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGxpc3RlbmVyLCBcIkV4cGVjdGVkIGAlc2AgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbiwgaW5zdGVhZCBnb3QgYSB2YWx1ZSBvZiBgJXNgIHR5cGUuXCIsIHJlZ2lzdHJhdGlvbk5hbWUsIHR5cGVvZiBsaXN0ZW5lciksIFxuICAgICAgICAgICAgbGlzdGVuZXIpKSA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBldmVudHMsIHBsdWdpbnMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5XzEucGx1Z2lucywgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3NpYmxlUGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocG9zc2libGVQbHVnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4dHJhY3RlZEV2ZW50cyA9IHBvc3NpYmxlUGx1Z2luLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICBleHRyYWN0ZWRFdmVudHMgJiYgKGV2ZW50cyA9IGFjY3VtdWxhdGVJbnRvXzEoZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRzO1xuICAgICAgICB9LFxuICAgICAgICBlbnF1ZXVlRXZlbnRzOiBmdW5jdGlvbihldmVudHMpIHtcbiAgICAgICAgICAgIGV2ZW50cyAmJiAoZXZlbnRRdWV1ZSA9IGFjY3VtdWxhdGVJbnRvXzEoZXZlbnRRdWV1ZSwgZXZlbnRzKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHByb2Nlc3NFdmVudFF1ZXVlOiBmdW5jdGlvbihzaW11bGF0ZWQpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzaW5nRXZlbnRRdWV1ZSA9IGV2ZW50UXVldWU7XG4gICAgICAgICAgICBldmVudFF1ZXVlID0gbnVsbCwgc2ltdWxhdGVkID8gZm9yRWFjaEFjY3VtdWxhdGVkXzEocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCkgOiBmb3JFYWNoQWNjdW11bGF0ZWRfMShwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwpLCBcbiAgICAgICAgICAgIGludmFyaWFudCghZXZlbnRRdWV1ZSwgXCJwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgXCIgKyBcImFuIGV2ZW50IHF1ZXVlLiBTdXBwb3J0IGZvciB0aGlzIGhhcyBub3QgeWV0IGJlZW4gaW1wbGVtZW50ZWQuXCIpLCBcbiAgICAgICAgICAgIFJlYWN0RXJyb3JVdGlsc18xLnJldGhyb3dDYXVnaHRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfSwgRXZlbnRQbHVnaW5IdWJfMSA9IEV2ZW50UGx1Z2luSHViLCBIb3N0Q29tcG9uZW50JDExID0gUmVhY3RUeXBlT2ZXb3JrLkhvc3RDb21wb25lbnQ7XG4gICAgZnVuY3Rpb24gZ2V0UGFyZW50KGluc3QpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaW5zdCA9IGluc3QucmV0dXJuO1xuICAgICAgICB9IHdoaWxlIChpbnN0ICYmIGluc3QudGFnICE9PSBIb3N0Q29tcG9uZW50JDExKTtcbiAgICAgICAgcmV0dXJuIGluc3QgfHwgbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoaW5zdEEsIGluc3RCKSB7XG4gICAgICAgIGZvciAodmFyIGRlcHRoQSA9IDAsIHRlbXBBID0gaW5zdEE7IHRlbXBBOyB0ZW1wQSA9IGdldFBhcmVudCh0ZW1wQSkpIGRlcHRoQSsrO1xuICAgICAgICBmb3IgKHZhciBkZXB0aEIgPSAwLCB0ZW1wQiA9IGluc3RCOyB0ZW1wQjsgdGVtcEIgPSBnZXRQYXJlbnQodGVtcEIpKSBkZXB0aEIrKztcbiAgICAgICAgZm9yICg7ZGVwdGhBIC0gZGVwdGhCID4gMDsgKSBpbnN0QSA9IGdldFBhcmVudChpbnN0QSksIGRlcHRoQS0tO1xuICAgICAgICBmb3IgKDtkZXB0aEIgLSBkZXB0aEEgPiAwOyApIGluc3RCID0gZ2V0UGFyZW50KGluc3RCKSwgZGVwdGhCLS07XG4gICAgICAgIGZvciAodmFyIGRlcHRoID0gZGVwdGhBOyBkZXB0aC0tOyApIHtcbiAgICAgICAgICAgIGlmIChpbnN0QSA9PT0gaW5zdEIgfHwgaW5zdEEgPT09IGluc3RCLmFsdGVybmF0ZSkgcmV0dXJuIGluc3RBO1xuICAgICAgICAgICAgaW5zdEEgPSBnZXRQYXJlbnQoaW5zdEEpLCBpbnN0QiA9IGdldFBhcmVudChpbnN0Qik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQW5jZXN0b3IoaW5zdEEsIGluc3RCKSB7XG4gICAgICAgIGZvciAoO2luc3RCOyApIHtcbiAgICAgICAgICAgIGlmIChpbnN0QSA9PT0gaW5zdEIgfHwgaW5zdEEgPT09IGluc3RCLmFsdGVybmF0ZSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgaW5zdEIgPSBnZXRQYXJlbnQoaW5zdEIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UGFyZW50SW5zdGFuY2UoaW5zdCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyZW50KGluc3QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmF2ZXJzZVR3b1BoYXNlKGluc3QsIGZuLCBhcmcpIHtcbiAgICAgICAgZm9yICh2YXIgcGF0aCA9IFtdOyBpbnN0OyApIHBhdGgucHVzaChpbnN0KSwgaW5zdCA9IGdldFBhcmVudChpbnN0KTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoOyBpLS0gPiAwOyApIGZuKHBhdGhbaV0sIFwiY2FwdHVyZWRcIiwgYXJnKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIGZuKHBhdGhbaV0sIFwiYnViYmxlZFwiLCBhcmcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmF2ZXJzZUVudGVyTGVhdmUoZnJvbSwgdG8sIGZuLCBhcmdGcm9tLCBhcmdUbykge1xuICAgICAgICBmb3IgKHZhciBjb21tb24gPSBmcm9tICYmIHRvID8gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoZnJvbSwgdG8pIDogbnVsbCwgcGF0aEZyb20gPSBbXTsgZnJvbSAmJiBmcm9tICE9PSBjb21tb247ICkgcGF0aEZyb20ucHVzaChmcm9tKSwgXG4gICAgICAgIGZyb20gPSBnZXRQYXJlbnQoZnJvbSk7XG4gICAgICAgIGZvciAodmFyIHBhdGhUbyA9IFtdOyB0byAmJiB0byAhPT0gY29tbW9uOyApIHBhdGhUby5wdXNoKHRvKSwgdG8gPSBnZXRQYXJlbnQodG8pO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdGhGcm9tLmxlbmd0aDsgaSsrKSBmbihwYXRoRnJvbVtpXSwgXCJidWJibGVkXCIsIGFyZ0Zyb20pO1xuICAgICAgICBmb3IgKGkgPSBwYXRoVG8ubGVuZ3RoOyBpLS0gPiAwOyApIGZuKHBhdGhUb1tpXSwgXCJjYXB0dXJlZFwiLCBhcmdUbyk7XG4gICAgfVxuICAgIHZhciBSZWFjdFRyZWVUcmF2ZXJzYWwgPSB7XG4gICAgICAgIGlzQW5jZXN0b3I6IGlzQW5jZXN0b3IsXG4gICAgICAgIGdldExvd2VzdENvbW1vbkFuY2VzdG9yOiBnZXRMb3dlc3RDb21tb25BbmNlc3RvcixcbiAgICAgICAgZ2V0UGFyZW50SW5zdGFuY2U6IGdldFBhcmVudEluc3RhbmNlLFxuICAgICAgICB0cmF2ZXJzZVR3b1BoYXNlOiB0cmF2ZXJzZVR3b1BoYXNlLFxuICAgICAgICB0cmF2ZXJzZUVudGVyTGVhdmU6IHRyYXZlcnNlRW50ZXJMZWF2ZVxuICAgIH0sIGdldExpc3RlbmVyID0gRXZlbnRQbHVnaW5IdWJfMS5nZXRMaXN0ZW5lciwgd2FybmluZyQxMiA9IHJlcXVpcmUkJDA7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gICAgICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07XG4gICAgICAgIHJldHVybiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyhpbnN0LCBwaGFzZSwgZXZlbnQpIHtcbiAgICAgICAgd2FybmluZyQxMihpbnN0LCBcIkRpc3BhdGNoaW5nIGluc3QgbXVzdCBub3QgYmUgbnVsbFwiKTtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwaGFzZSk7XG4gICAgICAgIGxpc3RlbmVyICYmIChldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50b18xKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpLCBcbiAgICAgICAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gYWNjdW11bGF0ZUludG9fMShldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMsIGluc3QpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICAgICAgICBldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyAmJiBSZWFjdFRyZWVUcmF2ZXJzYWwudHJhdmVyc2VUd29QaGFzZShldmVudC5fdGFyZ2V0SW5zdCwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRJbnN0ID0gZXZlbnQuX3RhcmdldEluc3QsIHBhcmVudEluc3QgPSB0YXJnZXRJbnN0ID8gUmVhY3RUcmVlVHJhdmVyc2FsLmdldFBhcmVudEluc3RhbmNlKHRhcmdldEluc3QpIDogbnVsbDtcbiAgICAgICAgICAgIFJlYWN0VHJlZVRyYXZlcnNhbC50cmF2ZXJzZVR3b1BoYXNlKHBhcmVudEluc3QsIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpbnN0LCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICAgICAgICBpZiAoaW5zdCAmJiBldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICAgICAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgICAgICAgICBsaXN0ZW5lciAmJiAoZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gYWNjdW11bGF0ZUludG9fMShldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKSwgXG4gICAgICAgICAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBhY2N1bXVsYXRlSW50b18xKGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgaW5zdCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUgJiYgYWNjdW11bGF0ZURpc3BhdGNoZXMoZXZlbnQuX3RhcmdldEluc3QsIG51bGwsIGV2ZW50KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkXzEoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQoZXZlbnRzKSB7XG4gICAgICAgIGZvckVhY2hBY2N1bXVsYXRlZF8xKGV2ZW50cywgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tLCB0bykge1xuICAgICAgICBSZWFjdFRyZWVUcmF2ZXJzYWwudHJhdmVyc2VFbnRlckxlYXZlKGZyb20sIHRvLCBhY2N1bXVsYXRlRGlzcGF0Y2hlcywgbGVhdmUsIGVudGVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKSB7XG4gICAgICAgIGZvckVhY2hBY2N1bXVsYXRlZF8xKGV2ZW50cywgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUpO1xuICAgIH1cbiAgICB2YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHtcbiAgICAgICAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyxcbiAgICAgICAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0LFxuICAgICAgICBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczogYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMsXG4gICAgICAgIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczogYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzXG4gICAgfSwgRXZlbnRQcm9wYWdhdG9yc18xID0gRXZlbnRQcm9wYWdhdG9ycywgZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkgPSAhMSwgaXNQcm94eVN1cHBvcnRlZCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgUHJveHksIEVWRU5UX1BPT0xfU0laRSA9IDEwLCB3YXJuaW5nJDEzID0gcmVxdWlyZSQkMCwgc2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXMgPSBbIFwiZGlzcGF0Y2hDb25maWdcIiwgXCJfdGFyZ2V0SW5zdFwiLCBcIm5hdGl2ZUV2ZW50XCIsIFwiaXNEZWZhdWx0UHJldmVudGVkXCIsIFwiaXNQcm9wYWdhdGlvblN0b3BwZWRcIiwgXCJfZGlzcGF0Y2hMaXN0ZW5lcnNcIiwgXCJfZGlzcGF0Y2hJbnN0YW5jZXNcIiBdLCBFdmVudEludGVyZmFjZSA9IHtcbiAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICBjdXJyZW50VGFyZ2V0OiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCxcbiAgICAgICAgZXZlbnRQaGFzZTogbnVsbCxcbiAgICAgICAgYnViYmxlczogbnVsbCxcbiAgICAgICAgY2FuY2VsYWJsZTogbnVsbCxcbiAgICAgICAgdGltZVN0YW1wOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBudWxsLFxuICAgICAgICBpc1RydXN0ZWQ6IG51bGxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIFN5bnRoZXRpY0V2ZW50KGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubmF0aXZlRXZlbnQsIGRlbGV0ZSB0aGlzLnByZXZlbnREZWZhdWx0LCBkZWxldGUgdGhpcy5zdG9wUHJvcGFnYXRpb24sIFxuICAgICAgICB0aGlzLmRpc3BhdGNoQ29uZmlnID0gZGlzcGF0Y2hDb25maWcsIHRoaXMuX3RhcmdldEluc3QgPSB0YXJnZXRJbnN0LCB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSBpZiAoSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXNbcHJvcE5hbWVdO1xuICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZSA9IEludGVyZmFjZVtwcm9wTmFtZV07XG4gICAgICAgICAgICBub3JtYWxpemUgPyB0aGlzW3Byb3BOYW1lXSA9IG5vcm1hbGl6ZShuYXRpdmVFdmVudCkgOiBcInRhcmdldFwiID09PSBwcm9wTmFtZSA/IHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnRUYXJnZXQgOiB0aGlzW3Byb3BOYW1lXSA9IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IG51bGwgIT0gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCA/IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOiAhMSA9PT0gbmF0aXZlRXZlbnQucmV0dXJuVmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGRlZmF1bHRQcmV2ZW50ZWQgPyBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSwgXG4gICAgICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UsIHRoaXM7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oU3ludGhldGljRXZlbnQucHJvdG90eXBlLCB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9ICEwO1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgICAgICAgIGV2ZW50ICYmIChldmVudC5wcmV2ZW50RGVmYXVsdCA/IGV2ZW50LnByZXZlbnREZWZhdWx0KCkgOiBcInVua25vd25cIiAhPSB0eXBlb2YgZXZlbnQucmV0dXJuVmFsdWUgJiYgKGV2ZW50LnJldHVyblZhbHVlID0gITEpLCBcbiAgICAgICAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgICAgICAgIGV2ZW50ICYmIChldmVudC5zdG9wUHJvcGFnYXRpb24gPyBldmVudC5zdG9wUHJvcGFnYXRpb24oKSA6IFwidW5rbm93blwiICE9IHR5cGVvZiBldmVudC5jYW5jZWxCdWJibGUgJiYgKGV2ZW50LmNhbmNlbEJ1YmJsZSA9ICEwKSwgXG4gICAgICAgICAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUpO1xuICAgICAgICB9LFxuICAgICAgICBwZXJzaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaXNQZXJzaXN0ZW50ID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGlzUGVyc2lzdGVudDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlLFxuICAgICAgICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BOYW1lLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKHByb3BOYW1lLCBJbnRlcmZhY2VbcHJvcE5hbWVdKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB0aGlzW3Nob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzW2ldXSA9IG51bGw7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYXRpdmVFdmVudFwiLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKFwibmF0aXZlRXZlbnRcIiwgbnVsbCkpLCBcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInByZXZlbnREZWZhdWx0XCIsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oXCJwcmV2ZW50RGVmYXVsdFwiLCBlbXB0eUZ1bmN0aW9uKSksIFxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic3RvcFByb3BhZ2F0aW9uXCIsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oXCJzdG9wUHJvcGFnYXRpb25cIiwgZW1wdHlGdW5jdGlvbikpO1xuICAgICAgICB9XG4gICAgfSksIFN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlLCBTeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MgPSBmdW5jdGlvbihDbGFzcywgSW50ZXJmYWNlKSB7XG4gICAgICAgIHZhciBTdXBlciA9IHRoaXMsIEUgPSBmdW5jdGlvbigpIHt9O1xuICAgICAgICBFLnByb3RvdHlwZSA9IFN1cGVyLnByb3RvdHlwZTtcbiAgICAgICAgdmFyIHByb3RvdHlwZSA9IG5ldyBFKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocHJvdG90eXBlLCBDbGFzcy5wcm90b3R5cGUpLCBDbGFzcy5wcm90b3R5cGUgPSBwcm90b3R5cGUsIENsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENsYXNzLCBcbiAgICAgICAgQ2xhc3MuSW50ZXJmYWNlID0gT2JqZWN0LmFzc2lnbih7fSwgU3VwZXIuSW50ZXJmYWNlLCBJbnRlcmZhY2UpLCBDbGFzcy5hdWdtZW50Q2xhc3MgPSBTdXBlci5hdWdtZW50Q2xhc3MsIFxuICAgICAgICBhZGRFdmVudFBvb2xpbmdUbyhDbGFzcyk7XG4gICAgfSwgaXNQcm94eVN1cHBvcnRlZCAmJiAoU3ludGhldGljRXZlbnQgPSBuZXcgUHJveHkoU3ludGhldGljRXZlbnQsIHtcbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbih0YXJnZXQsIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHRhcmdldCwgT2JqZWN0LmNyZWF0ZSh0YXJnZXQucHJvdG90eXBlKSwgYXJncyk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgdGhhdCwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm94eShjb25zdHJ1Y3Rvci5hcHBseSh0aGF0LCBhcmdzKSwge1xuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJpc1BlcnNpc3RlbnRcIiA9PT0gcHJvcCB8fCB0YXJnZXQuY29uc3RydWN0b3IuSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3ApIHx8IC0xICE9PSBzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllcy5pbmRleE9mKHByb3ApIHx8ICh3YXJuaW5nJDEzKGRpZFdhcm5Gb3JBZGRlZE5ld1Byb3BlcnR5IHx8IHRhcmdldC5pc1BlcnNpc3RlbnQoKSwgXCJUaGlzIHN5bnRoZXRpYyBldmVudCBpcyByZXVzZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuIElmIHlvdSdyZSBcIiArIFwic2VlaW5nIHRoaXMsIHlvdSdyZSBhZGRpbmcgYSBuZXcgcHJvcGVydHkgaW4gdGhlIHN5bnRoZXRpYyBldmVudCBvYmplY3QuIFwiICsgXCJUaGUgcHJvcGVydHkgaXMgbmV2ZXIgcmVsZWFzZWQuIFNlZSBcIiArIFwiaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKSwgXG4gICAgICAgICAgICAgICAgICAgIGRpZFdhcm5Gb3JBZGRlZE5ld1Byb3BlcnR5ID0gITApLCB0YXJnZXRbcHJvcF0gPSB2YWx1ZSwgITA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KSksIGFkZEV2ZW50UG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50KTtcbiAgICB2YXIgU3ludGhldGljRXZlbnRfMSA9IFN5bnRoZXRpY0V2ZW50O1xuICAgIGZ1bmN0aW9uIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24ocHJvcE5hbWUsIGdldFZhbCkge1xuICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZ2V0VmFsO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgICAgICAgIHNldDogc2V0LFxuICAgICAgICAgICAgZ2V0OiBnZXRcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdhcm4oaXNGdW5jdGlvbiA/IFwic2V0dGluZyB0aGUgbWV0aG9kXCIgOiBcInNldHRpbmcgdGhlIHByb3BlcnR5XCIsIFwiVGhpcyBpcyBlZmZlY3RpdmVseSBhIG5vLW9wXCIpLCBcbiAgICAgICAgICAgIHZhbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Fybihpc0Z1bmN0aW9uID8gXCJhY2Nlc3NpbmcgdGhlIG1ldGhvZFwiIDogXCJhY2Nlc3NpbmcgdGhlIHByb3BlcnR5XCIsIGlzRnVuY3Rpb24gPyBcIlRoaXMgaXMgYSBuby1vcCBmdW5jdGlvblwiIDogXCJUaGlzIGlzIHNldCB0byBudWxsXCIpLCBcbiAgICAgICAgICAgIGdldFZhbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB3YXJuKGFjdGlvbiwgcmVzdWx0KSB7XG4gICAgICAgICAgICB3YXJuaW5nJDEzKCExLCBcIlRoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91J3JlIHNlZWluZyB0aGlzLCBcIiArIFwieW91J3JlICVzIGAlc2Agb24gYSByZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiAlcy4gXCIgKyBcIklmIHlvdSBtdXN0IGtlZXAgdGhlIG9yaWdpbmFsIHN5bnRoZXRpYyBldmVudCBhcm91bmQsIHVzZSBldmVudC5wZXJzaXN0KCkuIFwiICsgXCJTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiLCBhY3Rpb24sIHByb3BOYW1lLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFBvb2xlZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlSW5zdCkge1xuICAgICAgICB2YXIgRXZlbnRDb25zdHJ1Y3RvciA9IHRoaXM7XG4gICAgICAgIGlmIChFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sLnBvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIEV2ZW50Q29uc3RydWN0b3IuY2FsbChpbnN0YW5jZSwgZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVJbnN0KSwgXG4gICAgICAgICAgICBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEV2ZW50Q29uc3RydWN0b3IoZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVJbnN0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsZWFzZVBvb2xlZEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIHZhciBFdmVudENvbnN0cnVjdG9yID0gdGhpcztcbiAgICAgICAgaW52YXJpYW50KGV2ZW50IGluc3RhbmNlb2YgRXZlbnRDb25zdHJ1Y3RvciwgXCJUcnlpbmcgdG8gcmVsZWFzZSBhbiBldmVudCBpbnN0YW5jZSAgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS5cIiksIFxuICAgICAgICBldmVudC5kZXN0cnVjdG9yKCksIEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sLmxlbmd0aCA8IEVWRU5UX1BPT0xfU0laRSAmJiBFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbC5wdXNoKGV2ZW50KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkRXZlbnRQb29saW5nVG8oRXZlbnRDb25zdHJ1Y3Rvcikge1xuICAgICAgICBFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbCA9IFtdLCBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZCA9IGdldFBvb2xlZEV2ZW50LCBFdmVudENvbnN0cnVjdG9yLnJlbGVhc2UgPSByZWxlYXNlUG9vbGVkRXZlbnQ7XG4gICAgfVxuICAgIHZhciBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMgPSB7fSwgY3VzdG9tRGlyZWN0RXZlbnRUeXBlcyA9IHt9LCBSZWFjdE5hdGl2ZUJyaWRnZUV2ZW50UGx1Z2luID0ge1xuICAgICAgICBldmVudFR5cGVzOiB7fSxcbiAgICAgICAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBidWJibGVEaXNwYXRjaENvbmZpZyA9IGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdLCBkaXJlY3REaXNwYXRjaENvbmZpZyA9IGN1c3RvbURpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXTtcbiAgICAgICAgICAgIGludmFyaWFudChidWJibGVEaXNwYXRjaENvbmZpZyB8fCBkaXJlY3REaXNwYXRjaENvbmZpZywgJ1Vuc3VwcG9ydGVkIHRvcCBsZXZlbCBldmVudCB0eXBlIFwiJXNcIiBkaXNwYXRjaGVkJywgdG9wTGV2ZWxUeXBlKTtcbiAgICAgICAgICAgIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50XzEuZ2V0UG9vbGVkKGJ1YmJsZURpc3BhdGNoQ29uZmlnIHx8IGRpcmVjdERpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICAgICAgaWYgKGJ1YmJsZURpc3BhdGNoQ29uZmlnKSBFdmVudFByb3BhZ2F0b3JzXzEuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghZGlyZWN0RGlzcGF0Y2hDb25maWcpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIEV2ZW50UHJvcGFnYXRvcnNfMS5hY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHByb2Nlc3NFdmVudFR5cGVzOiBmdW5jdGlvbih2aWV3Q29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgYnViYmxpbmdFdmVudFR5cGVzID0gdmlld0NvbmZpZy5idWJibGluZ0V2ZW50VHlwZXMsIGRpcmVjdEV2ZW50VHlwZXMgPSB2aWV3Q29uZmlnLmRpcmVjdEV2ZW50VHlwZXM7XG4gICAgICAgICAgICBpZiAobnVsbCAhPSBidWJibGluZ0V2ZW50VHlwZXMgJiYgbnVsbCAhPSBkaXJlY3RFdmVudFR5cGVzKSBmb3IgKHZhciB0b3BMZXZlbFR5cGUgaW4gZGlyZWN0RXZlbnRUeXBlcykgaW52YXJpYW50KG51bGwgPT0gYnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0sIFwiRXZlbnQgY2Fubm90IGJlIGJvdGggZGlyZWN0IGFuZCBidWJibGluZzogJXNcIiwgdG9wTGV2ZWxUeXBlKTtcbiAgICAgICAgICAgIGlmIChudWxsICE9IGJ1YmJsaW5nRXZlbnRUeXBlcykgZm9yICh2YXIgX3RvcExldmVsVHlwZSBpbiBidWJibGluZ0V2ZW50VHlwZXMpIG51bGwgPT0gY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzW190b3BMZXZlbFR5cGVdICYmIChSZWFjdE5hdGl2ZUJyaWRnZUV2ZW50UGx1Z2luLmV2ZW50VHlwZXNbX3RvcExldmVsVHlwZV0gPSBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXNbX3RvcExldmVsVHlwZV0gPSBidWJibGluZ0V2ZW50VHlwZXNbX3RvcExldmVsVHlwZV0pO1xuICAgICAgICAgICAgaWYgKG51bGwgIT0gZGlyZWN0RXZlbnRUeXBlcykgZm9yICh2YXIgX3RvcExldmVsVHlwZTIgaW4gZGlyZWN0RXZlbnRUeXBlcykgbnVsbCA9PSBjdXN0b21EaXJlY3RFdmVudFR5cGVzW190b3BMZXZlbFR5cGUyXSAmJiAoUmVhY3ROYXRpdmVCcmlkZ2VFdmVudFBsdWdpbi5ldmVudFR5cGVzW190b3BMZXZlbFR5cGUyXSA9IGN1c3RvbURpcmVjdEV2ZW50VHlwZXNbX3RvcExldmVsVHlwZTJdID0gZGlyZWN0RXZlbnRUeXBlc1tfdG9wTGV2ZWxUeXBlMl0pO1xuICAgICAgICB9XG4gICAgfSwgUmVhY3ROYXRpdmVCcmlkZ2VFdmVudFBsdWdpbl8xID0gUmVhY3ROYXRpdmVCcmlkZ2VFdmVudFBsdWdpbjtcbiAgICBmdW5jdGlvbiBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpIHtcbiAgICAgICAgRXZlbnRQbHVnaW5IdWJfMS5lbnF1ZXVlRXZlbnRzKGV2ZW50cyksIEV2ZW50UGx1Z2luSHViXzEucHJvY2Vzc0V2ZW50UXVldWUoITEpO1xuICAgIH1cbiAgICB2YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHtcbiAgICAgICAgaGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICBydW5FdmVudFF1ZXVlSW5CYXRjaChFdmVudFBsdWdpbkh1Yl8xLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpKTtcbiAgICAgICAgfVxuICAgIH0sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW5fMSA9IFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHdhcm5pbmckMTQgPSByZXF1aXJlJCQwLCBFTVBUWV9OQVRJVkVfRVZFTlQgPSB7fSwgdG91Y2hTdWJzZXF1ZW5jZSA9IGZ1bmN0aW9uKHRvdWNoZXMsIGluZGljZXMpIHtcbiAgICAgICAgZm9yICh2YXIgcmV0ID0gW10sIGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkrKykgcmV0LnB1c2godG91Y2hlc1tpbmRpY2VzW2ldXSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSwgcmVtb3ZlVG91Y2hlc0F0SW5kaWNlcyA9IGZ1bmN0aW9uKHRvdWNoZXMsIGluZGljZXMpIHtcbiAgICAgICAgZm9yICh2YXIgcmlwcGVkT3V0ID0gW10sIHRlbXAgPSB0b3VjaGVzLCBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGluZGljZXNbaV07XG4gICAgICAgICAgICByaXBwZWRPdXQucHVzaCh0b3VjaGVzW2luZGV4XSksIHRlbXBbaW5kZXhdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBmaWxsQXQgPSAwLCBqID0gMDsgaiA8IHRlbXAubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBjdXIgPSB0ZW1wW2pdO1xuICAgICAgICAgICAgbnVsbCAhPT0gY3VyICYmICh0ZW1wW2ZpbGxBdCsrXSA9IGN1cik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRlbXAubGVuZ3RoID0gZmlsbEF0LCByaXBwZWRPdXQ7XG4gICAgfSwgUmVhY3ROYXRpdmVFdmVudEVtaXR0ZXIgPSBPYmplY3QuYXNzaWduKHt9LCBSZWFjdEV2ZW50RW1pdHRlck1peGluXzEsIHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZXM6IEV2ZW50UGx1Z2luUmVnaXN0cnlfMS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcyxcbiAgICAgICAgZ2V0TGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViXzEuZ2V0TGlzdGVuZXIsXG4gICAgICAgIF9yZWNlaXZlUm9vdE5vZGVJREV2ZW50OiBmdW5jdGlvbihyb290Tm9kZUlELCB0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50UGFyYW0pIHtcbiAgICAgICAgICAgIHZhciBuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50UGFyYW0gfHwgRU1QVFlfTkFUSVZFX0VWRU5ULCBpbnN0ID0gUmVhY3ROYXRpdmVDb21wb25lbnRUcmVlXzEuZ2V0SW5zdGFuY2VGcm9tTm9kZShyb290Tm9kZUlEKTtcbiAgICAgICAgICAgIFJlYWN0R2VuZXJpY0JhdGNoaW5nXzEuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgUmVhY3ROYXRpdmVFdmVudEVtaXR0ZXIuaGFuZGxlVG9wTGV2ZWwodG9wTGV2ZWxUeXBlLCBpbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZWNlaXZlRXZlbnQ6IGZ1bmN0aW9uKHJvb3ROb2RlSUQsIHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnRQYXJhbSkge1xuICAgICAgICAgICAgUmVhY3ROYXRpdmVFdmVudEVtaXR0ZXIuX3JlY2VpdmVSb290Tm9kZUlERXZlbnQocm9vdE5vZGVJRCwgdG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudFBhcmFtKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVjZWl2ZVRvdWNoZXM6IGZ1bmN0aW9uKGV2ZW50VG9wTGV2ZWxUeXBlLCB0b3VjaGVzLCBjaGFuZ2VkSW5kaWNlcykge1xuICAgICAgICAgICAgZm9yICh2YXIgY2hhbmdlZFRvdWNoZXMgPSBcInRvcFRvdWNoRW5kXCIgPT09IGV2ZW50VG9wTGV2ZWxUeXBlIHx8IFwidG9wVG91Y2hDYW5jZWxcIiA9PT0gZXZlbnRUb3BMZXZlbFR5cGUgPyByZW1vdmVUb3VjaGVzQXRJbmRpY2VzKHRvdWNoZXMsIGNoYW5nZWRJbmRpY2VzKSA6IHRvdWNoU3Vic2VxdWVuY2UodG91Y2hlcywgY2hhbmdlZEluZGljZXMpLCBqaiA9IDA7IGpqIDwgY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyBqaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvdWNoID0gY2hhbmdlZFRvdWNoZXNbampdO1xuICAgICAgICAgICAgICAgIHRvdWNoLmNoYW5nZWRUb3VjaGVzID0gY2hhbmdlZFRvdWNoZXMsIHRvdWNoLnRvdWNoZXMgPSB0b3VjaGVzO1xuICAgICAgICAgICAgICAgIHZhciBuYXRpdmVFdmVudCA9IHRvdWNoLCByb290Tm9kZUlEID0gbnVsbCwgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIG51bGwgIT09IHRhcmdldCAmJiB2b2lkIDAgIT09IHRhcmdldCAmJiAodGFyZ2V0IDwgUmVhY3ROYXRpdmVUYWdIYW5kbGVzXzEudGFnc1N0YXJ0QXQgPyB3YXJuaW5nJDE0KCExLCBcIkEgdmlldyBpcyByZXBvcnRpbmcgdGhhdCBhIHRvdWNoIG9jY3VycmVkIG9uIHRhZyB6ZXJvLlwiKSA6IHJvb3ROb2RlSUQgPSB0YXJnZXQpLCBcbiAgICAgICAgICAgICAgICBSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlci5fcmVjZWl2ZVJvb3ROb2RlSURFdmVudChyb290Tm9kZUlELCBldmVudFRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSksIFJlYWN0TmF0aXZlRXZlbnRFbWl0dGVyXzEgPSBSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlciwgUmVhY3ROYXRpdmVFdmVudFBsdWdpbk9yZGVyID0gWyBcIlJlc3BvbmRlckV2ZW50UGx1Z2luXCIsIFwiUmVhY3ROYXRpdmVCcmlkZ2VFdmVudFBsdWdpblwiIF0sIFJlYWN0TmF0aXZlRXZlbnRQbHVnaW5PcmRlcl8xID0gUmVhY3ROYXRpdmVFdmVudFBsdWdpbk9yZGVyLCBSZWFjdE5hdGl2ZUdsb2JhbFJlc3BvbmRlckhhbmRsZXIgPSB7XG4gICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbihmcm9tLCB0bywgYmxvY2tOYXRpdmVSZXNwb25kZXIpIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSB0bykge1xuICAgICAgICAgICAgICAgIHZhciB0YWcgPSB0by5zdGF0ZU5vZGUuX25hdGl2ZVRhZztcbiAgICAgICAgICAgICAgICBVSU1hbmFnZXIuc2V0SlNSZXNwb25kZXIodGFnLCBibG9ja05hdGl2ZVJlc3BvbmRlcik7XG4gICAgICAgICAgICB9IGVsc2UgVUlNYW5hZ2VyLmNsZWFySlNSZXNwb25kZXIoKTtcbiAgICAgICAgfVxuICAgIH0sIFJlYWN0TmF0aXZlR2xvYmFsUmVzcG9uZGVySGFuZGxlcl8xID0gUmVhY3ROYXRpdmVHbG9iYWxSZXNwb25kZXJIYW5kbGVyLCBSZXNwb25kZXJFdmVudEludGVyZmFjZSA9IHtcbiAgICAgICAgdG91Y2hIaXN0b3J5OiBmdW5jdGlvbihuYXRpdmVFdmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIFJlc3BvbmRlclN5bnRoZXRpY0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBTeW50aGV0aWNFdmVudF8xLmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH1cbiAgICBTeW50aGV0aWNFdmVudF8xLmF1Z21lbnRDbGFzcyhSZXNwb25kZXJTeW50aGV0aWNFdmVudCwgUmVzcG9uZGVyRXZlbnRJbnRlcmZhY2UpO1xuICAgIHZhciBSZXNwb25kZXJTeW50aGV0aWNFdmVudF8xID0gUmVzcG9uZGVyU3ludGhldGljRXZlbnQsIGlzRW5kaXNoJDIgPSBFdmVudFBsdWdpblV0aWxzXzEuaXNFbmRpc2gsIGlzTW92ZWlzaCQyID0gRXZlbnRQbHVnaW5VdGlsc18xLmlzTW92ZWlzaCwgaXNTdGFydGlzaCQyID0gRXZlbnRQbHVnaW5VdGlsc18xLmlzU3RhcnRpc2gsIHdhcm5pbmckMTUgPSByZXF1aXJlJCQwLCBNQVhfVE9VQ0hfQkFOSyA9IDIwLCB0b3VjaEJhbmsgPSBbXSwgdG91Y2hIaXN0b3J5ID0ge1xuICAgICAgICB0b3VjaEJhbms6IHRvdWNoQmFuayxcbiAgICAgICAgbnVtYmVyQWN0aXZlVG91Y2hlczogMCxcbiAgICAgICAgaW5kZXhPZlNpbmdsZUFjdGl2ZVRvdWNoOiAtMSxcbiAgICAgICAgbW9zdFJlY2VudFRpbWVTdGFtcDogMFxuICAgIH07XG4gICAgZnVuY3Rpb24gdGltZXN0YW1wRm9yVG91Y2godG91Y2gpIHtcbiAgICAgICAgcmV0dXJuIHRvdWNoLnRpbWVTdGFtcCB8fCB0b3VjaC50aW1lc3RhbXA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvdWNoUmVjb3JkKHRvdWNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3VjaEFjdGl2ZTogITAsXG4gICAgICAgICAgICBzdGFydFBhZ2VYOiB0b3VjaC5wYWdlWCxcbiAgICAgICAgICAgIHN0YXJ0UGFnZVk6IHRvdWNoLnBhZ2VZLFxuICAgICAgICAgICAgc3RhcnRUaW1lU3RhbXA6IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKSxcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlWDogdG91Y2gucGFnZVgsXG4gICAgICAgICAgICBjdXJyZW50UGFnZVk6IHRvdWNoLnBhZ2VZLFxuICAgICAgICAgICAgY3VycmVudFRpbWVTdGFtcDogdGltZXN0YW1wRm9yVG91Y2godG91Y2gpLFxuICAgICAgICAgICAgcHJldmlvdXNQYWdlWDogdG91Y2gucGFnZVgsXG4gICAgICAgICAgICBwcmV2aW91c1BhZ2VZOiB0b3VjaC5wYWdlWSxcbiAgICAgICAgICAgIHByZXZpb3VzVGltZVN0YW1wOiB0aW1lc3RhbXBGb3JUb3VjaCh0b3VjaClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzZXRUb3VjaFJlY29yZCh0b3VjaFJlY29yZCwgdG91Y2gpIHtcbiAgICAgICAgdG91Y2hSZWNvcmQudG91Y2hBY3RpdmUgPSAhMCwgdG91Y2hSZWNvcmQuc3RhcnRQYWdlWCA9IHRvdWNoLnBhZ2VYLCB0b3VjaFJlY29yZC5zdGFydFBhZ2VZID0gdG91Y2gucGFnZVksIFxuICAgICAgICB0b3VjaFJlY29yZC5zdGFydFRpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKSwgdG91Y2hSZWNvcmQuY3VycmVudFBhZ2VYID0gdG91Y2gucGFnZVgsIFxuICAgICAgICB0b3VjaFJlY29yZC5jdXJyZW50UGFnZVkgPSB0b3VjaC5wYWdlWSwgdG91Y2hSZWNvcmQuY3VycmVudFRpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKSwgXG4gICAgICAgIHRvdWNoUmVjb3JkLnByZXZpb3VzUGFnZVggPSB0b3VjaC5wYWdlWCwgdG91Y2hSZWNvcmQucHJldmlvdXNQYWdlWSA9IHRvdWNoLnBhZ2VZLCBcbiAgICAgICAgdG91Y2hSZWNvcmQucHJldmlvdXNUaW1lU3RhbXAgPSB0aW1lc3RhbXBGb3JUb3VjaCh0b3VjaCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRvdWNoSWRlbnRpZmllcihfcmVmKSB7XG4gICAgICAgIHZhciBpZGVudGlmaWVyID0gX3JlZi5pZGVudGlmaWVyO1xuICAgICAgICByZXR1cm4gaW52YXJpYW50KG51bGwgIT0gaWRlbnRpZmllciwgXCJUb3VjaCBvYmplY3QgaXMgbWlzc2luZyBpZGVudGlmaWVyLlwiKSwgd2FybmluZyQxNShpZGVudGlmaWVyIDw9IE1BWF9UT1VDSF9CQU5LLCBcIlRvdWNoIGlkZW50aWZpZXIgJXMgaXMgZ3JlYXRlciB0aGFuIG1heGltdW0gc3VwcG9ydGVkICVzIHdoaWNoIGNhdXNlcyBcIiArIFwicGVyZm9ybWFuY2UgaXNzdWVzIGJhY2tmaWxsaW5nIGFycmF5IGxvY2F0aW9ucyBmb3IgYWxsIG9mIHRoZSBpbmRpY2VzLlwiLCBpZGVudGlmaWVyLCBNQVhfVE9VQ0hfQkFOSyksIFxuICAgICAgICBpZGVudGlmaWVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWNvcmRUb3VjaFN0YXJ0KHRvdWNoKSB7XG4gICAgICAgIHZhciBpZGVudGlmaWVyID0gZ2V0VG91Y2hJZGVudGlmaWVyKHRvdWNoKSwgdG91Y2hSZWNvcmQgPSB0b3VjaEJhbmtbaWRlbnRpZmllcl07XG4gICAgICAgIHRvdWNoUmVjb3JkID8gcmVzZXRUb3VjaFJlY29yZCh0b3VjaFJlY29yZCwgdG91Y2gpIDogdG91Y2hCYW5rW2lkZW50aWZpZXJdID0gY3JlYXRlVG91Y2hSZWNvcmQodG91Y2gpLCBcbiAgICAgICAgdG91Y2hIaXN0b3J5Lm1vc3RSZWNlbnRUaW1lU3RhbXAgPSB0aW1lc3RhbXBGb3JUb3VjaCh0b3VjaCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlY29yZFRvdWNoTW92ZSh0b3VjaCkge1xuICAgICAgICB2YXIgdG91Y2hSZWNvcmQgPSB0b3VjaEJhbmtbZ2V0VG91Y2hJZGVudGlmaWVyKHRvdWNoKV07XG4gICAgICAgIHRvdWNoUmVjb3JkID8gKHRvdWNoUmVjb3JkLnRvdWNoQWN0aXZlID0gITAsIHRvdWNoUmVjb3JkLnByZXZpb3VzUGFnZVggPSB0b3VjaFJlY29yZC5jdXJyZW50UGFnZVgsIFxuICAgICAgICB0b3VjaFJlY29yZC5wcmV2aW91c1BhZ2VZID0gdG91Y2hSZWNvcmQuY3VycmVudFBhZ2VZLCB0b3VjaFJlY29yZC5wcmV2aW91c1RpbWVTdGFtcCA9IHRvdWNoUmVjb3JkLmN1cnJlbnRUaW1lU3RhbXAsIFxuICAgICAgICB0b3VjaFJlY29yZC5jdXJyZW50UGFnZVggPSB0b3VjaC5wYWdlWCwgdG91Y2hSZWNvcmQuY3VycmVudFBhZ2VZID0gdG91Y2gucGFnZVksIFxuICAgICAgICB0b3VjaFJlY29yZC5jdXJyZW50VGltZVN0YW1wID0gdGltZXN0YW1wRm9yVG91Y2godG91Y2gpLCB0b3VjaEhpc3RvcnkubW9zdFJlY2VudFRpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKSkgOiBjb25zb2xlLmVycm9yKFwiQ2Fubm90IHJlY29yZCB0b3VjaCBtb3ZlIHdpdGhvdXQgYSB0b3VjaCBzdGFydC5cXG5cIiArIFwiVG91Y2ggTW92ZTogJXNcXG5cIiwgXCJUb3VjaCBCYW5rOiAlc1wiLCBwcmludFRvdWNoKHRvdWNoKSwgcHJpbnRUb3VjaEJhbmsoKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlY29yZFRvdWNoRW5kKHRvdWNoKSB7XG4gICAgICAgIHZhciB0b3VjaFJlY29yZCA9IHRvdWNoQmFua1tnZXRUb3VjaElkZW50aWZpZXIodG91Y2gpXTtcbiAgICAgICAgdG91Y2hSZWNvcmQgPyAodG91Y2hSZWNvcmQudG91Y2hBY3RpdmUgPSAhMSwgdG91Y2hSZWNvcmQucHJldmlvdXNQYWdlWCA9IHRvdWNoUmVjb3JkLmN1cnJlbnRQYWdlWCwgXG4gICAgICAgIHRvdWNoUmVjb3JkLnByZXZpb3VzUGFnZVkgPSB0b3VjaFJlY29yZC5jdXJyZW50UGFnZVksIHRvdWNoUmVjb3JkLnByZXZpb3VzVGltZVN0YW1wID0gdG91Y2hSZWNvcmQuY3VycmVudFRpbWVTdGFtcCwgXG4gICAgICAgIHRvdWNoUmVjb3JkLmN1cnJlbnRQYWdlWCA9IHRvdWNoLnBhZ2VYLCB0b3VjaFJlY29yZC5jdXJyZW50UGFnZVkgPSB0b3VjaC5wYWdlWSwgXG4gICAgICAgIHRvdWNoUmVjb3JkLmN1cnJlbnRUaW1lU3RhbXAgPSB0aW1lc3RhbXBGb3JUb3VjaCh0b3VjaCksIHRvdWNoSGlzdG9yeS5tb3N0UmVjZW50VGltZVN0YW1wID0gdGltZXN0YW1wRm9yVG91Y2godG91Y2gpKSA6IGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgcmVjb3JkIHRvdWNoIGVuZCB3aXRob3V0IGEgdG91Y2ggc3RhcnQuXFxuXCIgKyBcIlRvdWNoIEVuZDogJXNcXG5cIiwgXCJUb3VjaCBCYW5rOiAlc1wiLCBwcmludFRvdWNoKHRvdWNoKSwgcHJpbnRUb3VjaEJhbmsoKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByaW50VG91Y2godG91Y2gpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IHRvdWNoLmlkZW50aWZpZXIsXG4gICAgICAgICAgICBwYWdlWDogdG91Y2gucGFnZVgsXG4gICAgICAgICAgICBwYWdlWTogdG91Y2gucGFnZVksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJpbnRUb3VjaEJhbmsoKSB7XG4gICAgICAgIHZhciBwcmludGVkID0gSlNPTi5zdHJpbmdpZnkodG91Y2hCYW5rLnNsaWNlKDAsIE1BWF9UT1VDSF9CQU5LKSk7XG4gICAgICAgIHJldHVybiB0b3VjaEJhbmsubGVuZ3RoID4gTUFYX1RPVUNIX0JBTksgJiYgKHByaW50ZWQgKz0gXCIgKG9yaWdpbmFsIHNpemU6IFwiICsgdG91Y2hCYW5rLmxlbmd0aCArIFwiKVwiKSwgXG4gICAgICAgIHByaW50ZWQ7XG4gICAgfVxuICAgIHZhciBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZSA9IHtcbiAgICAgICAgcmVjb3JkVG91Y2hUcmFjazogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAgICAgICAgICAgaWYgKGlzTW92ZWlzaCQyKHRvcExldmVsVHlwZSkpIG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzLmZvckVhY2gocmVjb3JkVG91Y2hNb3ZlKTsgZWxzZSBpZiAoaXNTdGFydGlzaCQyKHRvcExldmVsVHlwZSkpIG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzLmZvckVhY2gocmVjb3JkVG91Y2hTdGFydCksIFxuICAgICAgICAgICAgdG91Y2hIaXN0b3J5Lm51bWJlckFjdGl2ZVRvdWNoZXMgPSBuYXRpdmVFdmVudC50b3VjaGVzLmxlbmd0aCwgMSA9PT0gdG91Y2hIaXN0b3J5Lm51bWJlckFjdGl2ZVRvdWNoZXMgJiYgKHRvdWNoSGlzdG9yeS5pbmRleE9mU2luZ2xlQWN0aXZlVG91Y2ggPSBuYXRpdmVFdmVudC50b3VjaGVzWzBdLmlkZW50aWZpZXIpOyBlbHNlIGlmIChpc0VuZGlzaCQyKHRvcExldmVsVHlwZSkgJiYgKG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzLmZvckVhY2gocmVjb3JkVG91Y2hFbmQpLCBcbiAgICAgICAgICAgIHRvdWNoSGlzdG9yeS5udW1iZXJBY3RpdmVUb3VjaGVzID0gbmF0aXZlRXZlbnQudG91Y2hlcy5sZW5ndGgsIDEgPT09IHRvdWNoSGlzdG9yeS5udW1iZXJBY3RpdmVUb3VjaGVzKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG91Y2hCYW5rLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaFRyYWNrVG9DaGVjayA9IHRvdWNoQmFua1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gdG91Y2hUcmFja1RvQ2hlY2sgJiYgdG91Y2hUcmFja1RvQ2hlY2sudG91Y2hBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoSGlzdG9yeS5pbmRleE9mU2luZ2xlQWN0aXZlVG91Y2ggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVJlY29yZCA9IHRvdWNoQmFua1t0b3VjaEhpc3RvcnkuaW5kZXhPZlNpbmdsZUFjdGl2ZVRvdWNoXTtcbiAgICAgICAgICAgICAgICB3YXJuaW5nJDE1KG51bGwgIT0gYWN0aXZlUmVjb3JkICYmIGFjdGl2ZVJlY29yZC50b3VjaEFjdGl2ZSwgXCJDYW5ub3QgZmluZCBzaW5nbGUgYWN0aXZlIHRvdWNoLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdG91Y2hIaXN0b3J5OiB0b3VjaEhpc3RvcnlcbiAgICB9LCBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZV8xID0gUmVzcG9uZGVyVG91Y2hIaXN0b3J5U3RvcmU7XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZShjdXJyZW50LCBuZXh0KSB7XG4gICAgICAgIHJldHVybiBpbnZhcmlhbnQobnVsbCAhPSBuZXh0LCBcImFjY3VtdWxhdGUoLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBiZSBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuXCIpLCBcbiAgICAgICAgbnVsbCA9PSBjdXJyZW50ID8gbmV4dCA6IEFycmF5LmlzQXJyYXkoY3VycmVudCkgPyBjdXJyZW50LmNvbmNhdChuZXh0KSA6IEFycmF5LmlzQXJyYXkobmV4dCkgPyBbIGN1cnJlbnQgXS5jb25jYXQobmV4dCkgOiBbIGN1cnJlbnQsIG5leHQgXTtcbiAgICB9XG4gICAgdmFyIGFjY3VtdWxhdGVfMSA9IGFjY3VtdWxhdGUsIGlzU3RhcnRpc2gkMSA9IEV2ZW50UGx1Z2luVXRpbHNfMS5pc1N0YXJ0aXNoLCBpc01vdmVpc2gkMSA9IEV2ZW50UGx1Z2luVXRpbHNfMS5pc01vdmVpc2gsIGlzRW5kaXNoJDEgPSBFdmVudFBsdWdpblV0aWxzXzEuaXNFbmRpc2gsIGV4ZWN1dGVEaXJlY3REaXNwYXRjaCQxID0gRXZlbnRQbHVnaW5VdGlsc18xLmV4ZWN1dGVEaXJlY3REaXNwYXRjaCwgaGFzRGlzcGF0Y2hlcyQxID0gRXZlbnRQbHVnaW5VdGlsc18xLmhhc0Rpc3BhdGNoZXMsIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUkMSA9IEV2ZW50UGx1Z2luVXRpbHNfMS5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlLCByZXNwb25kZXJJbnN0ID0gbnVsbCwgdHJhY2tlZFRvdWNoQ291bnQgPSAwLCBwcmV2aW91c0FjdGl2ZVRvdWNoZXMgPSAwLCBjaGFuZ2VSZXNwb25kZXIgPSBmdW5jdGlvbihuZXh0UmVzcG9uZGVySW5zdCwgYmxvY2tIb3N0UmVzcG9uZGVyKSB7XG4gICAgICAgIHZhciBvbGRSZXNwb25kZXJJbnN0ID0gcmVzcG9uZGVySW5zdDtcbiAgICAgICAgcmVzcG9uZGVySW5zdCA9IG5leHRSZXNwb25kZXJJbnN0LCBudWxsICE9PSBSZXNwb25kZXJFdmVudFBsdWdpbi5HbG9iYWxSZXNwb25kZXJIYW5kbGVyICYmIFJlc3BvbmRlckV2ZW50UGx1Z2luLkdsb2JhbFJlc3BvbmRlckhhbmRsZXIub25DaGFuZ2Uob2xkUmVzcG9uZGVySW5zdCwgbmV4dFJlc3BvbmRlckluc3QsIGJsb2NrSG9zdFJlc3BvbmRlcik7XG4gICAgfSwgZXZlbnRUeXBlcyA9IHtcbiAgICAgICAgc3RhcnRTaG91bGRTZXRSZXNwb25kZXI6IHtcbiAgICAgICAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgICAgICAgYnViYmxlZDogXCJvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyXCIsXG4gICAgICAgICAgICAgICAgY2FwdHVyZWQ6IFwib25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmVcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzY3JvbGxTaG91bGRTZXRSZXNwb25kZXI6IHtcbiAgICAgICAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgICAgICAgYnViYmxlZDogXCJvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlclwiLFxuICAgICAgICAgICAgICAgIGNhcHR1cmVkOiBcIm9uU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlcjoge1xuICAgICAgICAgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICAgICAgICBidWJibGVkOiBcIm9uU2VsZWN0aW9uQ2hhbmdlU2hvdWxkU2V0UmVzcG9uZGVyXCIsXG4gICAgICAgICAgICAgICAgY2FwdHVyZWQ6IFwib25TZWxlY3Rpb25DaGFuZ2VTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW92ZVNob3VsZFNldFJlc3BvbmRlcjoge1xuICAgICAgICAgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICAgICAgICBidWJibGVkOiBcIm9uTW92ZVNob3VsZFNldFJlc3BvbmRlclwiLFxuICAgICAgICAgICAgICAgIGNhcHR1cmVkOiBcIm9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmVcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNwb25kZXJTdGFydDoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogXCJvblJlc3BvbmRlclN0YXJ0XCJcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uZGVyTW92ZToge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogXCJvblJlc3BvbmRlck1vdmVcIlxuICAgICAgICB9LFxuICAgICAgICByZXNwb25kZXJFbmQ6IHtcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6IFwib25SZXNwb25kZXJFbmRcIlxuICAgICAgICB9LFxuICAgICAgICByZXNwb25kZXJSZWxlYXNlOiB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25OYW1lOiBcIm9uUmVzcG9uZGVyUmVsZWFzZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDoge1xuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogXCJvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbmRlckdyYW50OiB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25OYW1lOiBcIm9uUmVzcG9uZGVyR3JhbnRcIlxuICAgICAgICB9LFxuICAgICAgICByZXNwb25kZXJSZWplY3Q6IHtcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6IFwib25SZXNwb25kZXJSZWplY3RcIlxuICAgICAgICB9LFxuICAgICAgICByZXNwb25kZXJUZXJtaW5hdGU6IHtcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6IFwib25SZXNwb25kZXJUZXJtaW5hdGVcIlxuICAgICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBzZXRSZXNwb25kZXJBbmRFeHRyYWN0VHJhbnNmZXIodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAgICAgdmFyIHNob3VsZFNldEV2ZW50VHlwZSA9IGlzU3RhcnRpc2gkMSh0b3BMZXZlbFR5cGUpID8gZXZlbnRUeXBlcy5zdGFydFNob3VsZFNldFJlc3BvbmRlciA6IGlzTW92ZWlzaCQxKHRvcExldmVsVHlwZSkgPyBldmVudFR5cGVzLm1vdmVTaG91bGRTZXRSZXNwb25kZXIgOiBcInRvcFNlbGVjdGlvbkNoYW5nZVwiID09PSB0b3BMZXZlbFR5cGUgPyBldmVudFR5cGVzLnNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlciA6IGV2ZW50VHlwZXMuc2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyLCBidWJibGVTaG91bGRTZXRGcm9tID0gcmVzcG9uZGVySW5zdCA/IFJlYWN0VHJlZVRyYXZlcnNhbC5nZXRMb3dlc3RDb21tb25BbmNlc3RvcihyZXNwb25kZXJJbnN0LCB0YXJnZXRJbnN0KSA6IHRhcmdldEluc3QsIHNraXBPdmVyQnViYmxlU2hvdWxkU2V0RnJvbSA9IGJ1YmJsZVNob3VsZFNldEZyb20gPT09IHJlc3BvbmRlckluc3QsIHNob3VsZFNldEV2ZW50ID0gUmVzcG9uZGVyU3ludGhldGljRXZlbnRfMS5nZXRQb29sZWQoc2hvdWxkU2V0RXZlbnRUeXBlLCBidWJibGVTaG91bGRTZXRGcm9tLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICBzaG91bGRTZXRFdmVudC50b3VjaEhpc3RvcnkgPSBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZV8xLnRvdWNoSGlzdG9yeSwgc2tpcE92ZXJCdWJibGVTaG91bGRTZXRGcm9tID8gRXZlbnRQcm9wYWdhdG9yc18xLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0KHNob3VsZFNldEV2ZW50KSA6IEV2ZW50UHJvcGFnYXRvcnNfMS5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKHNob3VsZFNldEV2ZW50KTtcbiAgICAgICAgdmFyIHdhbnRzUmVzcG9uZGVySW5zdCA9IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUkMShzaG91bGRTZXRFdmVudCk7XG4gICAgICAgIGlmIChzaG91bGRTZXRFdmVudC5pc1BlcnNpc3RlbnQoKSB8fCBzaG91bGRTZXRFdmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKHNob3VsZFNldEV2ZW50KSwgXG4gICAgICAgICF3YW50c1Jlc3BvbmRlckluc3QgfHwgd2FudHNSZXNwb25kZXJJbnN0ID09PSByZXNwb25kZXJJbnN0KSByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIGV4dHJhY3RlZCwgZ3JhbnRFdmVudCA9IFJlc3BvbmRlclN5bnRoZXRpY0V2ZW50XzEuZ2V0UG9vbGVkKGV2ZW50VHlwZXMucmVzcG9uZGVyR3JhbnQsIHdhbnRzUmVzcG9uZGVySW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgZ3JhbnRFdmVudC50b3VjaEhpc3RvcnkgPSBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZV8xLnRvdWNoSGlzdG9yeSwgRXZlbnRQcm9wYWdhdG9yc18xLmFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGdyYW50RXZlbnQpO1xuICAgICAgICB2YXIgYmxvY2tIb3N0UmVzcG9uZGVyID0gITAgPT09IGV4ZWN1dGVEaXJlY3REaXNwYXRjaCQxKGdyYW50RXZlbnQpO1xuICAgICAgICBpZiAocmVzcG9uZGVySW5zdCkge1xuICAgICAgICAgICAgdmFyIHRlcm1pbmF0aW9uUmVxdWVzdEV2ZW50ID0gUmVzcG9uZGVyU3ludGhldGljRXZlbnRfMS5nZXRQb29sZWQoZXZlbnRUeXBlcy5yZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QsIHJlc3BvbmRlckluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgICB0ZXJtaW5hdGlvblJlcXVlc3RFdmVudC50b3VjaEhpc3RvcnkgPSBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZV8xLnRvdWNoSGlzdG9yeSwgXG4gICAgICAgICAgICBFdmVudFByb3BhZ2F0b3JzXzEuYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXModGVybWluYXRpb25SZXF1ZXN0RXZlbnQpO1xuICAgICAgICAgICAgdmFyIHNob3VsZFN3aXRjaCA9ICFoYXNEaXNwYXRjaGVzJDEodGVybWluYXRpb25SZXF1ZXN0RXZlbnQpIHx8IGV4ZWN1dGVEaXJlY3REaXNwYXRjaCQxKHRlcm1pbmF0aW9uUmVxdWVzdEV2ZW50KTtcbiAgICAgICAgICAgIGlmICh0ZXJtaW5hdGlvblJlcXVlc3RFdmVudC5pc1BlcnNpc3RlbnQoKSB8fCB0ZXJtaW5hdGlvblJlcXVlc3RFdmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKHRlcm1pbmF0aW9uUmVxdWVzdEV2ZW50KSwgXG4gICAgICAgICAgICBzaG91bGRTd2l0Y2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVybWluYXRlRXZlbnQgPSBSZXNwb25kZXJTeW50aGV0aWNFdmVudF8xLmdldFBvb2xlZChldmVudFR5cGVzLnJlc3BvbmRlclRlcm1pbmF0ZSwgcmVzcG9uZGVySW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0ZXJtaW5hdGVFdmVudC50b3VjaEhpc3RvcnkgPSBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZV8xLnRvdWNoSGlzdG9yeSwgRXZlbnRQcm9wYWdhdG9yc18xLmFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKHRlcm1pbmF0ZUV2ZW50KSwgXG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkID0gYWNjdW11bGF0ZV8xKGV4dHJhY3RlZCwgWyBncmFudEV2ZW50LCB0ZXJtaW5hdGVFdmVudCBdKSwgY2hhbmdlUmVzcG9uZGVyKHdhbnRzUmVzcG9uZGVySW5zdCwgYmxvY2tIb3N0UmVzcG9uZGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlamVjdEV2ZW50ID0gUmVzcG9uZGVyU3ludGhldGljRXZlbnRfMS5nZXRQb29sZWQoZXZlbnRUeXBlcy5yZXNwb25kZXJSZWplY3QsIHdhbnRzUmVzcG9uZGVySW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICByZWplY3RFdmVudC50b3VjaEhpc3RvcnkgPSBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZV8xLnRvdWNoSGlzdG9yeSwgRXZlbnRQcm9wYWdhdG9yc18xLmFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKHJlamVjdEV2ZW50KSwgXG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkID0gYWNjdW11bGF0ZV8xKGV4dHJhY3RlZCwgcmVqZWN0RXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgZXh0cmFjdGVkID0gYWNjdW11bGF0ZV8xKGV4dHJhY3RlZCwgZ3JhbnRFdmVudCksIGNoYW5nZVJlc3BvbmRlcih3YW50c1Jlc3BvbmRlckluc3QsIGJsb2NrSG9zdFJlc3BvbmRlcik7XG4gICAgICAgIHJldHVybiBleHRyYWN0ZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNhblRyaWdnZXJUcmFuc2Zlcih0b3BMZXZlbFR5cGUsIHRvcExldmVsSW5zdCwgbmF0aXZlRXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRvcExldmVsSW5zdCAmJiAoXCJ0b3BTY3JvbGxcIiA9PT0gdG9wTGV2ZWxUeXBlICYmICFuYXRpdmVFdmVudC5yZXNwb25kZXJJZ25vcmVTY3JvbGwgfHwgdHJhY2tlZFRvdWNoQ291bnQgPiAwICYmIFwidG9wU2VsZWN0aW9uQ2hhbmdlXCIgPT09IHRvcExldmVsVHlwZSB8fCBpc1N0YXJ0aXNoJDEodG9wTGV2ZWxUeXBlKSB8fCBpc01vdmVpc2gkMSh0b3BMZXZlbFR5cGUpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbm9SZXNwb25kZXJUb3VjaGVzKG5hdGl2ZUV2ZW50KSB7XG4gICAgICAgIHZhciB0b3VjaGVzID0gbmF0aXZlRXZlbnQudG91Y2hlcztcbiAgICAgICAgaWYgKCF0b3VjaGVzIHx8IDAgPT09IHRvdWNoZXMubGVuZ3RoKSByZXR1cm4gITA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFjdGl2ZVRvdWNoID0gdG91Y2hlc1tpXSwgdGFyZ2V0ID0gYWN0aXZlVG91Y2gudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IHRhcmdldCAmJiB2b2lkIDAgIT09IHRhcmdldCAmJiAwICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0SW5zdCA9IEV2ZW50UGx1Z2luVXRpbHNfMS5nZXRJbnN0YW5jZUZyb21Ob2RlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKFJlYWN0VHJlZVRyYXZlcnNhbC5pc0FuY2VzdG9yKHJlc3BvbmRlckluc3QsIHRhcmdldEluc3QpKSByZXR1cm4gITE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICB2YXIgUmVzcG9uZGVyRXZlbnRQbHVnaW4gPSB7XG4gICAgICAgIF9nZXRSZXNwb25kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbmRlckluc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG4gICAgICAgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICBpZiAoaXNTdGFydGlzaCQxKHRvcExldmVsVHlwZSkpIHRyYWNrZWRUb3VjaENvdW50ICs9IDE7IGVsc2UgaWYgKGlzRW5kaXNoJDEodG9wTGV2ZWxUeXBlKSkge1xuICAgICAgICAgICAgICAgIGlmICghKHRyYWNrZWRUb3VjaENvdW50ID49IDApKSByZXR1cm4gY29uc29sZS5lcnJvcihcIkVuZGVkIGEgdG91Y2ggZXZlbnQgd2hpY2ggd2FzIG5vdCBjb3VudGVkIGluIGB0cmFja2VkVG91Y2hDb3VudGAuXCIpLCBcbiAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgICAgIHRyYWNrZWRUb3VjaENvdW50IC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZV8xLnJlY29yZFRvdWNoVHJhY2sodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gICAgICAgICAgICB2YXIgZXh0cmFjdGVkID0gY2FuVHJpZ2dlclRyYW5zZmVyKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQpID8gc2V0UmVzcG9uZGVyQW5kRXh0cmFjdFRyYW5zZmVyKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSA6IG51bGwsIGlzUmVzcG9uZGVyVG91Y2hTdGFydCA9IHJlc3BvbmRlckluc3QgJiYgaXNTdGFydGlzaCQxKHRvcExldmVsVHlwZSksIGlzUmVzcG9uZGVyVG91Y2hNb3ZlID0gcmVzcG9uZGVySW5zdCAmJiBpc01vdmVpc2gkMSh0b3BMZXZlbFR5cGUpLCBpc1Jlc3BvbmRlclRvdWNoRW5kID0gcmVzcG9uZGVySW5zdCAmJiBpc0VuZGlzaCQxKHRvcExldmVsVHlwZSksIGluY3JlbWVudGFsVG91Y2ggPSBpc1Jlc3BvbmRlclRvdWNoU3RhcnQgPyBldmVudFR5cGVzLnJlc3BvbmRlclN0YXJ0IDogaXNSZXNwb25kZXJUb3VjaE1vdmUgPyBldmVudFR5cGVzLnJlc3BvbmRlck1vdmUgOiBpc1Jlc3BvbmRlclRvdWNoRW5kID8gZXZlbnRUeXBlcy5yZXNwb25kZXJFbmQgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGluY3JlbWVudGFsVG91Y2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2VzdHVyZSA9IFJlc3BvbmRlclN5bnRoZXRpY0V2ZW50XzEuZ2V0UG9vbGVkKGluY3JlbWVudGFsVG91Y2gsIHJlc3BvbmRlckluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgZ2VzdHVyZS50b3VjaEhpc3RvcnkgPSBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZV8xLnRvdWNoSGlzdG9yeSwgRXZlbnRQcm9wYWdhdG9yc18xLmFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGdlc3R1cmUpLCBcbiAgICAgICAgICAgICAgICBleHRyYWN0ZWQgPSBhY2N1bXVsYXRlXzEoZXh0cmFjdGVkLCBnZXN0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpc1Jlc3BvbmRlclRlcm1pbmF0ZSA9IHJlc3BvbmRlckluc3QgJiYgXCJ0b3BUb3VjaENhbmNlbFwiID09PSB0b3BMZXZlbFR5cGUsIGlzUmVzcG9uZGVyUmVsZWFzZSA9IHJlc3BvbmRlckluc3QgJiYgIWlzUmVzcG9uZGVyVGVybWluYXRlICYmIGlzRW5kaXNoJDEodG9wTGV2ZWxUeXBlKSAmJiBub1Jlc3BvbmRlclRvdWNoZXMobmF0aXZlRXZlbnQpLCBmaW5hbFRvdWNoID0gaXNSZXNwb25kZXJUZXJtaW5hdGUgPyBldmVudFR5cGVzLnJlc3BvbmRlclRlcm1pbmF0ZSA6IGlzUmVzcG9uZGVyUmVsZWFzZSA/IGV2ZW50VHlwZXMucmVzcG9uZGVyUmVsZWFzZSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoZmluYWxUb3VjaCkge1xuICAgICAgICAgICAgICAgIHZhciBmaW5hbEV2ZW50ID0gUmVzcG9uZGVyU3ludGhldGljRXZlbnRfMS5nZXRQb29sZWQoZmluYWxUb3VjaCwgcmVzcG9uZGVySW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBmaW5hbEV2ZW50LnRvdWNoSGlzdG9yeSA9IFJlc3BvbmRlclRvdWNoSGlzdG9yeVN0b3JlXzEudG91Y2hIaXN0b3J5LCBFdmVudFByb3BhZ2F0b3JzXzEuYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZmluYWxFdmVudCksIFxuICAgICAgICAgICAgICAgIGV4dHJhY3RlZCA9IGFjY3VtdWxhdGVfMShleHRyYWN0ZWQsIGZpbmFsRXZlbnQpLCBjaGFuZ2VSZXNwb25kZXIobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbnVtYmVyQWN0aXZlVG91Y2hlcyA9IFJlc3BvbmRlclRvdWNoSGlzdG9yeVN0b3JlXzEudG91Y2hIaXN0b3J5Lm51bWJlckFjdGl2ZVRvdWNoZXM7XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uZGVyRXZlbnRQbHVnaW4uR2xvYmFsSW50ZXJhY3Rpb25IYW5kbGVyICYmIG51bWJlckFjdGl2ZVRvdWNoZXMgIT09IHByZXZpb3VzQWN0aXZlVG91Y2hlcyAmJiBSZXNwb25kZXJFdmVudFBsdWdpbi5HbG9iYWxJbnRlcmFjdGlvbkhhbmRsZXIub25DaGFuZ2UobnVtYmVyQWN0aXZlVG91Y2hlcyksIFxuICAgICAgICAgICAgcHJldmlvdXNBY3RpdmVUb3VjaGVzID0gbnVtYmVyQWN0aXZlVG91Y2hlcywgZXh0cmFjdGVkO1xuICAgICAgICB9LFxuICAgICAgICBHbG9iYWxSZXNwb25kZXJIYW5kbGVyOiBudWxsLFxuICAgICAgICBHbG9iYWxJbnRlcmFjdGlvbkhhbmRsZXI6IG51bGwsXG4gICAgICAgIGluamVjdGlvbjoge1xuICAgICAgICAgICAgaW5qZWN0R2xvYmFsUmVzcG9uZGVySGFuZGxlcjogZnVuY3Rpb24oR2xvYmFsUmVzcG9uZGVySGFuZGxlcikge1xuICAgICAgICAgICAgICAgIFJlc3BvbmRlckV2ZW50UGx1Z2luLkdsb2JhbFJlc3BvbmRlckhhbmRsZXIgPSBHbG9iYWxSZXNwb25kZXJIYW5kbGVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluamVjdEdsb2JhbEludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24oR2xvYmFsSW50ZXJhY3Rpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgUmVzcG9uZGVyRXZlbnRQbHVnaW4uR2xvYmFsSW50ZXJhY3Rpb25IYW5kbGVyID0gR2xvYmFsSW50ZXJhY3Rpb25IYW5kbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgUmVzcG9uZGVyRXZlbnRQbHVnaW5fMSA9IFJlc3BvbmRlckV2ZW50UGx1Z2luO1xuICAgIFJDVEV2ZW50RW1pdHRlci5yZWdpc3RlcihSZWFjdE5hdGl2ZUV2ZW50RW1pdHRlcl8xKSwgRXZlbnRQbHVnaW5IdWJfMS5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihSZWFjdE5hdGl2ZUV2ZW50UGx1Z2luT3JkZXJfMSksIFxuICAgIEV2ZW50UGx1Z2luVXRpbHNfMS5pbmplY3Rpb24uaW5qZWN0Q29tcG9uZW50VHJlZShSZWFjdE5hdGl2ZUNvbXBvbmVudFRyZWVfMSksIFJlc3BvbmRlckV2ZW50UGx1Z2luXzEuaW5qZWN0aW9uLmluamVjdEdsb2JhbFJlc3BvbmRlckhhbmRsZXIoUmVhY3ROYXRpdmVHbG9iYWxSZXNwb25kZXJIYW5kbGVyXzEpLCBcbiAgICBFdmVudFBsdWdpbkh1Yl8xLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgICAgICBSZXNwb25kZXJFdmVudFBsdWdpbjogUmVzcG9uZGVyRXZlbnRQbHVnaW5fMSxcbiAgICAgICAgUmVhY3ROYXRpdmVCcmlkZ2VFdmVudFBsdWdpbjogUmVhY3ROYXRpdmVCcmlkZ2VFdmVudFBsdWdpbl8xXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDIoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgICAgIGlmICghc2VsZikgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgICAgICByZXR1cm4gIWNhbGwgfHwgXCJvYmplY3RcIiAhPSB0eXBlb2YgY2FsbCAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGNhbGwgPyBzZWxmIDogY2FsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHN1cGVyQ2xhc3MgJiYgbnVsbCAhPT0gc3VwZXJDbGFzcykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHN1cGVyQ2xhc3MgJiYgKE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzKTtcbiAgICB9XG4gICAgdmFyIG1vdW50U2FmZUNhbGxiYWNrJDIgPSBOYXRpdmVNZXRob2RzTWl4aW5VdGlscy5tb3VudFNhZmVDYWxsYmFjaywgUmVhY3ROYXRpdmVDb21wb25lbnQgPSBmdW5jdGlvbihfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgICAgIF9pbmhlcml0cyhSZWFjdE5hdGl2ZUNvbXBvbmVudCwgX1JlYWN0JENvbXBvbmVudCk7XG4gICAgICAgIGZ1bmN0aW9uIFJlYWN0TmF0aXZlQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jbGFzc0NhbGxDaGVjayQyKHRoaXMsIFJlYWN0TmF0aXZlQ29tcG9uZW50KSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVhY3ROYXRpdmVDb21wb25lbnQucHJvdG90eXBlLmJsdXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFRleHRJbnB1dFN0YXRlLmJsdXJUZXh0SW5wdXQoZmluZE51bWVyaWNOb2RlSGFuZGxlKHRoaXMpKTtcbiAgICAgICAgfSwgUmVhY3ROYXRpdmVDb21wb25lbnQucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBUZXh0SW5wdXRTdGF0ZS5mb2N1c1RleHRJbnB1dChmaW5kTnVtZXJpY05vZGVIYW5kbGUodGhpcykpO1xuICAgICAgICB9LCBSZWFjdE5hdGl2ZUNvbXBvbmVudC5wcm90b3R5cGUubWVhc3VyZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBVSU1hbmFnZXIubWVhc3VyZShmaW5kTnVtZXJpY05vZGVIYW5kbGUodGhpcyksIG1vdW50U2FmZUNhbGxiYWNrJDIodGhpcywgY2FsbGJhY2spKTtcbiAgICAgICAgfSwgUmVhY3ROYXRpdmVDb21wb25lbnQucHJvdG90eXBlLm1lYXN1cmVJbldpbmRvdyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBVSU1hbmFnZXIubWVhc3VyZUluV2luZG93KGZpbmROdW1lcmljTm9kZUhhbmRsZSh0aGlzKSwgbW91bnRTYWZlQ2FsbGJhY2skMih0aGlzLCBjYWxsYmFjaykpO1xuICAgICAgICB9LCBSZWFjdE5hdGl2ZUNvbXBvbmVudC5wcm90b3R5cGUubWVhc3VyZUxheW91dCA9IGZ1bmN0aW9uKHJlbGF0aXZlVG9OYXRpdmVOb2RlLCBvblN1Y2Nlc3MsIG9uRmFpbCkge1xuICAgICAgICAgICAgVUlNYW5hZ2VyLm1lYXN1cmVMYXlvdXQoZmluZE51bWVyaWNOb2RlSGFuZGxlKHRoaXMpLCByZWxhdGl2ZVRvTmF0aXZlTm9kZSwgbW91bnRTYWZlQ2FsbGJhY2skMih0aGlzLCBvbkZhaWwpLCBtb3VudFNhZmVDYWxsYmFjayQyKHRoaXMsIG9uU3VjY2VzcykpO1xuICAgICAgICB9LCBSZWFjdE5hdGl2ZUNvbXBvbmVudC5wcm90b3R5cGUuc2V0TmF0aXZlUHJvcHMgPSBmdW5jdGlvbihuYXRpdmVQcm9wcykge1xuICAgICAgICAgICAgdmFyIG1heWJlSW5zdGFuY2UgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1heWJlSW5zdGFuY2UgPSBmaW5kTm9kZUhhbmRsZV8xKHRoaXMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHt9XG4gICAgICAgICAgICBpZiAobnVsbCAhPSBtYXliZUluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdDb25maWcgPSBtYXliZUluc3RhbmNlLnZpZXdDb25maWcsIHVwZGF0ZVBheWxvYWQgPSBSZWFjdE5hdGl2ZUF0dHJpYnV0ZVBheWxvYWRfMS5jcmVhdGUobmF0aXZlUHJvcHMsIHZpZXdDb25maWcudmFsaWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICBudWxsICE9IHVwZGF0ZVBheWxvYWQgJiYgVUlNYW5hZ2VyLnVwZGF0ZVZpZXcobWF5YmVJbnN0YW5jZS5fbmF0aXZlVGFnLCB2aWV3Q29uZmlnLnVpVmlld0NsYXNzTmFtZSwgdXBkYXRlUGF5bG9hZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFJlYWN0TmF0aXZlQ29tcG9uZW50O1xuICAgIH0ocmVhY3QuQ29tcG9uZW50KSwgUmVhY3ROYXRpdmVDb21wb25lbnRfMSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LCBtb3VudFNhZmVDYWxsYmFjayQzID0gTmF0aXZlTWV0aG9kc01peGluVXRpbHMubW91bnRTYWZlQ2FsbGJhY2ssIHRocm93T25TdHlsZXNQcm9wJDEgPSBOYXRpdmVNZXRob2RzTWl4aW5VdGlscy50aHJvd09uU3R5bGVzUHJvcCwgd2FybkZvclN0eWxlUHJvcHMkMiA9IE5hdGl2ZU1ldGhvZHNNaXhpblV0aWxzLndhcm5Gb3JTdHlsZVByb3BzLCBOYXRpdmVNZXRob2RzTWl4aW4gPSB7XG4gICAgICAgIG1lYXN1cmU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBVSU1hbmFnZXIubWVhc3VyZShmaW5kTnVtZXJpY05vZGVIYW5kbGUodGhpcyksIG1vdW50U2FmZUNhbGxiYWNrJDModGhpcywgY2FsbGJhY2spKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVhc3VyZUluV2luZG93OiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgVUlNYW5hZ2VyLm1lYXN1cmVJbldpbmRvdyhmaW5kTnVtZXJpY05vZGVIYW5kbGUodGhpcyksIG1vdW50U2FmZUNhbGxiYWNrJDModGhpcywgY2FsbGJhY2spKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVhc3VyZUxheW91dDogZnVuY3Rpb24ocmVsYXRpdmVUb05hdGl2ZU5vZGUsIG9uU3VjY2Vzcywgb25GYWlsKSB7XG4gICAgICAgICAgICBVSU1hbmFnZXIubWVhc3VyZUxheW91dChmaW5kTnVtZXJpY05vZGVIYW5kbGUodGhpcyksIHJlbGF0aXZlVG9OYXRpdmVOb2RlLCBtb3VudFNhZmVDYWxsYmFjayQzKHRoaXMsIG9uRmFpbCksIG1vdW50U2FmZUNhbGxiYWNrJDModGhpcywgb25TdWNjZXNzKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldE5hdGl2ZVByb3BzOiBmdW5jdGlvbihuYXRpdmVQcm9wcykge1xuICAgICAgICAgICAgdmFyIG1heWJlSW5zdGFuY2UgPSB2b2lkIDA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1heWJlSW5zdGFuY2UgPSBmaW5kTm9kZUhhbmRsZV8xKHRoaXMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHt9XG4gICAgICAgICAgICBpZiAobnVsbCAhPSBtYXliZUluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdDb25maWcgPSBtYXliZUluc3RhbmNlLnZpZXdDb25maWc7XG4gICAgICAgICAgICAgICAgd2FybkZvclN0eWxlUHJvcHMkMihuYXRpdmVQcm9wcywgdmlld0NvbmZpZy52YWxpZEF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVQYXlsb2FkID0gUmVhY3ROYXRpdmVBdHRyaWJ1dGVQYXlsb2FkXzEuY3JlYXRlKG5hdGl2ZVByb3BzLCB2aWV3Q29uZmlnLnZhbGlkQXR0cmlidXRlcyk7XG4gICAgICAgICAgICAgICAgbnVsbCAhPSB1cGRhdGVQYXlsb2FkICYmIFVJTWFuYWdlci51cGRhdGVWaWV3KG1heWJlSW5zdGFuY2UuX25hdGl2ZVRhZywgdmlld0NvbmZpZy51aVZpZXdDbGFzc05hbWUsIHVwZGF0ZVBheWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmb2N1czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBUZXh0SW5wdXRTdGF0ZS5mb2N1c1RleHRJbnB1dChmaW5kTnVtZXJpY05vZGVIYW5kbGUodGhpcykpO1xuICAgICAgICB9LFxuICAgICAgICBibHVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFRleHRJbnB1dFN0YXRlLmJsdXJUZXh0SW5wdXQoZmluZE51bWVyaWNOb2RlSGFuZGxlKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH0sIE5hdGl2ZU1ldGhvZHNNaXhpbl9ERVYgPSBOYXRpdmVNZXRob2RzTWl4aW47XG4gICAgaW52YXJpYW50KCFOYXRpdmVNZXRob2RzTWl4aW5fREVWLmNvbXBvbmVudFdpbGxNb3VudCAmJiAhTmF0aXZlTWV0aG9kc01peGluX0RFVi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLCBcIkRvIG5vdCBvdmVycmlkZSBleGlzdGluZyBmdW5jdGlvbnMuXCIpLCBcbiAgICBOYXRpdmVNZXRob2RzTWl4aW5fREVWLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvd09uU3R5bGVzUHJvcCQxKHRoaXMsIHRoaXMucHJvcHMpO1xuICAgIH0sIE5hdGl2ZU1ldGhvZHNNaXhpbl9ERVYuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uKG5ld1Byb3BzKSB7XG4gICAgICAgIHRocm93T25TdHlsZXNQcm9wJDEodGhpcywgbmV3UHJvcHMpO1xuICAgIH07XG4gICAgdmFyIE5hdGl2ZU1ldGhvZHNNaXhpbl8xID0gTmF0aXZlTWV0aG9kc01peGluLCBUb3VjaEhpc3RvcnlNYXRoID0ge1xuICAgICAgICBjZW50cm9pZERpbWVuc2lvbjogZnVuY3Rpb24odG91Y2hIaXN0b3J5LCB0b3VjaGVzQ2hhbmdlZEFmdGVyLCBpc1hBeGlzLCBvZkN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciB0b3VjaEJhbmsgPSB0b3VjaEhpc3RvcnkudG91Y2hCYW5rLCB0b3RhbCA9IDAsIGNvdW50ID0gMCwgb25lVG91Y2hEYXRhID0gMSA9PT0gdG91Y2hIaXN0b3J5Lm51bWJlckFjdGl2ZVRvdWNoZXMgPyB0b3VjaEhpc3RvcnkudG91Y2hCYW5rW3RvdWNoSGlzdG9yeS5pbmRleE9mU2luZ2xlQWN0aXZlVG91Y2hdIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBvbmVUb3VjaERhdGEpIG9uZVRvdWNoRGF0YS50b3VjaEFjdGl2ZSAmJiBvbmVUb3VjaERhdGEuY3VycmVudFRpbWVTdGFtcCA+IHRvdWNoZXNDaGFuZ2VkQWZ0ZXIgJiYgKHRvdGFsICs9IG9mQ3VycmVudCAmJiBpc1hBeGlzID8gb25lVG91Y2hEYXRhLmN1cnJlbnRQYWdlWCA6IG9mQ3VycmVudCAmJiAhaXNYQXhpcyA/IG9uZVRvdWNoRGF0YS5jdXJyZW50UGFnZVkgOiAhb2ZDdXJyZW50ICYmIGlzWEF4aXMgPyBvbmVUb3VjaERhdGEucHJldmlvdXNQYWdlWCA6IG9uZVRvdWNoRGF0YS5wcmV2aW91c1BhZ2VZLCBcbiAgICAgICAgICAgIGNvdW50ID0gMSk7IGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3VjaEJhbmsubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hUcmFjayA9IHRvdWNoQmFua1tpXTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdG91Y2hUcmFjayAmJiB2b2lkIDAgIT09IHRvdWNoVHJhY2sgJiYgdG91Y2hUcmFjay50b3VjaEFjdGl2ZSAmJiB0b3VjaFRyYWNrLmN1cnJlbnRUaW1lU3RhbXAgPj0gdG91Y2hlc0NoYW5nZWRBZnRlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9BZGQ7XG4gICAgICAgICAgICAgICAgICAgIHRvQWRkID0gb2ZDdXJyZW50ICYmIGlzWEF4aXMgPyB0b3VjaFRyYWNrLmN1cnJlbnRQYWdlWCA6IG9mQ3VycmVudCAmJiAhaXNYQXhpcyA/IHRvdWNoVHJhY2suY3VycmVudFBhZ2VZIDogIW9mQ3VycmVudCAmJiBpc1hBeGlzID8gdG91Y2hUcmFjay5wcmV2aW91c1BhZ2VYIDogdG91Y2hUcmFjay5wcmV2aW91c1BhZ2VZLCBcbiAgICAgICAgICAgICAgICAgICAgdG90YWwgKz0gdG9BZGQsIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvdW50ID4gMCA/IHRvdGFsIC8gY291bnQgOiBUb3VjaEhpc3RvcnlNYXRoLm5vQ2VudHJvaWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGN1cnJlbnRDZW50cm9pZFhPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXI6IGZ1bmN0aW9uKHRvdWNoSGlzdG9yeSwgdG91Y2hlc0NoYW5nZWRBZnRlcikge1xuICAgICAgICAgICAgcmV0dXJuIFRvdWNoSGlzdG9yeU1hdGguY2VudHJvaWREaW1lbnNpb24odG91Y2hIaXN0b3J5LCB0b3VjaGVzQ2hhbmdlZEFmdGVyLCAhMCwgITApO1xuICAgICAgICB9LFxuICAgICAgICBjdXJyZW50Q2VudHJvaWRZT2ZUb3VjaGVzQ2hhbmdlZEFmdGVyOiBmdW5jdGlvbih0b3VjaEhpc3RvcnksIHRvdWNoZXNDaGFuZ2VkQWZ0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBUb3VjaEhpc3RvcnlNYXRoLmNlbnRyb2lkRGltZW5zaW9uKHRvdWNoSGlzdG9yeSwgdG91Y2hlc0NoYW5nZWRBZnRlciwgITEsICEwKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlvdXNDZW50cm9pZFhPZlRvdWNoZXNDaGFuZ2VkQWZ0ZXI6IGZ1bmN0aW9uKHRvdWNoSGlzdG9yeSwgdG91Y2hlc0NoYW5nZWRBZnRlcikge1xuICAgICAgICAgICAgcmV0dXJuIFRvdWNoSGlzdG9yeU1hdGguY2VudHJvaWREaW1lbnNpb24odG91Y2hIaXN0b3J5LCB0b3VjaGVzQ2hhbmdlZEFmdGVyLCAhMCwgITEpO1xuICAgICAgICB9LFxuICAgICAgICBwcmV2aW91c0NlbnRyb2lkWU9mVG91Y2hlc0NoYW5nZWRBZnRlcjogZnVuY3Rpb24odG91Y2hIaXN0b3J5LCB0b3VjaGVzQ2hhbmdlZEFmdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gVG91Y2hIaXN0b3J5TWF0aC5jZW50cm9pZERpbWVuc2lvbih0b3VjaEhpc3RvcnksIHRvdWNoZXNDaGFuZ2VkQWZ0ZXIsICExLCAhMSk7XG4gICAgICAgIH0sXG4gICAgICAgIGN1cnJlbnRDZW50cm9pZFg6IGZ1bmN0aW9uKHRvdWNoSGlzdG9yeSkge1xuICAgICAgICAgICAgcmV0dXJuIFRvdWNoSGlzdG9yeU1hdGguY2VudHJvaWREaW1lbnNpb24odG91Y2hIaXN0b3J5LCAwLCAhMCwgITApO1xuICAgICAgICB9LFxuICAgICAgICBjdXJyZW50Q2VudHJvaWRZOiBmdW5jdGlvbih0b3VjaEhpc3RvcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBUb3VjaEhpc3RvcnlNYXRoLmNlbnRyb2lkRGltZW5zaW9uKHRvdWNoSGlzdG9yeSwgMCwgITEsICEwKTtcbiAgICAgICAgfSxcbiAgICAgICAgbm9DZW50cm9pZDogLTFcbiAgICB9LCBUb3VjaEhpc3RvcnlNYXRoXzEgPSBUb3VjaEhpc3RvcnlNYXRoLCBjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzID0gZnVuY3Rpb24obmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5XzEucmVnaXN0ZXIobmFtZSwgY2FsbGJhY2spO1xuICAgIH0sIGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3NfMSA9IGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3M7XG4gICAgZnVuY3Rpb24gdGFrZVNuYXBzaG90KHZpZXcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIFwibnVtYmVyXCIgIT0gdHlwZW9mIHZpZXcgJiYgXCJ3aW5kb3dcIiAhPT0gdmlldyAmJiAodmlldyA9IGZpbmROdW1lcmljTm9kZUhhbmRsZSh2aWV3KSB8fCBcIndpbmRvd1wiKSwgXG4gICAgICAgIFVJTWFuYWdlci5fX3Rha2VTbmFwc2hvdCh2aWV3LCBvcHRpb25zKTtcbiAgICB9XG4gICAgdmFyIHRha2VTbmFwc2hvdF8xID0gdGFrZVNuYXBzaG90LCBpbmplY3RJbnRlcm5hbHMgPSBSZWFjdEZpYmVyRGV2VG9vbHNIb29rLmluamVjdEludGVybmFscztcbiAgICBSZWFjdEdlbmVyaWNCYXRjaGluZ18xLmluamVjdGlvbi5pbmplY3RGaWJlckJhdGNoZWRVcGRhdGVzKFJlYWN0TmF0aXZlRmliZXJSZW5kZXJlci5iYXRjaGVkVXBkYXRlcyk7XG4gICAgdmFyIHJvb3RzID0gbmV3IE1hcCgpO1xuICAgIFJlYWN0RmliZXJFcnJvckxvZ2dlci5pbmplY3Rpb24uaW5qZWN0RGlhbG9nKFJlYWN0TmF0aXZlRmliZXJFcnJvckRpYWxvZ18xLnNob3dEaWFsb2cpO1xuICAgIHZhciBSZWFjdE5hdGl2ZUZpYmVyID0ge1xuICAgICAgICBOYXRpdmVDb21wb25lbnQ6IFJlYWN0TmF0aXZlQ29tcG9uZW50XzEsXG4gICAgICAgIGZpbmROb2RlSGFuZGxlOiBmaW5kTnVtZXJpY05vZGVIYW5kbGUsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24oZWxlbWVudCwgY29udGFpbmVyVGFnLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSByb290cy5nZXQoY29udGFpbmVyVGFnKTtcbiAgICAgICAgICAgIHJldHVybiByb290IHx8IChyb290ID0gUmVhY3ROYXRpdmVGaWJlclJlbmRlcmVyLmNyZWF0ZUNvbnRhaW5lcihjb250YWluZXJUYWcpLCByb290cy5zZXQoY29udGFpbmVyVGFnLCByb290KSksIFxuICAgICAgICAgICAgUmVhY3ROYXRpdmVGaWJlclJlbmRlcmVyLnVwZGF0ZUNvbnRhaW5lcihlbGVtZW50LCByb290LCBudWxsLCBjYWxsYmFjayksIFJlYWN0TmF0aXZlRmliZXJSZW5kZXJlci5nZXRQdWJsaWNSb290SW5zdGFuY2Uocm9vdCk7XG4gICAgICAgIH0sXG4gICAgICAgIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uKGNvbnRhaW5lclRhZykge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSByb290cy5nZXQoY29udGFpbmVyVGFnKTtcbiAgICAgICAgICAgIHJvb3QgJiYgUmVhY3ROYXRpdmVGaWJlclJlbmRlcmVyLnVwZGF0ZUNvbnRhaW5lcihudWxsLCByb290LCBudWxsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByb290cy5kZWxldGUoY29udGFpbmVyVGFnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB1bm1vdW50Q29tcG9uZW50QXROb2RlQW5kUmVtb3ZlQ29udGFpbmVyOiBmdW5jdGlvbihjb250YWluZXJUYWcpIHtcbiAgICAgICAgICAgIFJlYWN0TmF0aXZlRmliZXIudW5tb3VudENvbXBvbmVudEF0Tm9kZShjb250YWluZXJUYWcpLCBVSU1hbmFnZXIucmVtb3ZlUm9vdFZpZXcoY29udGFpbmVyVGFnKTtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlUG9ydGFsOiBmdW5jdGlvbihjaGlsZHJlbiwgY29udGFpbmVyVGFnKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0UG9ydGFsLmNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgY29udGFpbmVyVGFnLCBudWxsLCBrZXkpO1xuICAgICAgICB9LFxuICAgICAgICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczogUmVhY3RHZW5lcmljQmF0Y2hpbmdfMS5iYXRjaGVkVXBkYXRlcyxcbiAgICAgICAgZmx1c2hTeW5jOiBSZWFjdE5hdGl2ZUZpYmVyUmVuZGVyZXIuZmx1c2hTeW5jLFxuICAgICAgICBfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDoge1xuICAgICAgICAgICAgTmF0aXZlTWV0aG9kc01peGluOiBOYXRpdmVNZXRob2RzTWl4aW5fMSxcbiAgICAgICAgICAgIFJlYWN0TmF0aXZlQnJpZGdlRXZlbnRQbHVnaW46IFJlYWN0TmF0aXZlQnJpZGdlRXZlbnRQbHVnaW5fMSxcbiAgICAgICAgICAgIFJlYWN0R2xvYmFsU2hhcmVkU3RhdGU6IFJlYWN0R2xvYmFsU2hhcmVkU3RhdGVfMSxcbiAgICAgICAgICAgIFJlYWN0TmF0aXZlQ29tcG9uZW50VHJlZTogUmVhY3ROYXRpdmVDb21wb25lbnRUcmVlXzEsXG4gICAgICAgICAgICBSZWFjdE5hdGl2ZVByb3BSZWdpc3RyeTogUmVhY3ROYXRpdmVQcm9wUmVnaXN0cnlfMSxcbiAgICAgICAgICAgIFRvdWNoSGlzdG9yeU1hdGg6IFRvdWNoSGlzdG9yeU1hdGhfMSxcbiAgICAgICAgICAgIGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3M6IGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3NfMSxcbiAgICAgICAgICAgIHRha2VTbmFwc2hvdDogdGFrZVNuYXBzaG90XzFcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihSZWFjdE5hdGl2ZUZpYmVyLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELCB7XG4gICAgICAgIFJlYWN0RGVidWdUb29sOiB7XG4gICAgICAgICAgICBhZGRIb29rOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgcmVtb3ZlSG9vazogZnVuY3Rpb24oKSB7fVxuICAgICAgICB9LFxuICAgICAgICBSZWFjdFBlcmY6IHtcbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgIHByaW50SW5jbHVzaXZlOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgcHJpbnRXYXN0ZWQ6IGZ1bmN0aW9uKCkge31cbiAgICAgICAgfVxuICAgIH0pLCBpbmplY3RJbnRlcm5hbHMoe1xuICAgICAgICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogUmVhY3ROYXRpdmVDb21wb25lbnRUcmVlXzEuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gICAgICAgIGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOiBSZWFjdE5hdGl2ZUZpYmVyUmVuZGVyZXIuZmluZEhvc3RJbnN0YW5jZSxcbiAgICAgICAgZ2V0SW5zcGVjdG9yRGF0YUZvclZpZXdUYWc6IFJlYWN0TmF0aXZlRmliZXJJbnNwZWN0b3IuZ2V0SW5zcGVjdG9yRGF0YUZvclZpZXdUYWcsXG4gICAgICAgIGJ1bmRsZVR5cGU6IDEsXG4gICAgICAgIHZlcnNpb246IFJlYWN0VmVyc2lvbixcbiAgICAgICAgcmVuZGVyZXJQYWNrYWdlTmFtZTogXCJyZWFjdC1uYXRpdmVcIlxuICAgIH0pO1xuICAgIHZhciBSZWFjdE5hdGl2ZUZpYmVyRW50cnkgPSBSZWFjdE5hdGl2ZUZpYmVyO1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVGaWJlckVudHJ5O1xufSgpO1xuIl19