{"version":3,"sources":["NativeEventEmitter.js"],"names":["EventEmitter","require","Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","nativeModule","sharedSubscriber","OS","_nativeModule","eventType","listener","context","addListener","count","listeners","length","removeListeners","subscription","module","exports"],"mappings":"AAWA,a,4tDAEA,GAAMA,cAAeC,QAAQ,cAAR,CAArB,CACA,GAAMC,UAAWD,QAAQ,UAAR,CAAjB,CACA,GAAME,uBAAwBF,QAAQ,uBAAR,CAA9B,CACA,GAAMG,WAAYH,QAAQ,oBAAR,CAAlB,C,GAQMI,mB,qEAGJ,4BAAYC,YAAZ,CAAkC,wKAC1BH,sBAAsBI,gBADI,GAEhC,GAAIL,SAASM,EAAT,GAAgB,KAApB,CAA2B,CACzBJ,UAAUE,YAAV,CAAwB,+BAAxB,EACA,MAAKG,aAAL,CAAqBH,YAArB,CACD,CAL+B,aAMjC,C,+EAEWI,S,CAAmBC,Q,CAAoBC,O,CAAuC,CACxF,GAAIV,SAASM,EAAT,GAAgB,KAApB,CAA2B,CACzB,KAAKC,aAAL,CAAmBI,WAAnB,CAA+BH,SAA/B,EACD,CACD,sIAAyBA,SAAzB,CAAoCC,QAApC,CAA8CC,OAA9C,EACD,C,8DAEkBF,S,CAAmB,CACpCN,UAAUM,SAAV,CAAqB,iCAArB,EACA,GAAIR,SAASM,EAAT,GAAgB,KAApB,CAA2B,CACzB,GAAMM,OAAQ,KAAKC,SAAL,CAAeL,SAAf,EAA0BM,MAAxC,CACA,KAAKP,aAAL,CAAmBQ,eAAnB,CAAmCH,KAAnC,EACD,CACD,sIAAyBJ,SAAzB,EACD,C,8DAEkBQ,Y,CAAmC,CACpD,GAAIhB,SAASM,EAAT,GAAgB,KAApB,CAA2B,CACzB,KAAKC,aAAL,CAAmBQ,eAAnB,CAAmC,CAAnC,EACD,CACD,sIAAyBC,YAAzB,EACD,C,gCAhC8BlB,Y,EAmCjCmB,OAAOC,OAAP,CAAiBf,kBAAjB","file":"NativeEventEmitter.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NativeEventEmitter\n * @flow\n */\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst Platform = require('Platform');\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\nconst invariant = require('fbjs/lib/invariant');\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\n/**\n * Abstract base class for implementing event-emitting modules. This implements\n * a subset of the standard EventEmitter node module API.\n */\nclass NativeEventEmitter extends EventEmitter {\n  _nativeModule: Object;\n\n  constructor(nativeModule: Object) {\n    super(RCTDeviceEventEmitter.sharedSubscriber);\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule, 'Native module cannot be null.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  addListener(eventType: string, listener: Function, context: ?Object): EmitterSubscription {\n    if (Platform.OS === 'ios') {\n      this._nativeModule.addListener(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: string) {\n    invariant(eventType, 'eventType argument is required.');\n    if (Platform.OS === 'ios') {\n      const count = this.listeners(eventType).length;\n      this._nativeModule.removeListeners(count);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (Platform.OS === 'ios') {\n      this._nativeModule.removeListeners(1);\n    }\n    super.removeSubscription(subscription);\n  }\n}\n\nmodule.exports = NativeEventEmitter;\n"]}