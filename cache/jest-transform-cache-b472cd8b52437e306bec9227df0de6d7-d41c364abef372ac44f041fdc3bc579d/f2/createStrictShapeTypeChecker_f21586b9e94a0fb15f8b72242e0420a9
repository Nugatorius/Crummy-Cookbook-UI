b958ed5cb857770c4597e4a4ea873b8b
'use strict';var invariant=require('fbjs/lib/invariant');var merge=require('merge');function createStrictShapeTypeChecker(shapeTypes){function checkType(isRequired,props,propName,componentName,location){if(!props[propName]){if(isRequired){invariant(false,'Required object `'+propName+'` was not specified in '+('`'+componentName+'`.'));}return;}var propValue=props[propName];var propType=typeof propValue;var locationName=location||'(unknown)';if(propType!=='object'){invariant(false,'Invalid '+locationName+' `'+propName+'` of type `'+propType+'` '+('supplied to `'+componentName+'`, expected `object`.'));}var allKeys=merge(props[propName],shapeTypes);for(var _len=arguments.length,rest=Array(_len>5?_len-5:0),_key=5;_key<_len;_key++){rest[_key-5]=arguments[_key];}for(var key in allKeys){var checker=shapeTypes[key];if(!checker){invariant(false,'Invalid props.'+propName+' key `'+key+'` supplied to `'+componentName+'`.'+'\nBad object: '+JSON.stringify(props[propName],null,'  ')+'\nValid keys: '+JSON.stringify(Object.keys(shapeTypes),null,'  '));}var error=checker.apply(undefined,[propValue,key,componentName,location].concat(rest));if(error){invariant(false,error.message+'\nBad object: '+JSON.stringify(props[propName],null,'  '));}}}function chainedCheckType(props,propName,componentName,location){for(var _len2=arguments.length,rest=Array(_len2>4?_len2-4:0),_key2=4;_key2<_len2;_key2++){rest[_key2-4]=arguments[_key2];}return checkType.apply(undefined,[false,props,propName,componentName,location].concat(rest));}chainedCheckType.isRequired=checkType.bind(null,true);return chainedCheckType;}module.exports=createStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIuanMiXSwibmFtZXMiOlsiaW52YXJpYW50IiwicmVxdWlyZSIsIm1lcmdlIiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsInNoYXBlVHlwZXMiLCJjaGVja1R5cGUiLCJpc1JlcXVpcmVkIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwibG9jYXRpb25OYW1lIiwiYWxsS2V5cyIsInJlc3QiLCJrZXkiLCJjaGVja2VyIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJlcnJvciIsIm1lc3NhZ2UiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVdBLGFBRUEsR0FBSUEsV0FBWUMsUUFBUSxvQkFBUixDQUFoQixDQUNBLEdBQUlDLE9BQVFELFFBQVEsT0FBUixDQUFaLENBRUEsUUFBU0UsNkJBQVQsQ0FDRUMsVUFERixDQUVrQyxDQUNoQyxRQUFTQyxVQUFULENBQW1CQyxVQUFuQixDQUErQkMsS0FBL0IsQ0FBc0NDLFFBQXRDLENBQWdEQyxhQUFoRCxDQUErREMsUUFBL0QsQ0FBbUYsQ0FDakYsR0FBSSxDQUFDSCxNQUFNQyxRQUFOLENBQUwsQ0FBc0IsQ0FDcEIsR0FBSUYsVUFBSixDQUFnQixDQUNkTixVQUNFLEtBREYsQ0FFRSxvQkFBcUJRLFFBQXJCLGdDQUNLQyxhQURMLE1BRkYsRUFLRCxDQUNELE9BQ0QsQ0FDRCxHQUFJRSxXQUFZSixNQUFNQyxRQUFOLENBQWhCLENBQ0EsR0FBSUksVUFBVyxNQUFPRCxVQUF0QixDQUNBLEdBQUlFLGNBQWVILFVBQVksV0FBL0IsQ0FDQSxHQUFJRSxXQUFhLFFBQWpCLENBQTJCLENBQ3pCWixVQUNFLEtBREYsQ0FFRSxXQUFXYSxZQUFYLE1BQTZCTCxRQUE3QixlQUFxREksUUFBckQsdUJBQ21CSCxhQURuQix5QkFGRixFQUtELENBR0QsR0FBSUssU0FBVVosTUFBTUssTUFBTUMsUUFBTixDQUFOLENBQXVCSixVQUF2QixDQUFkLENBdkJpRiw4QkFBTlcsSUFBTSxpREFBTkEsSUFBTSwwQkF3QmpGLElBQUssR0FBSUMsSUFBVCxHQUFnQkYsUUFBaEIsQ0FBeUIsQ0FDdkIsR0FBSUcsU0FBVWIsV0FBV1ksR0FBWCxDQUFkLENBQ0EsR0FBSSxDQUFDQyxPQUFMLENBQWMsQ0FDWmpCLFVBQ0UsS0FERixDQUVFLGlCQUFpQlEsUUFBakIsVUFBbUNRLEdBQW5DLG1CQUEwRFAsYUFBMUQsdUJBQ3FCUyxLQUFLQyxTQUFMLENBQWVaLE1BQU1DLFFBQU4sQ0FBZixDQUFnQyxJQUFoQyxDQUFzQyxJQUF0QyxDQURyQixrQkFFcUJVLEtBQUtDLFNBQUwsQ0FBZUMsT0FBT0MsSUFBUCxDQUFZakIsVUFBWixDQUFmLENBQXdDLElBQXhDLENBQThDLElBQTlDLENBSnZCLEVBTUQsQ0FDRCxHQUFJa0IsT0FBUUwseUJBQVFOLFNBQVIsQ0FBbUJLLEdBQW5CLENBQXdCUCxhQUF4QixDQUF1Q0MsUUFBdkMsU0FBb0RLLElBQXBELEVBQVosQ0FDQSxHQUFJTyxLQUFKLENBQVcsQ0FDVHRCLFVBQ0UsS0FERixDQUVFc0IsTUFBTUMsT0FBTixrQkFDcUJMLEtBQUtDLFNBQUwsQ0FBZVosTUFBTUMsUUFBTixDQUFmLENBQWdDLElBQWhDLENBQXNDLElBQXRDLENBSHZCLEVBS0QsQ0FDRixDQUNGLENBQ0QsUUFBU2dCLGlCQUFULENBQ0VqQixLQURGLENBRUVDLFFBRkYsQ0FHRUMsYUFIRixDQUlFQyxRQUpGLENBTVUsZ0NBRExLLElBQ0ssdURBRExBLElBQ0ssNEJBQ1IsTUFBT1YsNEJBQVUsS0FBVixDQUFpQkUsS0FBakIsQ0FBd0JDLFFBQXhCLENBQWtDQyxhQUFsQyxDQUFpREMsUUFBakQsU0FBOERLLElBQTlELEVBQVAsQ0FDRCxDQUNEUyxpQkFBaUJsQixVQUFqQixDQUE4QkQsVUFBVW9CLElBQVYsQ0FBZSxJQUFmLENBQXFCLElBQXJCLENBQTlCLENBQ0EsTUFBT0QsaUJBQVAsQ0FDRCxDQUVERSxPQUFPQyxPQUFQLENBQWlCeEIsNEJBQWpCIiwiZmlsZSI6ImNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXJcbiAqIEBmbG93XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIG1lcmdlID0gcmVxdWlyZSgnbWVyZ2UnKTtcblxuZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihcbiAgc2hhcGVUeXBlczoge1trZXk6IHN0cmluZ106IFJlYWN0UHJvcHNDaGVja1R5cGV9XG4pOiBSZWFjdFByb3BzQ2hhaW5hYmxlVHlwZUNoZWNrZXIge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbj8sIC4uLnJlc3QpIHtcbiAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSkge1xuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGBSZXF1aXJlZCBvYmplY3QgXFxgJHtwcm9wTmFtZX1cXGAgd2FzIG5vdCBzcGVjaWZpZWQgaW4gYCArXG4gICAgICAgICAgYFxcYCR7Y29tcG9uZW50TmFtZX1cXGAuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IGxvY2F0aW9uIHx8ICcodW5rbm93biknO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGBJbnZhbGlkICR7bG9jYXRpb25OYW1lfSBcXGAke3Byb3BOYW1lfVxcYCBvZiB0eXBlIFxcYCR7cHJvcFR5cGV9XFxgIGAgK1xuICAgICAgICAgIGBzdXBwbGllZCB0byBcXGAke2NvbXBvbmVudE5hbWV9XFxgLCBleHBlY3RlZCBcXGBvYmplY3RcXGAuYFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAvLyBwcm9wcy5cbiAgICB2YXIgYWxsS2V5cyA9IG1lcmdlKHByb3BzW3Byb3BOYW1lXSwgc2hhcGVUeXBlcyk7XG4gICAgZm9yICh2YXIga2V5IGluIGFsbEtleXMpIHtcbiAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBgSW52YWxpZCBwcm9wcy4ke3Byb3BOYW1lfSBrZXkgXFxgJHtrZXl9XFxgIHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAuYCArXG4gICAgICAgICAgICBgXFxuQmFkIG9iamVjdDogYCArIEpTT04uc3RyaW5naWZ5KHByb3BzW3Byb3BOYW1lXSwgbnVsbCwgJyAgJykgK1xuICAgICAgICAgICAgYFxcblZhbGlkIGtleXM6IGAgKyBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzaGFwZVR5cGVzKSwgbnVsbCwgJyAgJylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCAuLi5yZXN0KTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgZXJyb3IubWVzc2FnZSArXG4gICAgICAgICAgICBgXFxuQmFkIG9iamVjdDogYCArIEpTT04uc3RyaW5naWZ5KHByb3BzW3Byb3BOYW1lXSwgbnVsbCwgJyAgJylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2hhaW5lZENoZWNrVHlwZShcbiAgICBwcm9wczoge1trZXk6IHN0cmluZ106IGFueX0sXG4gICAgcHJvcE5hbWU6IHN0cmluZyxcbiAgICBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4gICAgbG9jYXRpb24/OiBzdHJpbmcsXG4gICAgLi4ucmVzdFxuICApOiA/RXJyb3Ige1xuICAgIHJldHVybiBjaGVja1R5cGUoZmFsc2UsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIC4uLnJlc3QpO1xuICB9XG4gIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyO1xuIl19