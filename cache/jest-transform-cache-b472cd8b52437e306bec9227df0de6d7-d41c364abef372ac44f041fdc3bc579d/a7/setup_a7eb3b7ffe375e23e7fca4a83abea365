71ec8d5b41be068f1b9d020cbf640aa7
'use strict';jest.mock('setupDevtools').mock('npmlog');jest.mock('InitializeCore',function(){}).mock('Image',function(){return mockComponent('Image');}).mock('Text',function(){return mockComponent('Text');}).mock('TextInput',function(){return mockComponent('TextInput');}).mock('Modal',function(){return mockComponent('Modal');}).mock('View',function(){return mockComponent('View');}).mock('RefreshControl',function(){return require.requireMock('RefreshControlMock');}).mock('ScrollView',function(){return require.requireMock('ScrollViewMock');}).mock('ActivityIndicator',function(){return mockComponent('ActivityIndicator');}).mock('ListView',function(){return require.requireMock('ListViewMock');}).mock('ListViewDataSource',function(){var DataSource=require.requireActual('ListViewDataSource');DataSource.prototype.toJSON=function(){function ListViewDataSource(dataBlob){var _this=this;this.items=0;try{Object.keys(dataBlob).forEach(function(key){_this.items+=dataBlob[key]&&(dataBlob[key].length||dataBlob[key].size||0);});}catch(e){this.items='unknown';}}return new ListViewDataSource(this._dataBlob);};return DataSource;}).mock('AnimatedImplementation',function(){var AnimatedImplementation=require.requireActual('AnimatedImplementation');var oldCreate=AnimatedImplementation.createAnimatedComponent;AnimatedImplementation.createAnimatedComponent=function(Component){var Wrapped=oldCreate(Component);Wrapped.__skipSetNativeProps_FOR_TESTS_ONLY=true;return Wrapped;};return AnimatedImplementation;}).mock('ReactNative',function(){var ReactNative=require.requireActual('ReactNative');var NativeMethodsMixin=ReactNative.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;['measure','measureInWindow','measureLayout','setNativeProps','focus','blur'].forEach(function(key){var warned=false;NativeMethodsMixin[key]=function(){if(warned){return;}warned=true;console.warn('Calling .'+key+'() in the test renderer environment is not '+'supported. Instead, mock out your components that use '+'findNodeHandle with replacements that don\'t rely on the '+'native environment.');};});return ReactNative;}).mock('ensureComponentIsNative',function(){return function(){return true;};});var mockComponent=require.requireActual('./mockComponent');require.requireActual('../Libraries/polyfills/babelHelpers.js');require.requireActual('../Libraries/polyfills/Object.es7.js');require.requireActual('../Libraries/polyfills/error-guard');global.__DEV__=true;global.Promise=require.requireActual('promise');global.regeneratorRuntime=require.requireActual('regenerator-runtime/runtime');global.requestAnimationFrame=function(callback){setTimeout(callback,0);};global.cancelAnimationFrame=function(id){clearTimeout(id);};jest.setMock('ErrorUtils',require('ErrorUtils'));var mockEmptyObject={};var mockNativeModules={AlertManager:{alertWithArgs:jest.fn()},AppState:{addEventListener:jest.fn()},AsyncLocalStorage:{multiGet:jest.fn(function(keys,callback){return process.nextTick(function(){return callback(null,[]);});}),multiSet:jest.fn(function(entries,callback){return process.nextTick(function(){return callback(null);});}),multiRemove:jest.fn(function(keys,callback){return process.nextTick(function(){return callback(null);});}),multiMerge:jest.fn(function(entries,callback){return process.nextTick(function(){return callback(null);});}),clear:jest.fn(function(callback){return process.nextTick(function(){return callback(null);});}),getAllKeys:jest.fn(function(callback){return process.nextTick(function(){return callback(null,[]);});})},BuildInfo:{appVersion:'0',buildVersion:'0'},Clipboard:{setString:jest.fn()},DataManager:{queryData:jest.fn()},DeviceInfo:{Dimensions:{window:{fontScale:2,height:1334,scale:2,width:750}}},FacebookSDK:{login:jest.fn(),logout:jest.fn(),queryGraphPath:jest.fn(function(path,method,params,callback){return callback();})},FbRelayNativeAdapter:{updateCLC:jest.fn()},GraphPhotoUpload:{upload:jest.fn()},I18n:{translationsDictionary:JSON.stringify({'Good bye, {name}!|Bye message':'\xA1Adi\xF3s {name}!'})},ImageLoader:{getSize:jest.fn(function(url){return new Promise(function(){return{width:320,height:240};});}),prefetchImage:jest.fn()},ImageViewManager:{getSize:jest.fn(function(uri,success){return process.nextTick(function(){return success(320,240);});}),prefetchImage:jest.fn()},KeyboardObserver:{addListener:jest.fn(),removeListeners:jest.fn()},Linking:{openURL:jest.fn(),canOpenURL:jest.fn(function(){return new Promise(function(resolve){return resolve(true);});}),addEventListener:jest.fn(),getInitialURL:jest.fn(function(){return new Promise(function(resolve){return resolve();});}),removeEventListener:jest.fn()},LocationObserver:{getCurrentPosition:jest.fn(),startObserving:jest.fn(),stopObserving:jest.fn()},ModalFullscreenViewManager:{},NetInfo:{fetch:jest.fn(function(){return new Promise(function(resolve){return resolve();});}),addEventListener:jest.fn(),isConnected:{fetch:jest.fn(function(){return new Promise(function(resolve){return resolve();});}),addEventListener:jest.fn()}},Networking:{sendRequest:jest.fn(),abortRequest:jest.fn(),addListener:jest.fn(),removeListeners:jest.fn()},PushNotificationManager:{presentLocalNotification:jest.fn(),scheduleLocalNotification:jest.fn(),cancelAllLocalNotifications:jest.fn(),removeAllDeliveredNotifications:jest.fn(),getDeliveredNotifications:jest.fn(function(callback){return process.nextTick(function(){return[];});}),removeDeliveredNotifications:jest.fn(),setApplicationIconBadgeNumber:jest.fn(),getApplicationIconBadgeNumber:jest.fn(function(callback){return process.nextTick(function(){return callback(0);});}),cancelLocalNotifications:jest.fn(),getScheduledLocalNotifications:jest.fn(function(callback){return process.nextTick(function(){return callback();});}),requestPermissions:jest.fn(function(){return Promise.resolve({alert:true,badge:true,sound:true});}),abandonPermissions:jest.fn(),checkPermissions:jest.fn(function(callback){return process.nextTick(function(){return callback({alert:true,badge:true,sound:true});});}),getInitialNotification:jest.fn(function(){return Promise.resolve(null);}),addListener:jest.fn(),removeListeners:jest.fn()},SourceCode:{scriptURL:null},StatusBarManager:{setColor:jest.fn(),setStyle:jest.fn(),setHidden:jest.fn(),setNetworkActivityIndicatorVisible:jest.fn(),setBackgroundColor:jest.fn(),setTranslucent:jest.fn()},Timing:{createTimer:jest.fn(),deleteTimer:jest.fn()},UIManager:{AndroidViewPager:{Commands:{setPage:jest.fn(),setPageWithoutAnimation:jest.fn()}},blur:jest.fn(),createView:jest.fn(),dispatchViewManagerCommand:jest.fn(),focus:jest.fn(),setChildren:jest.fn(),manageChildren:jest.fn(),updateView:jest.fn(),removeSubviewsFromContainerWithID:jest.fn(),replaceExistingNonRootView:jest.fn(),customBubblingEventTypes:{},customDirectEventTypes:{},AndroidTextInput:{Commands:{}},ModalFullscreenView:{Constants:{}},ScrollView:{Constants:{}},View:{Constants:{}}},BlobModule:{BLOB_URI_SCHEME:'content',BLOB_URI_HOST:null,enableBlobSupport:jest.fn(),disableBlobSupport:jest.fn(),createFromParts:jest.fn(),sendBlob:jest.fn(),release:jest.fn()},WebSocketModule:{connect:jest.fn(),send:jest.fn(),sendBinary:jest.fn(),ping:jest.fn(),close:jest.fn(),addListener:jest.fn(),removeListeners:jest.fn()}};Object.keys(mockNativeModules).forEach(function(module){try{jest.doMock(module,function(){return mockNativeModules[module];});}catch(e){jest.doMock(module,function(){return mockNativeModules[module];},{virtual:true});}});jest.doMock('NativeModules',function(){return mockNativeModules;}).doMock('ReactNativePropRegistry',function(){return{register:function register(id){return id;},getByID:function getByID(){return mockEmptyObject;}};});jest.doMock('requireNativeComponent',function(){var React=require('react');return function(viewName){return function(props){return React.createElement(viewName,props,props.children);};};});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,